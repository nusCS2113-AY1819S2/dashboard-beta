[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d NoteNote"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-T09-3/main[image:https://travis-ci.org/CS2113-AY1819S2-T09-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* This is a desktop task management application for Computing students who need to manage multiple projects simultaneously."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Aiming to reach to the height where users can manage projects faster than a GUI-driven application, this application is suitable for users who would like to be / are reasonably comfortable with using CLI apps"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* This application was built using the source code found in https://github.com/se-edu/addressbook-level4[AddressBook-level4] by SE-EDU."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 2,
      "andreathniah": 6,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"githubId\": \"arhjaye\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"displayName\": \"YOW...JIE\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"authorNames\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"arhjaye\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"yow ren jie\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"Yow Ren Jie\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"githubId\": \"andreathniah\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"displayName\": \"THN...REA\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"authorNames\": ["
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"andreathniah\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"Andrea Thniah\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"githubId\": \"gautamrajulu\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"displayName\": \"SAN...ULU\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"authorNames\": ["
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"gautamrajulu\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"Gautam Rajulu\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"githubId\": \"rachellim10\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"displayName\": \"RAC... YU\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"authorNames\": ["
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"rachellim10\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"Rachel Lim Fang Yu\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"githubId\": \"josephinetanadi\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"displayName\": \"JOS...ADI\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"authorNames\": ["
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"josephinetanadi\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"Josephine Tanadi\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\t\"081888\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 46
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "mainClassName \u003d \u0027seedu.project.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    archiveName \u003d \u0027NoteNote.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            test.include \u0027seedu/project/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            test.include \u0027seedu/project/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            test.exclude \u0027seedu/project/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        \u0027site-name\u0027: \u0027NoteNote\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S2-T09-3/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 230,
      "andreathniah": 7
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "NoteNote was developed by the https://github.com/CS2113-AY1819S2-T09-3[T09-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d The Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Yow Ren Jie"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::arhjaye.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{empty}[http://github.com/arhjaye[github]] [\u003c\u003carhjaye#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Role: Team Lead, Deliverables \u0026 Deadline, Documentation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Responsibilities: Logic and Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Gautam Rajulu"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::gautamrajulu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{empty}[https://github.com/gautamrajulu[github]] [\u003c\u003cgautamrajulu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Role: Documentation, Integration, Testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Responsibilities: Model \u0026 Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Andrea Thniah"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::andreathniah.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{empty}[http://github.com/andreathniah[github]] [\u003c\u003candreathniah#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Role: Documentation, Testing, Git IC, Integration"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Responsibilities: Logic and Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Josephine Tanadi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::josephinetanadi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{empty}[http://github.com/josephinetanadi[github]] [\u003c\u003cjosephinetanadi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Role: Documentation, Testing, Deliverables \u0026 Deadline"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Responsibilities: Logic, Model, UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Rachel Lim"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::rachellim10.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{empty}[http://github.com/rachellim10[github]] [\u003c\u003crachellim10#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Role: Documentation, Testing, Tracking \u0026 Scheduling"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Responsibilities: Model \u0026 Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 10,
      "-": 30,
      "andreathniah": 16
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d Project Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "By: `T09-3`      Since: `22 Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ". Run the `seedu.project.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::SDforDeleteTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ".  `Logic` uses the `ProjectParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "image::DeleteTaskSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* stores the Project List Data and Project Data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Classes used by multiple components are in the `seedu.projectbook.commons` package."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedProject`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "It extends `Project` with an undo/redo history, stored internally as an `projectStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `VersionedProject#commit()` -- Saves the current project state in its history."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `VersionedProject#undo()` -- Restores the previous project state from its history."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `VersionedProject#redo()` -- Restores a previously undone project state from its history."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitProject()`, `Model#undoProject()` and `Model#redoProject()` respectively."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedProject` will be initialized with the initial project state, and the `currentStatePointer` pointing to that single project state."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th task in the project. The `delete` command calls `Model#commitProject()`, causing the modified state of the project after the `delete 5` command executes to be saved in the `projectStateList`, and the `currentStatePointer` is shifted to the newly inserted project state."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new task. The `add` command also calls `Model#commitProject()`, causing another modified project state to be saved into the `projectStateList`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "If a command fails its execution, it will not call `Model#commitProject()`, so the project state will not be saved into the `projectStateList`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoProject()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous project state, and restores the project to that state."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial project state, then there are no previous project states to restore. The `undo` command uses `Model#canUndoProject()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoProject()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the project to that state."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "If the `currentStatePointer` is at index `projectStateList.size() - 1`, pointing to the latest project state, then there are no undone project states to restore. The `redo` command uses `Model#canRedoProject()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the project, such as `list`, will usually not call `Model#commitProject()`, `Model#undoProject()` or `Model#redoProject()`. Thus, the `projectStateList` remains unchanged."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitProject()`. Since the `currentStatePointer` is not pointing at the end of the `projectStateList`, all project states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire project."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of project states."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedProject`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d Import/Export feature"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The `import` feature reads projects from a JSON file provided as input and adds these projects on top of the current list of projects."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The mechanism is facilitated by `JsonUtil` and is achieved using the following functions:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `JsonUtil#readJsonFile()` -- Read projects from JSON file"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `VersionedProjectList#addProject()` -- Adds projects from JSON file to project list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The `export` feature exports the current selected project (after `select` 1) or projects specified by their index to a JSON file."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The mechanism is facilitated by `FileUtil` and `JsonUtil` and is achieved using the following functions:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `FileUtil#createIfMissing()` -- Creates JSON file to write to if it does not exist"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `JsonUtil#saveJsonFile()` -- Writes projects to JSON file"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Given below is an example usage scenario and how the import/export mechanism behaves at each step."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Step 1. The user launches the application, `projectList` will be populated by invoking `StorageManager#readProjectList`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "If user launches the application for the first time, `projectList` will be populated with sample project list as *_./data/projectlist.json_* does not exist."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Step 2. The user executes `import ./data/import.json` to add projects from JSON file to `versionedProjectList`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".. Path to JSON file is passed to `JsonUtil#readJsonFile()` which would read projects to a temporary project list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".. Application will then loop through all projects and add them to `versionedProjectList` using `VersionedProjectList#addProject()`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".. `updateFilteredProjectList` is then executed to refresh `ProjectListPanel` with all projects, including recently imported projects."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Step 3. The user executes `export i/1,2,3 o/./data/export.json` to export projects with index 1, 2 and 3."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".. Application will `get` the projects from `filteredProjectList` and add them to a new ProjectList `projectsToExport`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".. `projectsToExport` is then passed to `JsonUtil#saveJsonFile()` which would write to output file specified by user."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The entire project list could be found in *_./data/projectlist.json_*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Tracking projects within project list and tasks within each project"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* **Alternative 1:** Each project will have its own *_\u003cProject File\u003e.json_* to keep track of tasks."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Cons: May clutter data folder with too many project files. Application will have to read a new project file whenever user switches project."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* **Alternative 2 (current choice):** All projects within project list and all tasks of all projects contained in *_project.json_* file."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Pros: Will not clutter data folder."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Cons: Entire project list has to be written to file every time project list is modified."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "// tag::Comparetaskfeature[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Compare Task feature"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "The Compare Task feature allows the user to compare the past iteration of a task before it was edited."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Building on top of the Undo/Redo feature, it is facilitated by `VersionedProject` and implements the following operations:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* `VersionedProject#compareTask()` -- Compares the chosen task with its previous version if it exist."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#compareTask()`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Given below is an example usage scenario and how the Compare Task mechanism behaves."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "image::compare1.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Step 1. The user selects the task to compare by entering the index of the task that is shown. `CompareCommandParser#CompareCommand()` will then get the index of the task"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "within `projectStateList` and passed into `CompareCommand#CommandResult()`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Step 2. The index will then be used by `CompareCommand#CommandResult()` to retrieved the Task object within `projectStateList` and passed into `VersionedProject#compareTask()`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Step 3. `VersionedProject#compareTask()` will retrieve the unique `taskId` of the chosen task."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "image::compare2.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Step 4. `VersionedProject#compareTask()` will iterate through all the the tasks within each project state. The `taskId`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "will be used to determine if the task encountered during the iteration is the same as the chosen task."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "If no same tasks are found after iterating through all the project states, or if there is no difference in all the task"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "that is encountered, \"Nothing to compare\" will be showed to the user."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Step 5. If the task encountered is the same as the chosen task, the 2 task will be compared against their name, description \u0026 deadline."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "image::compare 3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Step 6. If there is a difference in any of the fields in the comparison, the difference will be showed to the user."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Else Step 4. will continue to run to look for another version of the chosen task to compare."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* **Alternative 1 (current choice):** Utilise existing versionedProject to look for the specific in previous verions."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Cons: A large versionedProject might result in a slow system performance."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* **Alternative 2:** All tasks will have their own \"versionedTask\", keeping track of its own history per task."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Pros: System performance will be better as you will iterate through lesser data."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Cons: Harder to implement, can be considered for future version in v2.0"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "// end::Comparetaskfeature[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\u003d\u003d\u003d List Feature"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Step 1: User uses list feature in task level to list all tasks and in project level to list all projects/"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Step 2: Program retrieves an updated version of `Model#filteredTaskList()` via `Model#updateFilteredTaskList()`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* **Current Choice: ** Check which level the program is on before retrieving the relevant list and displaying it"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "** Pros: Single command for two levels"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "// tag::listtag[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d List Tag feature"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 1: User starts to list all tags and their relevant tasks by `listtag`. `ListTagCommand` retrieves result of `Model#filteredTaskList()` and iterate through all the tasks and obtain a list of unique tags within each project state."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 2: Through this list of unique tags and another iteration through all tasks, task names with the same tags are concatenated to a string and displayed to `CommandResult`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 1 (current choice):** `getFilteredTaskList` to retrieve relevant information."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Cons: Data from `getFilteredTaskList` have to be parsed and clean all in one file."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 2:** Cleaning of data to be done at their respective/relevant class files."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Pros: Will not clutter `ListTagCommand` file."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "// end::listtag[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "// tag::definetag[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Define Tag feature"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "The `definetag` feature allows users to create a group tag and add multiple child tags into it. It should be used in conjuction with `addtag` feature."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 1: User creates new group tag and its associated children tag with `definetag`. `DefineTagCommandParser` create a new `GroupTag` object that contains the group tag’s name and its associated tags and return them to `DefineTagCommand`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 2: `DefineTagCommand` checks if GroupTag is unique via `Model#hasGroupTag` and adds the object to the model with `Model#addGroupTag` and `Model#commitProjectList` if it is."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 1 (current choice):** Results of define tag is not stored."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Cons: Created group tag is lost once the NoteNote instance is restarted."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 2:** Storing results of define tag."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Pros: Created group tag can be used between all instances of NoteNote."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "// end::definetag[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "// tag::addtag[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d Add Tag feature"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "The `addtag` feature allows users to apply existing group tag to multiple tasks. It should be used in conjuction with `definetag` feature."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 1: User selects task index and its favoured group tag with `addtag`. `AddTagCommandParser` parses the arguements and return them `AddTagCommand#AddTagCommand()`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Step 2: `AddTagCommand` gets a updated task list with `Model#getFilteredTaskList()` and iterate to add tags in the `GroupTag` object to chosen task."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* **Alternative 1 (current choice):** Results is stored."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "// end::addtag[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "// tag::ViewTaskHistory[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d View Task Edit History Feature"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "View task edit history allows the user to view a list of all the edit history of a chosen task."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Stores a parallel list `userInputHistoryTaskId` along `userInputHistory`, containing the taskId of `edit` commands."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "The list will store `0` for all other commands."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "It is facilitated by `CommandHistory` and implements the following operations:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* `CommandHistory#addHistoryTaskId()` -- Adds taskId to the index that is the same as the `edit` command. Pads `0` for all other commands."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Given below is an example usage scenario and how the Compare Task mechanism behaves."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "image::ViewTaskHistorySeq1.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Behaviour when all other commands (not `edit`) is called. `CommandHistory#addHistoryTaskId()` will not be called thus `userInputHistoryTaskId` will not be updated."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "However `userInputHistory` will still be updated as usual."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "image::ViewTaskHistorySeq2.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Behaviour when a `edit` command  is called. `CommandHistory#addHistoryTaskId()` will be called thus `userInputHistoryTaskId` will be updated with the taskId of the task where the"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "`edit` command is called on. Observe that positions of previous non-`edit` command will be filled with `0`. `userInputHistory` will still be updated as usual."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* **Alternative 1 (current choice):** Implement a separate list `userInputHistoryTaskId` alongside `userInputHistory` to contain taskId of task where `edit` is called on."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Cons: A large `userInputHistoryTaskId` might result in a slower system performance during search and contains wasted space as well."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* **Alternative 2:** All tasks will have their own `userInputHistoryTaskId`, keeping track of its own edit history."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Pros: System performance will be better as you will iterate through lesser data, will have less wastage of space."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** Cons: Harder to implement, can be considered for future version in v2.0"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "// end::ViewTaskHistory[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "// tag::calendarview[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d [Proposed] Calendar View"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "As of v1.2, this feature is still in the process of implementation."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "The calendar leverages on the Google calendar API to enable this feature. A sample usage, along with the behaviour of the calendar model at each step, is given below:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Step 1: The user launches the application and executes `add n/Decide on Research Paper Topic d/Security-related by/01/01/2020 t/cs3235`. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Step 2: The `AddCommandParser` parses out the strings for the name, description, deadline and tag. +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Step 3: `ParserUtil` checks that the input strings are valid, and initialises the `Name`, `Description`, `Deadline` and `Tag`. +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Step 4: A new `CalendarEvent` is initialised and will be displayed in the calendar GUI."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Navigation of calendar feature"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* **Alternative 1 (current choice):** Keyboard arrows (up, down, left, right) to toggle between dates."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Pros: Easier to implement and fits the project direction of focusing on CLI."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Cons: Less user-friendly to toggle to a date far in the future."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* **Alternative 2:** Keyboard arrows and scroll wheel."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Pros: More user-friendly."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Cons: More things to factor in during implementation, and possibly more issues as well."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "// end::calendarview[]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.project.ui` package."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "e.g. `seedu.project.commons.StringUtilTest`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "e.g. `seedu.project.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "e.g. `seedu.project.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/project/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* COM Students who need to manage multiple projects simultaneously"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*Value proposition*: Manage multiple projects and to manage the individual tasks within a project"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user | add project | manage multiple projects"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user | insert task| record tasks that need to be done"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user | delele task | get rid of tasks that are completed or no longer need to be done"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| update task | change details of a particular task when changes are necessary"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| read task | look through and be reminded of the details of a specific task"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| break down tasks into subtasks | easily view and complete them step-by-step"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| insert subtask | record smaller tasks or more specific action items to be done"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| delete subtask | get rid of subtasks that are completed or no longer needs to be done"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| update subtask | change details of a particular subtask when changes are necessary"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| read subtask | look through and be reminded of the details of a specific subtask"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| set recurring subtask | spare myself from the need to manually add the same task to future dates"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| delete recurring subtask | get rid of tasks that I no longer want to have repeated reminders of"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| update recurring subtask | change details of a particular recurring task when changes are necessary and have such changes be reflected across all its future recurring subtasks"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| read recurring subtask | look through and be reminded of the details of a specific recurring subtask"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* *` | user| have a calendar view of tasks | find upcoming tasks via a calendar overview"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* *` | user| have a table view | have an overall view to store and view any kind of structured data"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| insert tags to tasks | categorize tasks based on projects/priority/etc"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| delete tags | remove tags that is unnecessary"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| update tags | change how I want a particular task to be categorised"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| have coloured tags | easily view the categories of tasks at one glance"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| prioritize tasks | complete them in order of importance, especially if they have roughly the same deadlines"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| share / sync task | make sure that my collaborators are aware of what needs to be done"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| set task deadlines | be reminded when the task is due soon"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* *` | user| show task by creation date | be reminded not to neglect low priority tasks"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* *` | user| have a progress overview | keep track of my productivity based on how much of a project has been completed"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| have a ‘help’ manual | learn how to use various commands to operate this product"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | advance user| have command shortcuts | type a command faster"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| have export and import function | share task format easily with another user using the same format structure"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`*` | user| attach files to task | easily find the corresponding files to work on"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| find task by keywords | easily navigate to the specific task"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| view tasks by alphabetical order | easily find a specific task"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| view task by priority | know what will be due first"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| undo/redo a command | remove/redo a command that I entered/removed by mistake"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* *` | user| view a analysis of my current progress | have a overview of how much I have completed / not completed"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| view the previous version of my task | see what changes I have made previously"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|`* * *` | user| view the edit history of my task | see all the changes I have made to the task"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "(For all use cases below, the *System* is the `ProjectManager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a project listing"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "1.  User requests to create a project listing"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*1a. User submits the following information. Project ID || Project Name || Project description || Project end date || Module"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "2.  ProjectManager creates the project listing"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Use case: Adding a task within a project"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "1.  User request to view all project listings"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "2.  ProjectManager shows all project listings"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "3.  User request to view all task within a chosen project"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "4.  ProjectManager shows all tasks within the chosen project"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "5.  User request to create task within selected project"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* 5a. User submits the following information: Task ID| Task Name | Deadline | Description | Tags (Priority Level, collaborators, etc...)"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "6.  ProjectManager creates task"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* 5a1 Missing information"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** 5a1a ProjectManager displays error message"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Use case resumes at step 5"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Use case: Manage existing task (managing tags)"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "1.  User request to view all project listings"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "2.  ProjectManager shows all project listings"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "3.  User request to view all task within a chosen project"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "4.  ProjectManager shows all tasks within the chosen project"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "5.  User request to edit tags of chosen tag"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* 5a. User submits the following information: Task ID| Current Tag Name | New Tag Name"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "6.  ProjectManager updates tag"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* 5a1 Task ID not found / Current Tag Name not found"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "** 5a1a ProjectManager displays error message"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Use case resumes at step 5"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Use case: Delete existing task"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "1.  User request to view all project listings"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "2.  ProjectManager shows all project listings"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "3.  User request to view all task within a chosen project"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "4.  ProjectManager shows all tasks within the chosen project"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "5.  User request to delete a specific task"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "6.  ProjectManager deletes task"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ". Deleting a task while all task of a chosen project are listed"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ".. Prerequisites: List all task using the `list _x_` command from the project listing page (where _x_ is the project ID). Multiple tasks in the list."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 26,
      "gautamrajulu": 15,
      "josephinetanadi": 51,
      "arhjaye": 190,
      "andreathniah": 87,
      "-": 588
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX framework, which this code base uses for its UI, uses _events_ to communicate user input (such as mouse movement and button presses) to interested _event consumers_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX event loop acts as an _event dispatcher_ to transmit events to event consumers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/javafx/events-tutorial/events.htm[JavaFX: Handling Events]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Note how components of Project have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Note how the Project app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Add more assertions to Project as you see fit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the Project app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Add more logging to Project as you see fit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Note how Project uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Analyze the Project code/design to identify,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the Project app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as Jackson. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the Project app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Test methods `prefsReadSave()` and `projectReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Test method `handleProjectChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleProjectChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern*: The code base uses JavaFX\u0027s https://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ObservableValue.html[`ObservableValue`] interface to allow objects to watch for changes in data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "This interface is an implementation of the Observer pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Objects that are interested in changes to an `ObservableValue` can register a listener via `ObservableValue#addListener(...)`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "When the value represented by the `ObservableValue` changes, it will notify all registered listeners."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `TaskListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 259,
      "andreathniah": 12
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d NoteNote Level 4 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T09-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "By: `Team CS2113T T09-3`      Since: `Mar 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Welcome to NoteNote (NN)!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "If you\u0027re looking for an application to organize your projects you\u0027ve come to the right place! But that\u0027s not all NoteNote can do! NoteNote can also keep track of individual tasks, analyze your productivity and share your To-Do list with your friends!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "We designed the application ground up for computing students, so you can say that NoteNote is designed for computing students, by computing students, so you can be sure that it will fulfil all your project management needs!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Built for computing students, NoteNote uses minimal (GUI) elements, instead opting for a faster Command Line Interface (CLI) while maintaining the benefits of the GUI. So if you can type fast and are used to command line, NoteNote is sure to help manage your task faster than other traditional GUI based task managers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "So just head over to our \u003c\u003cQuick Start\u003e\u003e section and begin your NoteNote experience!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d How to use this guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "There are several terms which we use throughout our guide. To make your life easier, please do read the following section to ensure that you are able to use our User Guide to the fullest extent!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\u003d\u003d\u003d Commands Format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "The examples in this guide are formatted using the following convention:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME, NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Sample Task 1 t/SAMPLE` or as `n/Sample Task 1`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times e.g. `[t/TAG]…` can be used as (i.e. 0 times), `t/CS2101`, `t/SEM1` `t/SCHOOL` etc."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME` `ds/DESCRIPTION`, `ds/DESCRIPTION` `n/NAME` is also acceptable."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* The `add`, `edit` and `delete` commands each have a shorthand equivalent alias, and their usage can be viewed below at their respective sections in the User Guide."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\f"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d Application Overview"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\u003d\u003d\u003d Application Layout"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "image::apporg.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "The application has two layers, the project layer and the task layer, as shown in Figure 1 above. There are some commands which work differently based on the layer they are in. This is covered in detail in Sections 6 and 7. The project layer contains all the projects the user has added while the task layer contains the tasks and subtasks assigned to a particular project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d User Interface Layout"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "image::applayout.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *Panel A: Command Box* - Where your commands will be typed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *Panel B: Results Box* - Displays result for the following commands: history, taskhistory, compare,  listtag; else displays either success / error message for all other commands."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *Panel C: Project Box* - Displays list of project"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *Panel D: Task Box* - Displays list of tasks for a selected project"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *Panel E: Description Box* - Displays long description for a selected task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Panel *A*, *C*, *D* are user-interactable while panels *B*, *E* are non-interactable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Panel A will always be active, allowing you to input your commands at any time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Upon first opening of the application, your active panel will start from *C*, and only upon choosing a project will your active panel change to *D*."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".  Download the latest `notenote.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ".  Type the command in the command box or *Panel A* (refer to Figure 2) and press Enter to execute it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *`listproject`* : lists all projects"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* **`select 1`** : selects the project at index 1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* **`add n/Do research on Singapore history dl/1-1-2020`** : adds a task of title “Do research on Singapore History” with a deadline set at “1st January 2020” to the project previously selected."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* *`delete 1`* : deletes the task being shown at index 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d Project Level Features"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Navigating Between Projects"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "When selecting a (different) project to the view tasks of the project, always follow the 2 steps below:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ". `listproject`: List all project in project list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ". `select INDEX`: Select a project to view all the tasks within selected project"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Project Level Commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Commands affecting the project list / currently displayed project as a whole. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Affects Panel C."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a project: `add`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Adds a new project to the System."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `add n/NAME`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `a`, i.e. `add` is equivalent to `a`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "A project can have any number of tags (including 0)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `add n/History Research Paper`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Project Box (Panel C) will show the newly created project."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a project: `edit`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Edits an existing project identified by the index number used in the displayed project list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `edit INDEX n/NAME`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `e`, i.e. `edit` is equivalent to `e`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `edit 1 n/Sample Task 1`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Project Box (Panel C) will show the updated project with the new name."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d List projects: `listproject`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Lists all projects, is also used to switch back to project list from task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `listproject`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `lp`, i.e. `listproject` is equivalent to `lp`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Project Box (Panel C) will will display all projects within project list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Select a project: `select`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Selects a project identified by the index number used in the displayed project list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `select INDEX`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `s`, i.e. `select` is equivalent to `s`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "If the **immediate predecessor command** is `listproject`, `select` will select a project and display tasks, else `select` will select a task and display task information"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `select 1`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Task Box (Panel D) will display all tasks within selected project. Active panel is now Panel D and all commands that is executed after this would be in the context of tasks."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d List all tags: `listtag`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "List all unique tags and associated tasks within a project"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `listtag`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `lt`, i.e. `listtag` is equivalent to `lt`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Result Box (Panel B) will will display all unique tags and associated tasks within a project."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Defining a group tag: `definetag`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Define a group tag when you want to add multiple identical tags to multiple tasks easily."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "After defining a group tag, use the addtag command to add a group tag to a task of your choice."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `definetag gt/GROUPTAG t/TAG [t/MORETAGS]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `dt`, i.e. `definetag` is equivalent to `dt`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `definetag gt/SAMPLE t/TAG1 t/TAG2`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: A group tag called SAMPLE will be created which would contain tags TAG1 and TAG2."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a group tag: `addtag`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Add a previously defined group tag to a task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `addtag INDEX gt/GROUPTAG`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `at`, i.e. `addtag` is equivalent to `at`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `addtag 1 gt/SAMPLE`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Task Box (Panel D) will show the updated task with newly added tags."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Tags defined under the group tag will be visible under the task instead of the group tag itself."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Import a project list: `import`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Use this function when importing a project list shared by a friend to import additional projects and tasks on top of your current project list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Source file must be a JSON file and follow  specific format. See \u003c\u003csamplejson\u003e\u003e."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "This feature is recommended to be used together with `export` so that users need not manually generate a JSON file to `import`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `import PATH`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `i`, i.e. `import` is equivalent to `i`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `import C:\\Users\\Test\\Desktop\\import.json`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "The full path to the JSON file has to be specified unless the file is contained within the application folder. If JSON file is contained in application folder, `import .\\test.json` is sufficient."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Projects and tasks contained in JSON file will be imported and added on top of current project list. Command box will display number of projects added to project list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d\u003d Export projects to JSON file: `export`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "You could export projects from your NoteNote instance to easily share project tasks with your friends. Projects are exported in JSON format and could be imported by another NoteNote instance using `import`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* Format: `export i/INDEX o/OUTPUTPATH`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* Alias: `ex`, i.e. `export` is equivalent to `ex`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* To export multiple projects: `export i/1,2,3 o/C:\\Users\\Test\\Desktop\\export.json`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* To export currently selected project: `export o/C:\\Users\\Test\\Desktop\\export.json`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Output path should be explicitly specified unless the output is to be within the application folder. If output is to be contained in application folder, the `export i/1,2,3 o/.\\test.json` is sufficient."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Outcome: JSON file will be created at output path specified."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Analyse progress of all projects: `analyse`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "View number of completed and uncompleted tasks of each project."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `analyse`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `an`, i.e. `analyse` is equivalent to `an`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Task Box (Panel D) will display all tasks within selected project. Active panel is now Panel D and all commands that is executed after this would be in the context of tasks."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d\u003d List previously entered commands: `history`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Lists all the commands that were previously entered in reverse chronological order."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* Format: `history`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Alias: `h`, , i.e. `history` is equivalent to `h`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Outcome: Results Box (Panel B) will display all commands that were previously entered."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d Task Level Features"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d Viewing Tasks of a Project"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "To view tasks of a project, always follow the two steps below: +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "1. `listproject`: List all projects in project list. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "2. `select INDEX`: Select a project to view all the tasks within selected project."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d Task Level Commands"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Commands affecting the tasks / selected task individually. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Affects panel D."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a task: `add`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Adds a task to the project identified by the index number used in the displayed project list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `add n/NAME [ds/DESCRIPTION] [dl/DEADLINE] [t/TAG]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Alias: `a`, i.e. `add` is equivalent to `a`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "A task can have any number of tags (including 0)."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `add n/Decide on Research Paper Topic dl/1-1-2020`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Outcome: Task Box (Panel D) will show the newly created task `Decide on Research Paper Topic` with deadline `1 January 2020`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a task: `edit`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Edits an existing task identified by the index number used in the displayed task list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `edit INDEX [n/NAME] [ds/DESCRIPTION] [dl/DEADLINE] [t/TAG]...`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Alias: `e`, i.e. `edit` is equivalent to `e`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "At least 1 among the parameters of `[n/NAME] [ds/DESCRIPTION] [dl/DEADLINE] [t/TAG]` must be included within the command."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* `edit 1 n/Decide on Research Paper Topic dl/2-2-2020`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Outcome: Task Box (Panel D) will show the updated task at index 1, with the information name and deadline changed to `Decide on Research Paper Topic` and `2 February 2020` respectively."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Locating tasks by name: `find`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Finds a project, task or subtask whose name contains any of the given keywords."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Alias: `f`, i.e. `find` is equivalent to `f`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The search is case insensitive. e.g `report` will match `Report`. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "The order of the keywords does not matter. e.g. `final report` will match `report final`. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "`find` will only search among names of tasks. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Only full words will be matched e.g. `Rep` will not match `Report`. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `Report Final` will return `Draft Report`, `Final Submission`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* `find Research`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Outcome: Returns tasks containing the keyword `Research`. Task Box (Panel D) will be updated to display only tasks that matches the keyword."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all tasks: `list`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "Lists all tasks in the current project. Can also be used to show all tasks after finding a specific tasks"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* Format: `list`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "* Alias: `l`, i.e. `list` is equivalent to `l`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a task: `delete`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Deletes the specified task identified by the index number used in the displayed task list."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Format: `delete INDEX`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Alias: `d`, i.e. `delete` is equivalent to `d`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "The index refers to the index number shown in the displayed task list. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, …"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "1. `find Consult` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "2. `delete 1`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Outcome: Task Box (Panel D) will no longer display the first task in the results of the `find` command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d\u003d\u003d Completing a task: `completed`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Marks the specified task identified by the index number used in the displayed task list as completed by adding a `completed` tag to it."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Format: `completed INDEX`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* Alias: `cpt`, i.e. `completed` is equivalent to `cpt`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "Completed tasks will be used as statistics for the `analyse` feature, unlike deleted tasks."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* `completed 1`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Task Box (Panel D) will show a `completed` tag for the first task."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a task: `select`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Selects the task identified by the index number used in the displayed task list and"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "loads the relevant information."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Format: `select INDEX`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Alias: `s`, i.e. `select` is equivalent to `s`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* This command will be active as long as the immediate predecessor"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "command is NOT listproject else the select functionality will be"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "targeted at a Project"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "1. `find Research`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "2. `select 1`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Selects the first task in the results of the `find` command. Description Box (Panel E) will display all the details of the task selected."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting tasks: `listDeadline`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Sorts tasks by deadline."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* Format: `listDeadline`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Outcome: Task Box (Panel D) will be updated to display tasks sorted by their deadline"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         in ascending order."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Undo previous command : `undo`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Restores the task list to the state before the previous undoable command was"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "executed."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Format: `undo`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Alias: `u` i.e. `undo` is equivalent to `u`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*  `add n/sample task` ..."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Task Box (Panel D) will display new task added to task list."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* `undo`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Add command is undone and Task Box (Panel D) will no longer display"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "new task ."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Redo previously undone command : `redo`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Reverses the most recent `undo` command."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Format: `redo`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Alias: `r` i.e. `redo` is equivalent to `r`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*  `add n/sample task` ..."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Task Box (Panel D) will display new task added to task list."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* `undo`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Add command is undone and Task Box (Panel D) will no longer display"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "new task ."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* `redo`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Reverses the `undo` action and adds the task back to the task list. Task"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "         Box (Panel D) will now display new task once again."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d List previously entered commands for a chosen task: `taskhistory`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Lists all previous commands that directly affected a selected task in reverse"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "chronological order."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Format: `taskhistory INDEX`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Alias: `th` i.e. `taskhistory` is equivalent to `th`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*  `taskhistory 1`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Results Box (Panel B) will display all previous commands which directly"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "affects the task at index 1."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d\u003d\u003d Compares a task with its previous version: `compare`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Compares a selected task one version before it was edited and show the differences"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "in the task."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Format: `compare INDEX`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* Alias: `c` i.e. `compare` is equivalent to `c`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*  `add n/sample task` ..."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Task Box (Panel D) will display new task added to task list at index 1."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "*  `edit 1 n/sample task edited` ..."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Task Box (Panel D) will display updated task at index 1 with the new"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "          name."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "* `compare 1`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "Outcome: Task Box (Panel B) will display information of current version of the task at"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "         index 1 ( _sample task_ ) and the previous version of it ( _sample task edited_ )."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "         Allows you to view a direct comparison of what was changed."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "*A*: Data can be transferred between computers by simply porting over the *_projectlist.json_* file located at the *_data_* folder. Alternatively, you could:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ". `export` project list from the original computer"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ". Install NoteNote in the other computer"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ". `import` project list by specifying path to exported project list"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|*Command*|*Description*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`add`|Add a new project or task"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`addtag`|Add a group tag to a task"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`analyse`|View task completion rate"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`clear`|Clear all tasks in project"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`clear`|Clears all tasks"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`compare`|Compare current task with previous version"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`completed`|Marks task as completed"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`definetag`|Define a group tag"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`delete`|Deletes project or task"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`edit`|Edits description of project or task"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`exit`|Exit application"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`export`|Export projects to external JSON file"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`find`|Find for specific project or task"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`help`|Display help menu"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`history`|View all commands previously entered"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`import`|Import projects from external JSON file"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`list`|List all projects or tasks"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "|`listDeadline`| List tasks according to deadline"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`listproject`|Go back to project list panel from task list panel"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`listtags`|List all unique tags and associated tasks within a project"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`redo`|Redo modifications made to task"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`select`|Select project or task to interact with"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`taskhistory`|View all modifications made to file"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|`undo`|Undo modifications made to task"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003d\u003d Appendix A"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "[[samplejson]]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d\u003d Sample JSON file for `import`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "```"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "{"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "  \"projects\" : [ {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \"name\" : \"Sample project 1\","
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \"tasks\" : [ {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"name\" : \"Sample task 1\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"description\" : \"This is a sample task\","
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"deadline\" : \"1-1-2011\","
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"tagged\" : [ \"SAMPLE\" ]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"name\" : \"Sample task 2\","
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"description\" : \"This is a sample task\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"deadline\" : \"1-1-2011\","
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"tagged\" : [ \"SAMPLE\" ]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \"name\" : \"Sample project 2\","
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \"tasks\" : [ {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"name\" : \"Sample task 1\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"description\" : \"This is a sample task\","
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"deadline\" : \"1-1-2011\","
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"tagged\" : [ \"SAMPLE\" ]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"name\" : \"Sample task 2\","
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"description\" : \"This is a sample task\","
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"deadline\" : \"1-1-2011\","
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"tagged\" : [ \"SAMPLE\" ]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 60,
      "gautamrajulu": 37,
      "josephinetanadi": 112,
      "arhjaye": 130,
      "andreathniah": 96,
      "-": 102
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Runs all tests in the `seedu.project.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Runs all non-GUI tests in the `seedu.project`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "andreathniah": 2
    }
  },
  {
    "path": "docs/team/andreathniah.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d Andrea Thniah - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d PROJECT: NoteNote"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "NoteNote is a desktop project application used for managing multiple projects and tasks. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* *Major enhancement*: added *the ability to create group tags and apply them to tasks*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** What it does: allows users to create a group tag and add multiple child tags into it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Justification: multiple tags can be repetitive to type out again and again especially if they are used often. This enhancement aims to reduce typing errors and allows a convenient way for users to easily create a group tag and apply them to different tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "** Highlights: This enhancement is split between `DefineTag` which creates a group tag and `AddTag` that applys existing group tag to a task. They should be used in conjunction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* *Minor enhancement*: added a `listtag` command that allows the user to list down all tags and its associated task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dandreathniah[Functional code]] [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dandreathniah[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "*** Handled all Github related issues that arised within the team (merge conflicts, rebasing etc)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "*** Managed releases `v1.0` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "*** Morphing AB4 to NoteNote"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "*** Updated the GUI tag color scheme (Pull requests https://github.com/CS2113-AY1819S2-T09-3/main/pull/19[#19])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlisttag]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddefinetag]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddtag]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlisttag]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddefinetag]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddtag]"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 22,
      "-": 38
    }
  },
  {
    "path": "docs/team/arhjaye.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d PROJECT: Project - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Project - Level 4 is a desktop project application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "andreathniah": 2
    }
  },
  {
    "path": "docs/team/gautamrajulu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003d\u003d PROJECT: Project - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "Project - Level 4 is a desktop project application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "andreathniah": 2
    }
  },
  {
    "path": "docs/team/josephinetanadi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d Josephine Tanadi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003d\u003d PROJECT: NoteNote"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "NoteNote is a desktop project application used for managing multiple projects and tasks. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* *Major enhancement*: added *the ability to import and export projects*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** What it does: imports new projects from a JSON file and exports selected existing projects to a JSON file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Justification: This feature allows users to share projects with another user without the other user having to add projects and tasks manually."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Highlights: The implementation was challenging as it requires us to change the current Storage Model to contain both projects and tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "* *Major enhancement*: *modified UI, Logic, Model and Storage components to suit NoteNote*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** What it does: loads project list upon start up and allows navigation between projects and tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Justification: This feature provides the background logic for users to interact with multiple projects and multiple tasks within each individual projects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Highlights: The implementation was challenging as it requires us to modify all existing components to suit our application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Updated the GUI to include a Project List Panel and Task List Panel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Updated the storage to store tasks within project and project within project list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "** Minor modification to Add, Edit, Select, Delete and Clear command to support new project list model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003djosephinetanadi[Functional code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "*** Modified system tests for existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the Developer Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimportexport]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 20,
      "-": 38,
      "andreathniah": 1
    }
  },
  {
    "path": "docs/team/rachellim10.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d Rachel Lim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "\u003d\u003d PROJECT: NoteNote"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "NoteNote is a desktop project application used for managing multiple projects and tasks. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* *Major enhancement*: added *the ability to mark tasks as completed*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** What it does: allows the user to mark specific tasks as completed by displaying a `completed` tag for each of those tasks. This can be reversed by using the undo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Justification: This feature improves the product significantly because a user can conveniently check off tasks that are completed, which ties in with the task-management purpose of this project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Highlights: This enhancement required a different implementation from `edit` as it was more specialised and only affected the tags of a task. Any tasks marked as completed would also have to be retained in Storage, to complement the `analyse` feature."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* *Major enhancement*: added *the ability to analyse all completed tasks*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** What it does: allows the user to see which tasks in a specific project have been completed already, so as to track the user\u0027s progress on that project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Justification: This feature improves the product significantly because a user can conveniently check off tasks that are completed, which ties in with the task-management purpose of this project."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "** Highlights: This enhancement required additional implementations as the current `find` command could only search through names of tasks, but `analyse` needed to search through tags instead and present the results as a countable statistic."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* *Minor enhancement*: added command aliases that allow the user to cut down the amount of typing to execute any command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003drachellim10[Functional code]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "*** Added shorthand command aliases for existing commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the Developer Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "include::../UserGuide.adoc[tag\u003danalyse]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcompleted]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rachellim10": 19,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/project/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/project/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.JsonProjectListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.ProjectListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Project ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectListStorage projectListStorage \u003d new JsonProjectListStorage(userPrefs.getProjectListFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        storage \u003d new StorageManager(projectListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The data from the sample project will be used instead if"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code storage}\u0027s project is not found, or an empty project will be"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * used instead if errors occur when reading {@code storage}\u0027s project."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Optional\u003cReadOnlyProjectList\u003e projectListOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ReadOnlyProjectList initialProjectList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ReadOnlyProject initialProject;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            projectListOptional \u003d storage.readProjectList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (!projectListOptional.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ProjectList\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            initialProjectList \u003d projectListOptional.orElseGet(SampleDataUtil::getSampleProjectList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            initialProject \u003d new Project();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ProjectList\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            initialProjectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            initialProject \u003d new Project();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProjectList\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            initialProjectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            initialProject \u003d new Project();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new ModelManager(initialProjectList, initialProject, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * file path, or a new {@code UserPrefs} with default configuration if errors"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * occur when reading from the file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Project\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        logger.info(\"Starting Project \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 23,
      "andreathniah": 35,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final String LOG_FILE \u003d \"project.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_PROJECT_LISTED_OVERVIEW \u003d \"%1$d projects listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String MESSAGE_RETURN_TO_PROJECT_LEVEL \u003d \"Return to project level using listproject \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            + \"before executing %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String MESSAGE_GO_TO_TASK_LEVEL \u003d \"Select project before executing %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 3,
      "josephinetanadi": 3,
      "andreathniah": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/project/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistoryTaskId \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistoryTaskId \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistoryTaskId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void addHistoryTaskId(String userInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int historySize \u003d userInputHistory.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int historyTaskIdSize \u003d userInputHistoryTaskId.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        while (historyTaskIdSize \u003c historySize) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            userInputHistoryTaskId.add(\"0\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            historyTaskIdSize \u003d userInputHistoryTaskId.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        userInputHistoryTaskId.add(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Clears userInputHistory \u0026 userInputHistoryTaskId"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Used during switching of projects"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void clearHistory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        logger.info(\"INFO: History cleared\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        userInputHistoryTaskId.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        userInputHistory.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        unmodifiableUserInputHistory.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        unmodifiableUserInputHistoryTaskId.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistoryTaskId}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public ObservableList\u003cString\u003e getHistoryTaskId() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return unmodifiableUserInputHistoryTaskId;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 46,
      "andreathniah": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the ProjectList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see seedu.project.model.Model#getProjectList()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    ReadOnlyProjectList getProjectList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of project */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the Project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see seedu.project.model.Model#getProject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ReadOnlyProject getProject();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Selected project in the filtered project list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * null if no project is selected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see seedu.project.model.Model#selectedProjectProperty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    ReadOnlyProperty\u003cProject\u003e selectedProjectProperty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the selected project in the filtered project list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see seedu.project.model.Model#setSelectedProject(Project)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void setSelectedProject(Project project);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see seedu.project.model.Model#selectedTaskProperty()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see seedu.project.model.Model#setSelectedTask(Task)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 34,
      "andreathniah": 18,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.ProjectParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static boolean state; // 0 \u003d\u003d projectlistview 1 \u003d\u003d projectview"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ProjectParser projectParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private boolean projectModified;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private boolean projectListModified;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        projectParser \u003d new ProjectParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        state \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // Set projectListModified to true whenever the models\u0027 project list is modified."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model.getProjectList().addListener(observable -\u003e projectListModified \u003d true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Set projectModified to true whenever the models\u0027 project is modified."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.getProject().addListener(observable -\u003e projectModified \u003d true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        projectModified \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListModified \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Command command \u003d projectParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (projectListModified) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            logger.info(\"Project list modified, saving to file.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                if (model.getSelectedProject() !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        \u0026\u0026 !(commandText.equals(ListProjectCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        || commandText.equals(ListProjectCommand.COMMAND_ALIAS))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        \u0026\u0026 !(commandText.contains(DeleteCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        || commandText.contains(DeleteCommand.COMMAND_ALIAS))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    Project editedProject \u003d new Project(model.getProject().getName(), model.getProject().getTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    model.setProject(model.getSelectedProject(), editedProject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                storage.saveProjectList(model.getProjectList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (projectModified) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            logger.info(\"Project modified, saving to file.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                if (model.getSelectedProject() !\u003d null \u0026\u0026 !(commandText.equals(ListProjectCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        || commandText.equals(ListProjectCommand.COMMAND_ALIAS))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    Project editedProject \u003d new Project(model.getProject().getName(), model.getProject().getTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    model.setProject(model.getSelectedProject(), editedProject);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                storage.saveProjectList(model.getProjectList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static boolean getState() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void setState(boolean s) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        state \u003d s;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return model.getProjectList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ReadOnlyProject getProject() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return model.getProject();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return model.getProjectListFilePath();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return model.selectedProjectProperty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model.setSelectedProject(project);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return model.selectedTaskProperty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.setSelectedTask(task);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 68,
      "arhjaye": 1,
      "andreathniah": 28,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Adds a task to the project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String PROJECT_MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a project to the project list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Parameters: \" + PREFIX_NAME + \"NAME \" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"CS2113T Project \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String TASK_MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the project. \" + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + PREFIX_NAME + \"NAME \" + PREFIX_DESCRIPTION + \"DESCRIPTION \" + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Sample Task 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + PREFIX_DESCRIPTION + \"This is a sample description \" + PREFIX_DEADLINE + \"1-1-2011 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + PREFIX_TAG + \"SAMPLE \" + PREFIX_TAG + \"submission\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PROJECT \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TASK \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project list\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the project\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Object toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Project}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public AddCommand(Object object) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        toAdd \u003d object;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (toAdd instanceof Project) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (model.hasProject((Project) toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.addProject((Project) toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.commitProjectList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_PROJECT, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (model.hasTask((Task) toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.addTask((Task) toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            int taskId \u003d ((Task) toAdd).getTaskId();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            history.addHistoryTaskId(Integer.toString(taskId));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.commitProject();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_TASK, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        \u0026\u0026 (toAdd.equals(((AddCommand) other).toAdd)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 35,
      "arhjaye": 4,
      "andreathniah": 41
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/AddTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_GROUPTAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Marks an existing task as completed and removes it from UI display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"at\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the task. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + PREFIX_GROUPTAG + \"GROUPTAG\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_GROUPTAG + \"sample\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_COMPLETED_SUCCESS \u003d \" Task completed.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final String groupTag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @param index of the task in the filtered task list to be completed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public AddTagCommand(Index index, String groupTag) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.groupTag \u003d groupTag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int taskId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Task targetTask \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Task taskToComplete \u003d new Task(targetTask.getName(), targetTask.getDescription(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                targetTask.getDeadline(), targetTask.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        taskId \u003d targetTask.getTaskId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        targetTask.updateTaskId(taskId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (GroupTag groupTag : model.getProjectList().getGroupTagList()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (groupTag.getName().toString().equals(this.groupTag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                for (Tag t : groupTag.getTags()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    taskToComplete.addTag(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setTask(targetTask, taskToComplete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //history.addHistoryTaskId(Integer.toString(taskId));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.commitProject();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //this will not work if user clicks on a different project while on task level??? lock UI at prev panel"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getSelectedProject(), (Project) model.getProject()); //sync project list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.commitProjectList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETED_SUCCESS, taskToComplete));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!(other instanceof AddTagCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        builder.append(\"index: \").append(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 20,
      "andreathniah": 84
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/AnalyseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": " * Finds and lists all completed tasks in project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachellim10"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "public class AnalyseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"analyse\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"an\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            + \": Finds all completed tasks of a project and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        ObservableList\u003cProject\u003e filteredProjects \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            for (Project project: filteredProjects) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                int countCompleted \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                toPrint +\u003d project.getName().toString() + \": \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                ObservableList\u003cTask\u003e filteredTasks \u003d project.getTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                for (Task task : filteredTasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    if (task.getTags().contains(new Tag(\"completed\"))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                        countCompleted +\u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                toPrint +\u003d countCompleted + \" tasks completed.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new CommandResult(toPrint);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_RETURN_TO_PROJECT_LEVEL, COMMAND_WORD));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 50
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Clears the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"cl\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Project has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (LogicManager.getState()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            /*Project clearedProject \u003d new Project();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            clearedProject.setName(model.getProject().getName().toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            clearedProject.setTasks(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.setProject(model.getSelectedProject(), clearedProject);*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.clearTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.commitProject();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.commitProjectList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_GO_TO_TASK_LEVEL, COMMAND_WORD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "josephinetanadi": 12,
      "andreathniah": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "andreathniah": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/CompareCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " * Compares a task identified using it\u0027s displayed index from the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "public class CompareCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"compare\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \": Compares the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_COMPARE_TASK_SUCCESS \u003d \"Displaying differences:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \"Compared Task: %1$s \\nCompared To: %2$s\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_COMPARE_TASK_FAILURE \u003d \"There is no previous version of this task\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public CompareCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Task tempTask;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Task taskToCompare \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //tempTask \u003d model.compareTask(taskToCompare);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        List\u003cString\u003e tempString \u003d model.compareTask(taskToCompare);;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.commitProject();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (tempString !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPARE_TASK_SUCCESS, tempString.get(0), tempString.get(1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CommandResult(MESSAGE_COMPARE_TASK_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                || (other instanceof CompareCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CompareCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "arhjaye": 66
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/CompletedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachellim10"
        },
        "content": " * Marks an existing task as completed and removes it from UI display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachellim10"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "public class CompletedCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"completed\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"cpt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Completes a task and deletes it from view. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_COMPLETED \u003d \"Task is already completed.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String MESSAGE_COMPLETED_SUCCESS \u003d \" Task completed.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     * @param index of the task in the filtered task list to be completed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public CompletedCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        int taskId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_GO_TO_TASK_LEVEL, COMMAND_WORD));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            Task taskToComplete \u003d new Task(lastShownList.get(index.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    lastShownList.get(index.getZeroBased()).getDescription(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    lastShownList.get(index.getZeroBased()).getDeadline(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    lastShownList.get(index.getZeroBased()).getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            Task targetTask \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            taskId \u003d targetTask.getTaskId();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            taskToComplete.updateTaskId(taskId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            history.addHistoryTaskId(Integer.toString(taskId));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            if (taskToComplete.getTags().contains(new Tag(\"completed\"))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                throw new CommandException(MESSAGE_TASK_ALREADY_COMPLETED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                taskToComplete.addTag(new Tag(\"completed\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                model.setTask(targetTask, taskToComplete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                model.commitProject();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                model.setProject(model.getSelectedProject(), (Project) model.getProject()); // sync project list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                model.commitProjectList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_COMPLETED_SUCCESS, taskToComplete));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        if (!(other instanceof CompletedCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        CompletedCommand e \u003d (CompletedCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        builder.append(\"index: \").append(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 104
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/DefineTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Allow users to define a group tag."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class DefineTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"dt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"definetag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Group tag created: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows users to define tag parent and its child\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUPTAG \u003d \"This group tag already exists in the group tag list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final GroupTag toAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public DefineTagCommand(GroupTag groupTag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(groupTag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        toAdd \u003d groupTag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (model.hasGroupTag(toAdd)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUPTAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.addGroupTag(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.commitProjectList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new CommandResult(String.format(SUCCESS_MESSAGE, toAdd.getName().toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 39
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed project / task list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Project projectToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.commitProjectList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            int taskId \u003d taskToDelete.getTaskId();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            history.addHistoryTaskId(Integer.toString(taskId));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.commitProject();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "josephinetanadi": 20,
      "arhjaye": 4,
      "andreathniah": 12,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Edits the details of an existing task in the project."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String PROJECT_MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the project identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"by the index number used in the displayed project list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_NAME + \"NAME]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_NAME + \"CS2113T Project\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String TASK_MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_NAME + \"NAME] \" + \"[\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION] \" + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \" + \"[\" + PREFIX_TAG"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"TAG]...\\n\" + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DESCRIPTION + \"Report submission \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + PREFIX_DEADLINE + \"1/1/2011\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_EDIT_PROJECT_SUCCESS \u003d \"Edited Project: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the project.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final EditProjectDescriptor editProjectDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param index              of the task in the filtered project list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param editObjectDescriptor details to edit the task with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public EditCommand(Index index, Object editObjectDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(editObjectDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (editObjectDescriptor instanceof EditProjectDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.editTaskDescriptor \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.editProjectDescriptor \u003d new EditProjectDescriptor((EditProjectDescriptor) editObjectDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.editProjectDescriptor \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.editTaskDescriptor \u003d new EditTaskDescriptor((EditTaskDescriptor) editObjectDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (editProjectDescriptor !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Project projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Project editedProject \u003d createEditedProject(projectToEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (!projectToEdit.isSameProject(editedProject) \u0026\u0026 model.hasProject(editedProject)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.commitProjectList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editedProject));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            int taskId;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            taskId \u003d taskToEdit.getTaskId();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            history.addHistoryTaskId(Integer.toString(taskId));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.commitProject();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            //this will not work if user clicks on a different project while on task level??? lock UI at prev panel"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.setProject(model.getSelectedProject(), (Project) model.getProject()); //sync project list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.commitProjectList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     * Creates and returns a {@code Project} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static Project createEditedProject(Project projectToEdit, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assert projectToEdit !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Name updatedName \u003d editProjectDescriptor.getName().orElse(projectToEdit.getName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cTask\u003e updatedTasks \u003d editProjectDescriptor.getTasks().orElse(projectToEdit.getTaskList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Project newProject \u003d new Project(updatedName, updatedTasks);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return newProject;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int taskId \u003d taskToEdit.getTaskId();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task newTask \u003d new Task(updatedName, updatedDescription, updatedDeadline, updatedTags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        newTask.updateTaskId(taskId);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Stores the details to edit the project with. Each non-empty field value will"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * replace the corresponding field value of the task."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static class EditProjectDescriptor {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public EditProjectDescriptor() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public EditProjectDescriptor(EditProjectDescriptor toCopy) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * Sets {@code tasks} to this object\u0027s {@code tasks}. A defensive copy of"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * {@code tasks} is used internally."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setTasks(Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.tasks \u003d (tasks !\u003d null) ? new ArrayList\u003c\u003e(tasks) : null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * Returns an unmodifiable task set, which throws"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * {@code Optional#empty()} if {@code tasks} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public Optional\u003cList\u003cTask\u003e\u003e getTasks() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return (tasks !\u003d null) ? Optional.of(Collections.unmodifiableList(tasks)) : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            EditProjectDescriptor e \u003d (EditProjectDescriptor) other;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getTasks().equals(e.getTasks());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * replace the corresponding field value of the task."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, deadline, tags);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * {@code tags} is used internally."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Returns an unmodifiable tag set, which throws"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline()) \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "josephinetanadi": 161,
      "arhjaye": 9,
      "andreathniah": 167
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_GO_TO_TASK_LEVEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.ImportCommand.MESSAGE_DUPLICATE_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_OUTPUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.JsonSerializableProjectList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Exports projects to a specified destination"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export projects specified by index to JSON file. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Parameters: INDEX \" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_INDEX + \"1,3,4 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + PREFIX_OUTPUT + \"./data/output.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PROJECT \u003d \"Project exported: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Set\u003cIndex\u003e projectIdx;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ProjectList projectsToExport \u003d new ProjectList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Path toWrite;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Creates an ExportCommand to export projects indexes in {@code projectIdx}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * to JSON file at location {@code toWrite}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ExportCommand(Set\u003cIndex\u003e projectIdx, Path toWrite) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(projectIdx);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(toWrite);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.projectIdx \u003d projectIdx;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.toWrite \u003d toWrite;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Creates an ExportCommand to export currently selected project"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * to JSON file at location {@code toWrite}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ExportCommand(Path toWrite) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(toWrite);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.projectIdx \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.toWrite \u003d toWrite;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (projectIdx \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (LogicManager.getState()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectsToExport.addProject(model.getSelectedProject());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                saveProjectList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_PROJECT, 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_GO_TO_TASK_LEVEL, COMMAND_WORD));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            for (Index index : projectIdx) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Project project \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                if (projectsToExport.hasProject(project)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectsToExport.addProject(project);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            saveProjectList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_PROJECT, projectIdx.size()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Saves project list to JSON file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void saveProjectList() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        FileUtil.createIfMissing(toWrite);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectList(projectsToExport), toWrite);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 104
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Finds and lists all tasks in project whose name contains any of the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * argument keywords. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\" + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (LogicManager.getState()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_GO_TO_TASK_LEVEL, COMMAND_WORD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "josephinetanadi": 6,
      "andreathniah": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "andreathniah": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.JsonSerializableProjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Import project list to add on to current list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Import a JSON file containing to the project list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \"Parameters: PATH \" + \"Example: \" + COMMAND_WORD + \" \" + \"C:\\\\Users\\\\Documents\\\\project.json\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PROJECT \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Path toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code ProjectList}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ImportCommand(Path file) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        toAdd \u003d file;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Optional\u003cReadOnlyProjectList\u003e projectListToAdd \u003d readProjectList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        for (Project project : projectListToAdd.get().getProjectList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (model.hasProject(project)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.addProject(project);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model.commitProjectList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_PROJECT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectListToAdd.get().getProjectList().size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Read JSON project list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Optional\u003cJsonSerializableProjectList\u003e jsonProjectList \u003d JsonUtil.readJsonFile(toAdd,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                JsonSerializableProjectList.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!jsonProjectList.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.of(jsonProjectList.get().toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 74
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ListByDeadlineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": " * Lists all tasks sorted ascending according to deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "public class ListByDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listDeadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            + \": Shows a list of all available tasks sorted by the deadline\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TASK \u003d \"List sorted: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int size;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String toPrint \u003d \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        //A list of all tasks in the project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        size \u003d filteredTasks.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        ArrayList\u003cTask\u003e toSortList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            toSortList.add(filteredTasks.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        //Sorts list of all tasks according to toCompare specified in task class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Collections.sort(toSortList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        for (Task tempFilteredTask : toSortList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            toPrint \u003d toPrint + tempFilteredTask.getName() + \"\\n\" + tempFilteredTask.getDescription()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                    + \"\\n\" + tempFilteredTask.getDeadline() + \"\\n\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_TASK, toPrint));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gautamrajulu": 29,
      "arhjaye": 22
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Lists all tasks in the project to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PROJECT \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TASK \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_PROJECT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_TASK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "gautamrajulu": 11,
      "andreathniah": 21
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ListProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": " * Lists all tasks in the project to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "public class ListProjectCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listproject\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lp\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PROJECT \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (LogicManager.getState()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            LogicManager.setState(false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            //sync versionedProject with versionedProjectList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            model.setProject(model.getSelectedProject(), (Project) model.getProject());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            model.setSelectedTask(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS_PROJECT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gautamrajulu": 30,
      "josephinetanadi": 2
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/ListTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Lists all unique tags and their tasks to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listtag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            + \": Shows a list of all available tags prefix and its related tasks. \" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        System.out.println(filteredTasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // get set of unique tags"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTag\u003e allTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        filteredTasks.forEach(entry -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            entry.getTags().forEach(tag -\u003e allTags.add(tag));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Set\u003cTag\u003e uniqueTagSet \u003d new HashSet\u003c\u003e(allTags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // convert uniqueTag set to list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTag\u003e uniqueTagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTagList.addAll(uniqueTagSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // arrange print string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cString\u003e stringToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTagList.forEach(entry -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            stringToPrint.add(entry.toStringWithoutBrackets());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            filteredTasks.forEach(task -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                if (task.getTags().contains(entry)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    stringToPrint.add(task.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                System.out.println(stringToPrint);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new CommandResult(stringToPrint.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 56
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Reverts the {@code model}\u0027s project to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!model.canRedoProject()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.redoProject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "andreathniah": 9,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Selects a task identified using it\u0027s displayed index from the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            + \": Selects the project / task identified by the index number used in the displayed project / task list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_SELECT_PROJECT_SUCCESS \u003d \"Selected Project: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_SELECT_TASK_SUCCESS \u003d \"Selected Task: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            List\u003cProject\u003e filteredProjectList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredProjectList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.setProject(filteredProjectList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            model.setSelectedProject(filteredProjectList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            LogicManager.setState(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            //model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            //model.setSelectedTask(model.getFilteredTaskList().get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            history.clearHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_PROJECT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            model.setSelectedTask(filteredTaskList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_TASK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "josephinetanadi": 21,
      "arhjaye": 2,
      "andreathniah": 11,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/TaskHistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " * Lists all the commands entered by user for a chosen task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "public class TaskHistoryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskhistory\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"th\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \": Compares the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands for task %1$s (from most recent to earliest):\\n%2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands for this task.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //public static final String MESSAGE_COMPARE_TASK_SUCCESS \u003d \"Compared Task: %1$s \\nCompared To: %2$s\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public TaskHistoryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        ArrayList\u003cString\u003e previousCommandsTaskId \u003d new ArrayList\u003c\u003e(history.getHistoryTaskId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //        throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Task chosenTask \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String taskId \u003d Integer.toString(chosenTask.getTaskId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int commandTaskIdSize \u003d previousCommandsTaskId.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        for (int i \u003d 0; i \u003c commandTaskIdSize; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            if (previousCommandsTaskId.get(i).equals(taskId)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                commandList.add(previousCommands.get(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (commandList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_HISTORY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Collections.reverse(commandList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                String.join(\"\\n\", commandList)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 76
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Reverts the {@code model}\u0027s project to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!model.canUndoProject()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.undoProject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 1,
      "andreathniah": 9,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        AddCommand.PROJECT_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Project project \u003d new Project(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new AddCommand(project);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Task task \u003d new Task(name, description, deadline, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new AddCommand(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 29,
      "andreathniah": 7,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/AddTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_GROUPTAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * AddTagCommand and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GROUPTAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUPTAG) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new AddTagCommand(index, argMultimap.getValue(PREFIX_GROUPTAG).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 50
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"ds/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"dl/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final Prefix PREFIX_GROUPTAG \u003d new Prefix(\"gt/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Prefix PREFIX_OUTPUT \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "andreathniah": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/CompareCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.CompareCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " * Parses input arguments and creates a new CompareCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "public class CompareCommandParser implements Parser\u003cCompareCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompareCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * and returns an CompareCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public CompareCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CompareCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompareCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 29
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/CompletedCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.commands.CompletedCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachellim10"
        },
        "content": " * Parses input arguments and creates a new CompletedCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachellim10"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "public class CompletedCommandParser implements Parser\u003cCompletedCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompletedCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     * and returns an CompletedCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public CompletedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (InputMismatchException ime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    CompletedCommand.MESSAGE_USAGE), ime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                    CompletedCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        return new CompletedCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 39,
      "arhjaye": 2
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/DefineTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_GROUPTAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DefineTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Parses input arguments and creates a new DefineTagCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class DefineTagCommandParser implements Parser\u003cDefineTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * DefineTagCommand and returns an DefineTagCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public DefineTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GROUPTAG, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUPTAG, PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DefineTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_GROUPTAG).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        GroupTag groupTag \u003d new GroupTag(name, tagList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new DefineTagCommand(groupTag);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 49
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        EditCommand.PROJECT_MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            EditProjectDescriptor editProjectDescriptor \u003d new EditProjectDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                editProjectDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (!editProjectDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new EditCommand(index, editProjectDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        EditCommand.TASK_MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                editTaskDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                editTaskDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        .get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                editTaskDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 36,
      "andreathniah": 14,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_OUTPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_OUTPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_OUTPUT)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Path dst \u003d Paths.get(argMultimap.getValue(PREFIX_OUTPUT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            String trimmedArgs \u003d argMultimap.getValue(PREFIX_INDEX).get().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            String[] arg \u003d trimmedArgs.split(\",\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Set\u003cIndex\u003e projectIdx \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            for (String idx : arg) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectIdx.add(ParserUtil.parseIndex(idx));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ExportCommand(projectIdx, dst);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_OUTPUT)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Path dst \u003d Paths.get(argMultimap.getValue(PREFIX_OUTPUT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ExportCommand(dst);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 62
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new ImportCommand(Paths.get(trimmedArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 30
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Parses a {@code String deadline} into an {@code Deadline}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 20,
      "andreathniah": 4,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/ProjectParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "import seedu.project.logic.commands.AnalyseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.CompareCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.CompletedCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.DefineTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ListByDeadlineCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.ListTagCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.TaskHistoryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ProjectParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        case CompareCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CompareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        case CompareCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new CompareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case CompletedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new CompletedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case CompletedCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new CompletedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case AnalyseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new AnalyseCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case AnalyseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new AnalyseCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        case DefineTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new DefineTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        case DefineTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new DefineTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        case AddTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        case TaskHistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new TaskHistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        case TaskHistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new TaskHistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new ListTagCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        case ListProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ListProjectCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        case ListProjectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ListProjectCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        case ImportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        case ExportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        case ListByDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new ListByDeadlineCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 43,
      "josephinetanadi": 18,
      "arhjaye": 38,
      "andreathniah": 20,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/TaskHistoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.CompareCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.commands.TaskHistoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " * Parses input arguments and creates a new TaskHistoryCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "public class TaskHistoryCommandParser implements Parser\u003cTaskHistoryCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TaskHistoryCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * and returns an TaskHistoryCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public TaskHistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return new TaskHistoryCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompareCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 30
    }
  },
  {
    "path": "src/main/java/seedu/project/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/project/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /** {@code Predicate} that always evaluate to false */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the user prefs\u0027 project file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Sets the user prefs\u0027 project file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    void setProjectListFilePath(Path projectListFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Replaces project list data with the data in {@code projectList}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    void setProjectList(ReadOnlyProjectList projectList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /** Returns the ProjectList */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    ReadOnlyProjectList getProjectList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    boolean hasProject(Project project);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if a GroupTag with the same identity as {@code GroupTag} exists in the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    boolean hasGroupTag(GroupTag groupTag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Deletes the given task. The task must exist in the project."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    void deleteProject(Project project);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Adds the given project. {@code project} must not already exist in the project list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds the given project. {@code project} must not already exist in the project list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void addGroupTag(GroupTag groupTag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces project data with the data in {@code project}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void setProject(ReadOnlyProject object);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Replaces the given project {@code target} with {@code editedProject}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code target} must exist in the project list. The project identity of"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code editedProject} must not be the same as another existing project in the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * project list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /** Returns the Project */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ReadOnlyProject getProject();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Deletes the given task. The task must exist in the project."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Compares the given task with the last edited version. The task must exist in the project."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns a list of string containing 2 string, which contains the differences in Name / Description / Deadline"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns null if there is no difference."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    List\u003cString\u003e compareTask(Task target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds the given task. {@code task} must not already exist in the project."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code target} must exist in the project. The task identity of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code editedTask} must not be the same as another existing task in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void clearTasks();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered project list */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Updates the filter of the filtered project list to filter by the given"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if the model has previous project states to restore."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    boolean canUndoProject();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if the model has undone project states to restore."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    boolean canRedoProject();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Restores the model\u0027s project to its previous state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void undoProject();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Restores the model\u0027s project to its previously undone state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void redoProject();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Saves the current project list state for undo/redo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void commitProjectList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Saves the current project state for undo/redo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void commitProject();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Selected project in the filtered project list. null if no project is selected."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    ReadOnlyProperty\u003cProject\u003e selectedProjectProperty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the selected project in the filtered project list. null if no project is"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * selected."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Project getSelectedProject();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the selected project in the filtered project list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void setSelectedProject(Project project);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Selected task in the filtered task list. null if no task is selected."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the selected task in the filtered task list. null if no task is"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * selected."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    Task getSelectedTask();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     * Removes the given tag from all persons."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gautamrajulu": 6,
      "josephinetanadi": 41,
      "arhjaye": 45,
      "andreathniah": 140
    }
  },
  {
    "path": "src/main/java/seedu/project/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.VersionedProject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Represents the in-memory model of the project data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final VersionedProjectList versionedProjectList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final SimpleObjectProperty\u003cProject\u003e selectedProject \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private VersionedProject versionedProject;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Initializes a ModelManager with the given project and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public ModelManager(ReadOnlyProjectList projectList, ReadOnlyProject project, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireAllNonNull(projectList, project, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        logger.fine(\"Initializing with project list: \" + projectList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        versionedProjectList \u003d new VersionedProjectList(projectList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject \u003d new VersionedProject(project);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(versionedProjectList.getProjectList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        filteredProjects.addListener(this::ensureSelectedProjectIsValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedProject.getTaskList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        filteredTasks.addListener(this::ensureSelectedTaskIsValid);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        this(new ProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return userPrefs.getProjectListFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireNonNull(projectListFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        userPrefs.setProjectListFilePath(projectListFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void setProjectList(ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        versionedProjectList.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        versionedProjectList.resetData(projectList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        versionedProjectList.populate(projectList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return versionedProjectList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return versionedProjectList.hasProject(project);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean hasGroupTag(GroupTag groupTag) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(groupTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return versionedProjectList.hasGroupTag(groupTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        versionedProjectList.removeProject(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        versionedProjectList.addProject(project);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void addGroupTag(GroupTag groupTag) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProjectList.addGroupTag(groupTag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        versionedProjectList.setProject(target, editedProject);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Project"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setProject(ReadOnlyProject project) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (versionedProjectList.getProjectList().get(getFilteredProjectList().indexOf(project)) instanceof Project) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            versionedProject \u003d new VersionedProject(project);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            versionedProject.resetName(project);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.resetData(project);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            versionedProject \u003d (VersionedProject) versionedProjectList.getProjectList().get(getFilteredProjectList()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    .indexOf(project));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedProject.getTaskList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        filteredTasks.addListener(this::ensureSelectedTaskIsValid);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*versionedProject.clear();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        versionedProject.resetName(project);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.resetData(project);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        versionedProject.populate(project);*/"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ReadOnlyProject getProject() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return versionedProject;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return versionedProject.hasTask(task);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.removeTask(target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.addTask(task);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.setTask(target, editedTask);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void clearTasks() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        versionedProject.clearTasks();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Project} backed by the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * internal list of {@code versionedProjectList}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * internal list of {@code versionedProject}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo/Compare"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean canUndoProject() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return versionedProject.canUndo();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean canRedoProject() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return versionedProject.canRedo();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void undoProject() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.undo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void redoProject() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void commitProjectList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        versionedProjectList.commit();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void commitProject() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.commit();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public List\u003cString\u003e compareTask(Task target) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return versionedProject.compareTask(target);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected project"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return selectedProject;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Project getSelectedProject() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return selectedProject.getValue();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (project !\u003d null \u0026\u0026 !filteredProjects.contains(project)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        selectedProject.setValue(project);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Ensures {@code selectedProject} is a valid project in {@code filteredProjects}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void ensureSelectedProjectIsValid(ListChangeListener.Change\u003c? extends Project\u003e change) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (selectedProject.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                // null is always a valid selected task, so we do not need to check that it is"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                // valid anymore."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            boolean wasSelectedProjectReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedProject.getValue());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (wasSelectedProjectReplaced) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                // Update selectedTask to its new value."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedProject.getValue());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                selectedProject.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            boolean wasSelectedProjectRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    .anyMatch(removedProject -\u003e selectedProject.getValue().isSameProject(removedProject));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (wasSelectedProjectRemoved) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                // Select the task that came before it in the list,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                selectedProject.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected task"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Task getSelectedTask() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return selectedTask.getValue();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (task !\u003d null \u0026\u0026 !filteredTasks.contains(task)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectedTask.setValue(task);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Ensures {@code selectedTask} is a valid task in {@code filteredTasks}."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void ensureSelectedTaskIsValid(ListChangeListener.Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                // null is always a valid selected task, so we do not need to check that it is"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                // valid anymore."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            boolean wasSelectedTaskReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedTask.getValue());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (wasSelectedTaskReplaced) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                // Update selectedTask to its new value."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedTask.getValue());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                selectedTask.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            boolean wasSelectedTaskRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    .anyMatch(removedTask -\u003e selectedTask.getValue().isSameTask(removedTask));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (wasSelectedTaskRemoved) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                // Select the task that came before it in the list,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                selectedTask.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        versionedProject.removeTag(tag);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return versionedProjectList.equals(other.versionedProjectList)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                \u0026\u0026 versionedProject.equals(other.versionedProject)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedTask.get(), other.selectedTask.get());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gautamrajulu": 6,
      "josephinetanadi": 105,
      "arhjaye": 66,
      "andreathniah": 235
    }
  },
  {
    "path": "src/main/java/seedu/project/model/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Represents a Task\u0027s name in the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9 ]*$\"; //\"^[a-zA-Z0-9][a-zA-Z0-9 \\s]*\"\"^[\\\\w][\\\\w\\\\s]*$\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "arhjaye": 1,
      "-": 55,
      "andreathniah": 2
    }
  },
  {
    "path": "src/main/java/seedu/project/model/ProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.project.UniqueGroupTagList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * .isSameProject comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectList implements ReadOnlyProjectList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final UniqueGroupTagList tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * sometimes used to avoid duplication between constructors. See"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * ways to avoid duplication among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tags \u003d new UniqueGroupTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ProjectList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Creates a ProjectList using the Projects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectList(ReadOnlyProjectList toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectList(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setProjects(projects);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Replaces the contents of the project list with {@code projects}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setProjects(List\u003cProject\u003e target) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects.setProjects(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Resets the existing data of this {@code ProjectList} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void resetData(ReadOnlyProjectList newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the project list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the project list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean hasGroupTag(GroupTag groupTag) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(groupTag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return tags.contains(groupTag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds a project to the project list. The project must not already exist in the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * project list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects.add(p);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds a project to the project list. The project must not already exist in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * project list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void addGroupTag(GroupTag g) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tags.add(g);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the given project {@code target} in the list with"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code editedProject}. {@code target} must exist in the project list. The"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * project identity of {@code editedProject} must not be the same as another"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * existing project in the project list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects.setProject(target, editedProject);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Removes {@code key} from this {@code ProjectList}. {@code key} must exist in"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the project list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void removeProject(Project key) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Notifies listeners that the project has been modified."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projects.asUnmodifiableObservableList().size() + \" projects\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ObservableList\u003cGroupTag\u003e getGroupTagList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || (other instanceof ProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        \u0026\u0026 projects.equals(((ProjectList) other).projects));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projects.hashCode();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 137,
      "andreathniah": 45
    }
  },
  {
    "path": "src/main/java/seedu/project/model/ReadOnlyProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Unmodifiable view of all projects"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public interface ReadOnlyProjectList extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns an unmodifiable view of the tasks list. This list will not contain"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * any duplicate tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ObservableList\u003cGroupTag\u003e getGroupTagList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "andreathniah": 15
    }
  },
  {
    "path": "src/main/java/seedu/project/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "andreathniah": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/project/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Path projectListFilePath \u003d Paths.get(\"data\", \"projectlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setProjectListFilePath(newUserPrefs.getProjectListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projectListFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(projectListFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.projectListFilePath \u003d projectListFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return guiSettings.equals(o.guiSettings) \u0026\u0026 projectListFilePath.equals(o.projectListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return Objects.hash(guiSettings, projectListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        sb.append(\"\\nProject list file location: \" + projectListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 10,
      "andreathniah": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/project/model/VersionedProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * {@code ProjectList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class VersionedProjectList extends ProjectList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final List\u003cReadOnlyProjectList\u003e projectListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public VersionedProjectList(ReadOnlyProjectList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStateList.add(new ProjectList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Clears all history when selecting a new project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStateList.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Populate history after clearing when selecting a new project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void populate(ReadOnlyProjectList initialState) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStateList.add(new ProjectList(initialState));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Saves a copy of the current {@code ProjectList} state at the end of the state"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * list. Undone states are removed from the state list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStateList.add(new ProjectList(this));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStateList.subList(currentStatePointer + 1, projectListStateList.size()).clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Restores the project list to its previous state."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        resetData(projectListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Restores the project list to its previously undone state."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        resetData(projectListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if {@code undo()} has project list states to undo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if {@code redo()} has project list states to redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return currentStatePointer \u003c projectListStateList.size() - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!(other instanceof VersionedProjectList)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProjectList otherVersionedProjectList \u003d (VersionedProjectList) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return super.equals(otherVersionedProjectList)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 projectListStateList.equals(otherVersionedProjectList.projectListStateList)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedProjectList.currentStatePointer;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            super(\"Current state pointer at start of projectListState list, unable to undo.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            super(\"Current state pointer at end of projectListState list, unable to redo.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 125
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/Project.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class Project implements ReadOnlyProject {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        name \u003d new Name(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Project() {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Project(Name name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Project(ReadOnlyProject toBeCopied) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        name \u003d toBeCopied.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Creates an Project using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Project(Name name, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireAllNonNull(name, tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setTasks(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Replaces the contents of the name with {@code newData}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void resetName(ReadOnlyProject newData) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setName(newData.getName().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * clears task"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void clearTasks() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Project clearedProject \u003d new Project();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        clearedProject.setName(getName().toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        clearedProject.setTasks(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        resetData(clearedProject);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Resets the existing data of this {@code Project} with {@code newData}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void resetData(ReadOnlyProject newData) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the project."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds a task to the project."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The task must not already exist in the project."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code target} must exist in the project."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the project."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Removes {@code key} from this {@code Project}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code key} must exist in the project."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     * Removes tag from a specific Task."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    private void removeTagTask(Tag tag, Task task) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(task.getTags());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        Task update \u003d new Task(task.getName(), task.getDescription(), task.getDeadline(), newTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        setTask(task, update);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        removeTask(update);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        tasks.forEach(task -\u003e removeTagTask(tag, task));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean isSameProject(Project otherProject) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (otherProject \u003d\u003d this) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return otherProject !\u003d null"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 otherProject.getName().equals(getName());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Notifies listeners that the project has been modified."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return getName().toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                || (other instanceof Project // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 name.equals(((Project) other).getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 tasks.equals(((Project) other).tasks));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return Objects.hash(name, tasks);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns index of a {@code taskID} in the list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code taskID} must exist in the project"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public int getIndex(int taskId) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return tasks.getIndexOfTask(taskId);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gautamrajulu": 24,
      "josephinetanadi": 67,
      "arhjaye": 13,
      "andreathniah": 132
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/ReadOnlyProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "package seedu.project.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Unmodifiable view of an project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public interface ReadOnlyProject extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns index of a {@code taskID} in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code taskID} must exist in the project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    int getIndex(int taskId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "arhjaye": 7,
      "andreathniah": 17
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/UniqueGroupTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.project.exceptions.DuplicateGroupTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.project.exceptions.GroupTagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A list of GroupTags that enforces uniqueness between its elements and does"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * not allow nulls. A GroupTag is considered unique by comparing using"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * {@code GroupTag#isSameGroupTag(GroupTag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * tasks uses GroupTag#isSameGroupTag(GroupTag) for equality so as to ensure"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * that the task being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * UniqueGroupTagList. However, the removal of a GroupTag uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * GroupTag#equals(Object) so as to ensure that the task with exactly the same"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * @see GroupTag#isSameGroupTag(GroupTag)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class UniqueGroupTagList implements Iterable\u003cGroupTag\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ObservableList\u003cGroupTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ObservableList\u003cGroupTag\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean contains(GroupTag toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameGroupTag);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds a GroupTag to the list. The GroupTag must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void add(GroupTag toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DuplicateGroupTagException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the GroupTag {@code target} in the list with {@code editedGroupTag}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code target} must exist in the list. The GroupTag identity of"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setGroupTag(GroupTag target, GroupTag editedGroupTag) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireAllNonNull(target, editedGroupTag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new GroupTagNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!target.isSameGroupTag(editedGroupTag) \u0026\u0026 contains(editedGroupTag)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DuplicateGroupTagException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.set(index, editedGroupTag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Removes the equivalent GroupTag from the list. The GroupTag must exist in the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void remove(GroupTag toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new GroupTagNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}. {@code tasks} must not"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * contain duplicate tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setGroupTags(List\u003cGroupTag\u003e groupTags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireAllNonNull(groupTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!groupTagsAreUnique(groupTags)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DuplicateGroupTagException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.setAll(groupTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ObservableList\u003cGroupTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Iterator\u003cGroupTag\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                || (other instanceof UniqueGroupTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueGroupTagList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private boolean groupTagsAreUnique(List\u003cGroupTag\u003e groupTags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 0; i \u003c groupTags.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groupTags.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                if (groupTags.get(i).isSameGroupTag(groupTags.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 135
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/UniqueProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * A list of projects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * A project is considered unique by comparing using {@code Project#isSameProject(Project)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * updating of tasks uses Project#isSameProject(Project) for equality so as to ensure that the task being added or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * updated is unique in terms of identity in the UniqueProjectList. However, the removal of a project uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Project#equals(Object) so as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * @see Project#isSameProject(Project)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Adds a project to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * The project must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void add(Project toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Replaces the project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * The project identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Removes the equivalent project from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * The project must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!projectsAreUnique(projects)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 132
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/VersionedProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "package seedu.project.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * {@code Project} that keeps track of its own history."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class VersionedProject extends Project {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final List\u003cReadOnlyProject\u003e projectStateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public VersionedProject(ReadOnlyProject initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        projectStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        projectStateList.add(new Project(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Clears all history when selecting a new project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectStateList.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Populate history after clearing when selecting a new project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void populate(ReadOnlyProject initialState) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectStateList.add(new Project(initialState));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Saves a copy of the current {@code Project} state at the end of the state"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * list. Undone states are removed from the state list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        projectStateList.add(new Project(this));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        projectStateList.subList(currentStatePointer + 1, projectStateList.size()).clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Restores the project to its previous state."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        resetData(projectStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Restores the project to its previously undone state."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        resetData(projectStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if {@code undo()} has project states to undo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if {@code redo()} has project states to redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return currentStatePointer \u003c projectStateList.size() - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!(other instanceof VersionedProject)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject otherVersionedProject \u003d (VersionedProject) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return super.equals(otherVersionedProject) \u0026\u0026 projectStateList.equals(otherVersionedProject.projectStateList)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedProject.currentStatePointer;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Compares the target task with the previous edited version"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public List\u003cString\u003e compareTask(Task target1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int targetTaskId \u003d target1.getTaskId();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int movingStatePointer \u003d currentStatePointer;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        movingStatePointer--;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        while (movingStatePointer \u003e\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            int taskIndex \u003d projectStateList.get(movingStatePointer).getIndex(targetTaskId);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            if (isThereDiff(target1, projectStateList.get(movingStatePointer).getTaskList()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                    .get(taskIndex))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                return getDiffString(target1, projectStateList.get(movingStatePointer).getTaskList()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                        .get(taskIndex));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                movingStatePointer--;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns true if there is a difference between {@code task1, task}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Else returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code task1, task2} must exist in the project"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public boolean isThereDiff(Task task1, Task task2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.print(task1 + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.print(task2 + \"\\n\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (task1.getName() !\u003d task2.getName()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else if (task1.getDescription() !\u003d task2.getDescription()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else if (task1.getDeadline() !\u003d task2.getDeadline()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Makes and return a List of String of differences between the two task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code str1, str2} must have diff."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public List\u003cString\u003e getDiffString(Task task1, Task target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String taskReturnString \u003d null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String targetReturnString \u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        List\u003cString\u003e returnString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        // Arrays.asList(\" \", \" \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (task1.getName() !\u003d target.getName()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            taskReturnString \u003d (\"Name: \" + task1.getName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            targetReturnString \u003d (\"Name: \" + target.getName());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (task1.getDescription() !\u003d target.getDescription()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            if (taskReturnString \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                taskReturnString \u003d (\"Description: \" + task1.getDescription());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                targetReturnString \u003d (\"Description: \" + target.getDescription());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                taskReturnString \u003d (taskReturnString + \" | Description: \" + task1.getDescription());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                targetReturnString \u003d (targetReturnString + \" | Description: \" + target.getDescription());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        if (task1.getDeadline() !\u003d target.getDeadline()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            if (taskReturnString \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                taskReturnString \u003d (\"Deadline: \" + task1.getDeadline());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                targetReturnString \u003d (\"Deadline: \" + target.getDeadline());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                taskReturnString \u003d (taskReturnString + \" | Deadline: \" + task1.getDeadline());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                targetReturnString \u003d (targetReturnString + \" | Deadline: \" + target.getDeadline());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        returnString.add(taskReturnString);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        returnString.add(targetReturnString);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            super(\"Current state pointer at start of projectState list, unable to undo.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            super(\"Current state pointer at end of projectState list, unable to redo.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 17,
      "arhjaye": 84,
      "-": 83,
      "andreathniah": 23
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/exceptions/DuplicateGroupTagException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Signals that the operation will result in duplicate Projects (Projects are considered duplicates if they have the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class DuplicateGroupTagException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public DuplicateGroupTagException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        super(\"Operation would result in duplicate group tags\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 12
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/exceptions/DuplicateProjectException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Signals that the operation will result in duplicate Projects (Projects are considered duplicates if they have the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 12
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/exceptions/GroupTagNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class GroupTagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6
    }
  },
  {
    "path": "src/main/java/seedu/project/model/project/exceptions/ProjectNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 6
    }
  },
  {
    "path": "src/main/java/seedu/project/model/tag/GroupTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Represents a GroupTag in the project. Guarantees: immutable; name is valid as"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class GroupTag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"GroupTag can take any names, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The first character of the address must not be a whitespace, otherwise \" \" (a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Constructs an {@code GroupTag}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @param groupTag A valid groupTag."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public GroupTag(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * field that is the same. This defines a weaker notion of equality between two"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean isSameGroupTag(GroupTag otherGroupTag) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (otherGroupTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return otherGroupTag !\u003d null \u0026\u0026 otherGroupTag.getName().equals(getName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 otherGroupTag.getTags().equals(getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                || (other instanceof GroupTag // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                        \u0026\u0026 name.equals(((GroupTag) other).name)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 74
    }
  },
  {
    "path": "src/main/java/seedu/project/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Represents a Tag in the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public String toStringWithoutBrackets() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Represents a Task\u0027s deadline in the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadline can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-3]?[0-9]-[0-3]?[0-9]-(?:[0-9]{2})?[0-9]{2}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Constructs an {@code Deadline}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        value \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 value.equals(((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 14,
      "andreathniah": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Represents a Task\u0027s description in the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 13,
      "andreathniah": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Represents a Task in the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private static int numberOfTask \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Task(Name name, Description description, Deadline deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireAllNonNull(name, description, deadline, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //numberOfTask++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        this.taskId \u003d hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     * Converts strings to the date type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    private Date stringToDate(String s) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        Date result \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            result \u003d dateFormat.parse(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            System.out.println(\"result is: \" + result + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     * Comparator function for tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    public int compareTo(Task anotherTask) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        String thisDeadline \u003d (this.getDeadline()).toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        String compareDeadline \u003d (anotherTask.getDeadline()).toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        Date thisTaskDate \u003d stringToDate(thisDeadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        Date compareTaskDate \u003d stringToDate(compareDeadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        if (thisTaskDate.after(compareTaskDate)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        } else if (compareTaskDate.after(thisTaskDate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public int getTaskId() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return taskId;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void updateTaskId(int newTaskId) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        this.taskId \u003d newTaskId;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public int getNumberOfTask() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return numberOfTask;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        this.tags.add(tag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName()) \u0026\u0026 (otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || otherTask.getDeadline().equals(getDeadline()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return Objects.hash(name, description, deadline, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 5,
      "gautamrajulu": 37,
      "josephinetanadi": 20,
      "arhjaye": 22,
      "andreathniah": 15,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Returns index of a {@code taskID} in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * {@code taskID} must exist in the project"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public int getIndexOfTask(int taskId) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int totalTask \u003d internalList.size();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        while (index \u003c totalTask) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            if (internalList.get(index).getTaskId() \u003d\u003d taskId) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                System.out.print (\"index is : \" + index + \"\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.print (\"return here index is : \" + index + \"\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 21,
      "andreathniah": 137
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 11
    }
  },
  {
    "path": "src/main/java/seedu/project/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6
    }
  },
  {
    "path": "src/main/java/seedu/project/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Contains utility methods for populating {@code Project} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            new Task(new Name(\"Sample task 1\"), new Description(\"This is a sample task\"), new Deadline(\"1-1-2011\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                getTagSet(\"SAMPLE\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            new Task(new Name(\"Sample task 2\"), new Description(\"This is a sample task\"), new Deadline(\"1-1-2011\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    getTagSet(\"SAMPLE\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static Project[] getSampleProjects() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Project[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            new Project(new Name(\"Sample project 1\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            new Project(new Name(\"Sample project 2\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static ProjectList getSampleProjectList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectList projectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        for (Project project : getSampleProjects()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            for (Task task : getSampleTasks()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                project.addTask(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            projectList.addProject(project);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projectList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns a task set containing the list of strings given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 28,
      "andreathniah": 27
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonAdaptedProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"name\") String name, @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        tasks.addAll(source.getTaskList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        final List\u003cTask\u003e modelTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        for (JsonAdaptedTask task : tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            modelTasks.add(task.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Project(modelName, modelTasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 65
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            @JsonProperty(\"deadline\") String deadline, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        deadline \u003d source.getDeadline().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Task(modelName, modelDescription, modelDeadline, modelTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 28,
      "andreathniah": 14,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonProjectListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * A class to access Project data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class JsonProjectListStorage implements ProjectListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public JsonProjectListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return readProjectList(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Similar to {@link #readProjectList()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Optional\u003cJsonSerializableProjectList\u003e jsonProjectList \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                JsonSerializableProjectList.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!jsonProjectList.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return Optional.of(jsonProjectList.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        saveProjectList(projectList, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Similar to {@link #saveProjectList(ReadOnlyProjectList)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(projectList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectList(projectList), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //save to userpref projectlist?"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void backupProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        saveProjectList(projectList, backupFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 88
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonProjectStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A class to access Project data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class JsonProjectStorage implements ProjectStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public JsonProjectStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Path getProjectFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Optional\u003cReadOnlyProject\u003e readProject() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return readProject(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Similar to {@link #readProject()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Optional\u003cReadOnlyProject\u003e readProject(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Optional\u003cJsonSerializableProject\u003e jsonProject \u003d JsonUtil.readJsonFile(filePath, JsonSerializableProject.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!jsonProject.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return Optional.of(jsonProject.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void saveProject(ReadOnlyProject project) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        saveProject(project, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Similar to {@link #saveProject(ReadOnlyProject)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void saveProject(ReadOnlyProject project, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProject(project), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void backupProject(ReadOnlyProject project) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        saveProject(project, backupFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "andreathniah": 85
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonSerializableProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * An Immutable Project that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "@JsonRootName(value \u003d \"project\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "class JsonSerializableProject {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Constructs a {@code JsonSerializableProject} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public JsonSerializableProject(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Converts a given {@code ReadOnlyProject} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *               {@code JsonSerializableProject}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public JsonSerializableProject(ReadOnlyProject source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Converts this project into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project project \u003d new Project();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (project.hasTask(task)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            project.addTask(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "andreathniah": 57
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonSerializableProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * An Immutable ProjectList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "@JsonRootName(value \u003d \"project list\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class JsonSerializableProjectList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Constructs a {@code JsonSerializableProjectList} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public JsonSerializableProjectList(@JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Converts a given {@code ReadOnlyProjectList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *               {@code JsonSerializableProjectList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public JsonSerializableProjectList(ReadOnlyProjectList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Converts this project list into the model\u0027s {@code ProjectList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectList projectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (projectList.hasProject(project)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            projectList.addProject(project);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projectList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 61
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/ProjectListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Represents a storage for {@link ProjectList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public interface ProjectListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns ProjectList data as a {@link ReadOnlyProjectList}. Returns"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *                                 format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws IOException             if there was any problem when reading from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *                                 the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see #getProjectListFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Saves the given {@link ReadOnlyProjectList} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @param projectList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see #saveProjectList(ReadOnlyProjectList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void backupProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 51
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/ProjectStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Represents a storage for {@link Project}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public interface ProjectStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    Path getProjectFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns Project data as a {@link ReadOnlyProject}. Returns"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *                                 format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws IOException             if there was any problem when reading from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *                                 the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    Optional\u003cReadOnlyProject\u003e readProject() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see #getProjectFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    Optional\u003cReadOnlyProject\u003e readProject(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Saves the given {@link ReadOnlyProject} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @param project cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void saveProject(ReadOnlyProject project) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see #saveProject(ReadOnlyProject)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void saveProject(ReadOnlyProject project, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void backupProject(ReadOnlyProject project) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "andreathniah": 48
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public interface Storage extends ProjectListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 11,
      "andreathniah": 21
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Manages storage of Project data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private ProjectListStorage projectListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public StorageManager(ProjectListStorage projectListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.projectListStorage \u003d projectListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projectListStorage.getProjectListFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return readProjectList(projectListStorage.getProjectListFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projectListStorage.readProjectList(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        saveProjectList(projectList, projectListStorage.getProjectListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStorage.saveProjectList(projectList, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void backupProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        logger.fine(\"Backing up to temporary location\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStorage.backupProjectList(projectList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 39,
      "andreathniah": 42
    }
  },
  {
    "path": "src/main/java/seedu/project/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Represents a storage for {@link seedu.project.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Saves the given {@link seedu.project.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cProject\u003e selectedProject, ObservableValue\u003cTask\u003e selectedTask) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!LogicManager.getState()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            // Load project page when selected task changes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            selectedProject.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    loadDefaultPage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                loadProjectPage(newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // Load task page when selected task changes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    loadDefaultPage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                loadTaskPage(newValue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void loadTaskPage(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + task.getName().fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void loadProjectPage(Project project) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + project.getName().fullName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 16,
      "andreathniah": 9,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } catch (CommandException | ParseException | DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * @see seedu.project.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                DataConversionException, IOException;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "andreathniah": 5,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedProjectProperty(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList(), logic.selectedProjectProperty(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                logic::setSelectedProject);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                logic::setSelectedTask);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        taskListPanelPlaceholder.setDisable(true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getProjectListFilePath(), logic.getProjectList(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                logic.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Navigating between project and task"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void refreshPanel(String commandText) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (commandText.contains(SelectCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || commandText.contains(SelectCommand.COMMAND_ALIAS + \" \")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (LogicManager.getState()) { //to update task list panel"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                taskListPanelPlaceholder.setDisable(false);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                taskListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        logic::setSelectedTask);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectListPanelPlaceholder.setDisable(true);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } else if (commandText.equals(ListProjectCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                || commandText.equals(ListProjectCommand.COMMAND_ALIAS)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            taskListPanelPlaceholder.setDisable(true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            projectListPanelPlaceholder.setDisable(false);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getProjectListFilePath(), logic.getProjectList(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                logic.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see seedu.project.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            refreshPanel(commandText);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } catch (CommandException | ParseException | DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 46,
      "andreathniah": 15,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/ProjectCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     *      issue on Project level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private HBox projectCardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        name.setText(project.getName().fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 57
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/ProjectListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList, ObservableValue\u003cProject\u003e selectedProject,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                         Consumer\u003cProject\u003e onSelectedProjectChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            logger.fine(\"Selection in project list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            onSelectedProjectChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        selectedProject.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            logger.fine(\"Selected project changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected project,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (Objects.equals(projectListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                int index \u003d projectListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                //taskListView.setItems(selectedProject.getValue().getTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 72
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String TOTAL_PROJECTS_STATUS \u003d \"%d project(s) total\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * TODO: change clock to an instance variable. We leave it as a static variable"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * because manual dependency injection will require passing down the clock"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * reference all the way from MainApp, but it should be easier once we have"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * factories/DI frameworks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Label totalProjectsStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    // private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyProjectList projectList, int totalProjects) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectList.addListener(observable -\u003e updateSyncStatus(projectList.getProjectList().size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setTotalProjects(totalProjects);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void setTotalProjects(int totalProjects) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Platform.runLater(() -\u003e totalProjectsStatus.setText(String.format(TOTAL_PROJECTS_STATUS, totalProjects)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void updateSyncStatus(int projectListSize) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setTotalProjects(projectListSize);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 10,
      "arhjaye": 5,
      "andreathniah": 5,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final String[] TAG_COLORS \u003d { \"teal\", \"red\", \"yellow\", \"blue\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *      issue on Project level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private HBox taskCardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        deadline.setText(task.getDeadline().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        setTagColor(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // Create tag labels for task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTagColor(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        task.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // Todo: Allow defining of tag colors through CLI instead of randomization"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // Throw out color name from TAG_COLOR array based on randomized value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            String tagColor \u003d TAG_COLORS[Math.abs(tag.tagName.hashCode()) % TAG_COLORS.length];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            tagLabel.getStyleClass().add(tagColor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "andreathniah": 32,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cTask\u003e selectedTask,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Consumer\u003cTask\u003e onSelectedTaskChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            onSelectedTaskChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            logger.fine(\"Selected task changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected task,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (Objects.equals(taskListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                taskListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                int index \u003d taskListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 71
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/project/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox2.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField2\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arhjaye": 9
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".list-cell:filled:selected #projectCardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ".list-cell:filled:selected #taskCardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "#projectCardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "#taskCardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .red {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: red;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .yellow {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: yellow;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .blue {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: blue;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .orange {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: orange;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .brown {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: brown;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .green {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: green;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .pink {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: pink;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .black {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: black;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  #tags .grey {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     -fx-background-color: grey;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 12,
      "-": 349,
      "andreathniah": 51
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         title\u003d\"Project App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "          \u003cVBox fx:id\u003d\"projectList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "-": 68,
      "andreathniah": 2
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003cHBox id\u003d\"projectCardPane\" fx:id\u003d\"projectCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 31
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "  \u003cLabel fx:id\u003d\"totalProjectsStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "arhjaye": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\u003cHBox id\u003d\"taskCardPane\" fx:id\u003d\"taskCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/data/JsonProjectStorageTest/invalidAndValidTaskProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"name\": \"Valid Task\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"asdfghjkl\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Task With Invalid Deadline Field\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"asdfghjkl\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"112011\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "andreathniah": 9
    }
  },
  {
    "path": "src/test/data/JsonProjectStorageTest/invalidTaskProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Task with invalid name field: Gr0up Meet!ing\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"asdfghjkl\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "andreathniah": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableProjectTest/duplicateTaskProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Group meeting\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"find teammates for group discussion on presentation\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"tagged\": [\"TYPICAL\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Group meeting\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"find teammates for group discussion on presentation\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 7,
      "andreathniah": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableProjectTest/invalidTaskProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"name\": \"Group meeting\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"description\": \"find teammates for group discussion on presentation\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"deadline\": \"112011\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "      \"tagged\": [\"TYPICAL\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 8,
      "-": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableProjectTest/typicalTasksProject.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"_comment\": \"Project save file which contains the same Task values as in TypicalTasks#getTypicalProject()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"tasks\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Group meeting\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"find teammates for group discussion on presentation\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"tagged\": [\"TYPICAL\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Report submission\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"submit report to John Doe\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"tagged\": [\"TYPICAL\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Feedback\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"submit feedback\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"tagged\": []"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Teaching Feedback\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"submit teaching feedback via portal\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"tagged\": [\"TYPICAL\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Print slides\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"print chapter 4 slides\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"tagged\": []"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Complete quiz\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"attempt quiz at portal, multiple attempts possible\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"tagged\": []"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"name\": \"Go for consultation\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"description\": \"find mr john doe for consultation at office 04-15\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "\t\t\t\"deadline\": \"1-1-2011\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t\t\"tagged\": []"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 24,
      "andreathniah": 23
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\t\"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\t},"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"projectFilePath\": \"project.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\t\"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\t\"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\t},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\t\"projectFilePath\": \"project.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ProjectListPanelHandle projectListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private TaskListPanelHandle taskListPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListPanel \u003d new ProjectListPanelHandle(getChildNode(ProjectListPanelHandle.PROJECT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectListPanelHandle getProjectListPanel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return projectListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * just for the sake of it"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void refreshMainWindow() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        int selectedIndex \u003d taskListPanel.getSelectedCardIndex();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        taskListPanel.select(selectedIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 15,
      "arhjaye": 3,
      "-": 47,
      "andreathniah": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProjectCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Provides a handle to a project card in the project list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean equals(Project project) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return getName().equals(project.getName().fullName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 37
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProjectListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * Provides a handle for {@code ProjectListPanel} containing the list of {@code ProjectCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectListPanelHandle extends NodeHandle\u003cListView\u003cProject\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String PROJECT_LIST_VIEW_ID \u003d \"#projectListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#projectCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Optional\u003cProject\u003e lastRememberedSelectedProjectCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectListPanelHandle(ListView\u003cProject\u003e ProjectListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        super(ProjectListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns a handle to the selected {@code ProjectCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cProject\u003e selectedProjectList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (selectedProjectList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"Project list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .map(ProjectCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedProjectList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cProject\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Navigates the listview to display {@code Project}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void navigateToCard(Project Project) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (!getRootNode().getItems().contains(Project)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new IllegalArgumentException(\"Project does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            getRootNode().scrollTo(Project);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Selects the {@code ProjectCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the Project card handle of a Project associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectCardHandle getProjectCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .map(ProjectCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .filter(handle -\u003e handle.equals(getProject(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Project getProject(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Remembers the selected {@code ProjectCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void rememberSelectedProjectCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cProject\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            lastRememberedSelectedProjectCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            lastRememberedSelectedProjectCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns true if the selected {@code ProjectCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code rememberSelectedProjectCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public boolean isSelectedProjectCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cProject\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return lastRememberedSelectedProjectCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return !lastRememberedSelectedProjectCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    || !lastRememberedSelectedProjectCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 39,
      "-": 120
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Label deadlineLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return deadlineLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return getName().equals(task.getName().fullName)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 getDescription().equals(task.getDescription().value)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                \u0026\u0026 getDeadline().equals(task.getDeadline().value)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 12,
      "-": 59,
      "andreathniah": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#taskCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedTaskCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Navigates the listview to display {@code task}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Selects the {@code TaskCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the task card handle of a task associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskCardHandle getTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .filter(handle -\u003e handle.equals(getTask(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void rememberSelectedTaskCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code rememberSelectedTaskCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public boolean isSelectedTaskCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return lastRememberedSelectedTaskCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return !lastRememberedSelectedTaskCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 2,
      "-": 120,
      "andreathniah": 37
    }
  },
  {
    "path": "src/test/java/seedu/project/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/project/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.JsonProjectListStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"sampleProjectList.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected Supplier\u003cReadOnlyProjectList\u003e initialProjectListDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected Path saveProjectListFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyProjectList\u003e pl, Path path) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.initialProjectListDataSupplier \u003d pl;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.saveProjectListFileLocation \u003d path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        if (pl.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            JsonProjectListStorage jsonProjectListStorage \u003d new JsonProjectListStorage(path);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                jsonProjectListStorage.saveProjectList(pl.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userPrefs.setProjectListFilePath(saveProjectListFileLocation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns a defensive copy of the project list data stored inside the storage file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectList readStorageProjectList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            return new ProjectList(storage.readProjectList().get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"Data is not in the ProjectList format.\", dce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public Path getProjectListSaveLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return storage.getProjectListFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model copy \u003d new ModelManager((model.getProjectList()), (model.getProject()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredProjectList(copy, model.getFilteredProjectList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(copy, model.getFilteredTaskList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 26,
      "andreathniah": 8,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 8,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/InvalidationListenerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cObject\u003e dummyObservable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerOnce_listenerAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(dummyObservable, observable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerTwice_listenerAddedTwice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, counter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_listenersBeingCalled_listenerNotCalled() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_singleListenerAdded_listenerRemoved() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_sameListenerAddedTwice_firstListenerRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_listenersBeingCalled_listenerStillCalled() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.removeListener(listener1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/project/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.JsonProjectListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.JsonProjectStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonProjectListStorage projectListStorage \u003d new JsonProjectListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonProjectStorage projectStorage \u003d new JsonProjectStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_TASK, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Setup LogicManager with JsonProjectIoExceptionThrowingStub"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonProjectListStorage projectListStorage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projectListStorage \u003d new JsonProjectListIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonProjectStorage projectStorage \u003d new JsonProjectIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2101 + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2101_MILESTONE).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * result message is correct. Also confirms that {@code expectedModel} is as"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectList(), model.getProject(), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the expected exception is thrown, and also confirms that the following two"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * - the internal model manager data are same as those in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * - {@code expectedModel}\u0027s project was saved to the storage file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (CommandException | ParseException | DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the execution of {@code HistoryCommand}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        } catch (ParseException | CommandException | IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static class JsonProjectIoExceptionThrowingStub extends JsonProjectStorage {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        private JsonProjectIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void saveProject(ReadOnlyProject project, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static class JsonProjectListIoExceptionThrowingStub extends JsonProjectListStorage {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        private JsonProjectListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 23,
      "arhjaye": 14,
      "andreathniah": 50,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectList(), getTypicalProject(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectList(), model.getProject(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS_TASK, validTask), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task taskInList \u003d model.getProject().getTaskList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "andreathniah": 45
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.GroupTag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS_TASK, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void commitProjectList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public Project getSelectedProject() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setProjectList(ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean hasGroupTag(GroupTag groupTag) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void deleteProject(Project project) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void addGroupTag(GroupTag groupTag) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void setProject(ReadOnlyProject newData) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public ReadOnlyProject getProject() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public List\u003cString\u003e compareTask(Task target) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void clearTasks() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gautamrajulu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean canUndoProject() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean canRedoProject() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void undoProject() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void redoProject() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void commitProject() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void commitProject() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public ReadOnlyProject getProject() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return new Project();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gautamrajulu": 7,
      "josephinetanadi": 35,
      "arhjaye": 42,
      "andreathniah": 64,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * for the sake of it"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //to be done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_emptyProject_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                Messages.MESSAGE_GO_TO_TASK_LEVEL, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_nonEmptyProject_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //model.setProjectList(new ProjectList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //model.commitProject();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.setProjectList(new ProjectList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.commitProject();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Project clearedProject \u003d new Project();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        clearedProject.setName(expectedModel.getProject().getName().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        clearedProject.setTasks(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.setProject(model.getSelectedProject(), clearedProject);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.clearTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 2,
      "arhjaye": 39,
      "andreathniah": 26
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_NAME_CS2101 \u003d \"Milestone\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_NAME_CP2106 \u003d \"Orbital Project\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2101 \u003d \"config labels, milestone, project board\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_DESCRIPTION_CP2106 \u003d \"listings, notifications\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_DEADLINE_CS2101 \u003d \"1-1-2011\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_DEADLINE_CP2106 \u003d \"20-6-2019\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_TAG_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_TAG_CP2106 \u003d \"CP2106\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_PROJECT_NAME_CS2101 \u003d \"CS2101 Project\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String VALID_PROJECT_NAME_CP2106 \u003d \"CP2106 Project\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String NAME_DESC_CS2101 \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String NAME_DESC_CP2106 \u003d \" \" + PREFIX_NAME + VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String DESC_DESC_CS2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String DESC_DESC_CP2106 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String DEADLINE_DESC_CS2101 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_CS2101;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String DEADLINE_DESC_CP2106 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String TAG_DESC_CS2101 \u003d \" \" + PREFIX_TAG + VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String TAG_DESC_CP2106 \u003d \" \" + PREFIX_TAG + VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String NAME_DESC_CS2101_PROJECT \u003d \" \" + PREFIX_NAME + VALID_PROJECT_NAME_CS2101;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String NAME_DESC_CP2106_PROJECT \u003d \" \" + PREFIX_NAME + VALID_PROJECT_NAME_CP2106;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Milestone\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String INVALID_DESC_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\"; // \u0027(blank)\u0027 not allowed in desc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"112011\"; // does not follow date format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"mod*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_CS2101;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_CP2106;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DESC_CS2101 \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CS2101)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CS2101).withDeadline(VALID_DEADLINE_CS2101)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DESC_CP2106 \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CP2106)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CP2106).withDeadline(VALID_DEADLINE_CP2106)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"Data Conversation Exception.\", e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            throw new AssertionError(\"Input / Output Exception.\", e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * - the project, filtered task list and selected task in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project expectedProject \u003d new Project(actualModel.getProject());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task expectedSelectedTask \u003d actualModel.getSelectedTask();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        } catch (CommandException | DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            assertEquals(expectedProject, actualModel.getProject());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            assertEquals(expectedSelectedTask, actualModel.getSelectedTask());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code model}\u0027s project."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s project."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.commitProject();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 37,
      "arhjaye": 9,
      "andreathniah": 30,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectList(), model.getProject(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public void execute_validIndexFilteredProjectList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProject().getTaskList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // undo -\u003e reverts project back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.redoProject();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // execution failed -\u003e project state not added into model"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // single project state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 1. Deletes a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskDeleted() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectList(), model.getProject(), new UserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // undo -\u003e reverts project back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // redo -\u003e deletes same second task in unfiltered task list"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.redoProject();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //LogicManager.setState(true);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //LogicManager.setState(true);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Updates {@code model}\u0027s project filtered list to show no one."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private void showNoProject(Model model) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.updateFilteredProjectList(p -\u003e false);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertTrue(model.getFilteredProjectList().isEmpty());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 22,
      "arhjaye": 87,
      "andreathniah": 38,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //expected model -\u003e filtered project -\u003e projectstatelist not updating"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                new ProjectList(model.getProjectList()), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setTask(expectedModel.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getSelectedProject(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                (Project) expectedModel.getProject()); //sync project list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedTask \u003d taskInList.withName(VALID_NAME_CP2106).withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CP2106)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new ProjectList(model.getProjectList()), new Project(model.getProject()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getSelectedProject(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                (Project) expectedModel.getProject()); //sync project list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new ProjectList(model.getProjectList()), new Project(model.getProject()), new UserPrefs());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getSelectedProject(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                (Project) expectedModel.getProject()); //sync project list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_CP2106).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new ProjectList(model.getProjectList()), new Project(model.getProject()), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getSelectedProject(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                (Project) expectedModel.getProject()); //sync project list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // edit task in filtered list into a duplicate in project"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskInList \u003d model.getProject().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * but smaller than size of project"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProject().getTaskList().size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_CP2106).build());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new ProjectList(model.getProjectList()), new Project(model.getProject()), new UserPrefs());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getSelectedProject(),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                (Project) expectedModel.getProject()); //sync project list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // edit -\u003e first task edited"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // undo -\u003e reverts project back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // redo -\u003e same first task edited again"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.redoProject();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // execution failed -\u003e project state not added into model"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // single project state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 1. Edits a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the task object regardless of indexing."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTaskEdited() throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new ProjectList(model.getProjectList()), new Project(model.getProject()), new UserPrefs());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.commitProject();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getSelectedProject(),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                (Project) expectedModel.getProject()); //sync project list"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.commitProjectList();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // undo -\u003e reverts project back to previous state and filtered task list to show all tasks"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), taskToEdit);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // redo -\u003e edits same second task in unfiltered task list"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.redoProject();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_CS2101);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_CS2101);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_CS2101)));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_CP2106)));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 61,
      "arhjaye": 108,
      "andreathniah": 188
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/EditTaskDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_CP2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_CS2101);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(DESC_CS2101.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(DESC_CS2101.equals(DESC_CS2101));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(DESC_CP2106));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor editedCS2101 \u003d new EditTaskDescriptorBuilder(DESC_CS2101).withName(VALID_NAME_CP2106)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(editedCS2101));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101 \u003d new EditTaskDescriptorBuilder(DESC_CS2101).withDescription(VALID_DESCRIPTION_CP2106).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(editedCS2101));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101 \u003d new EditTaskDescriptorBuilder(DESC_CS2101).withDeadline(VALID_DEADLINE_CP2106).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(editedCS2101));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101 \u003d new EditTaskDescriptorBuilder(DESC_CS2101).withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(DESC_CS2101.equals(editedCS2101));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 23,
      "andreathniah": 31
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.TEACHING_FEEDBACK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"feedback tutorial\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(Arrays.asList(TEACHING_FEEDBACK, TUTORIAL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 2,
      "arhjaye": 27,
      "andreathniah": 21,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 1,
      "andreathniah": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectList(), getTypicalProject(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProjectList(), model.getProject(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS_TASK, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        showTaskAtIndex(model,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS_TASK, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "arhjaye": 21,
      "andreathniah": 8,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.undoProject();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.undoProject();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.redoProject();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.redoProject();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "arhjaye": 11,
      "andreathniah": 46
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectList(), new Project(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index lastTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertExecutionSuccess(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertExecutionSuccess(lastTaskIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getProject().getTaskList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * and checks that the model\u0027s selected task is set to the task at {@code index} in the filtered task list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_TASK_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(index.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.setSelectedTask(model.getFilteredTaskList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 15,
      "arhjaye": 51,
      "andreathniah": 18,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalProjectList(), getTypicalProject(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalProjectList(), getTypicalProject(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        model.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        expectedModel.setSelectedProject(model.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.undoProject();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "arhjaye": 9,
      "andreathniah": 15,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CP2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DESC_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CP2106;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106_MILESTONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CP2106_MILESTONE).withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CP2106 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2101 + NAME_DESC_CP2106 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CP2106 + DESC_DESC_CS2101 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CP2106 + DESC_DESC_CP2106 + DEADLINE_DESC_CS2101"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(CP2106_MILESTONE).withTags(VALID_TAG_CP2106)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CP2106 + DESC_DESC_CP2106 + DEADLINE_DESC_CP2106"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + TAG_DESC_CP2106, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2101_MILESTONE).withTags().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2101 + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.TASK_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CP2106 + DESC_DESC_CP2106 + DEADLINE_DESC_CP2106,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CP2106 + VALID_DESCRIPTION_CP2106 + DEADLINE_DESC_CP2106,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CP2106 + DESC_DESC_CP2106 + VALID_DEADLINE_CP2106,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CP2106 + VALID_DESCRIPTION_CP2106 + VALID_DEADLINE_CP2106,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESC_DESC_CP2106 + DEADLINE_DESC_CP2106"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + TAG_DESC_CP2106, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CP2106 + INVALID_DESC_DESC + DEADLINE_DESC_CP2106"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + TAG_DESC_CP2106, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CP2106 + DESC_DESC_CP2106 + INVALID_DEADLINE_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + TAG_DESC_CP2106, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CP2106 + DESC_DESC_CP2106 + DEADLINE_DESC_CP2106"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESC_DESC_CP2106 + INVALID_DEADLINE_DESC,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CP2106 + DESC_DESC_CP2106 + DEADLINE_DESC_CP2106"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                + TAG_DESC_CP2106, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 53,
      "arhjaye": 7,
      "andreathniah": 12,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 2,
      "andreathniah": 5,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CP2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DESC_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CS2101;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.TASK_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2101, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_CS2101, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_CS2101, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESC_DESC, Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS); // invalid deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // invalid description followed by valid deadline"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESC_DESC + DEADLINE_DESC_CS2101, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // valid description followed by invalid description."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // The test case for invalid description followed by valid description"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + DESC_DESC_CP2106 + INVALID_DESC_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CS2101 + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CS2101 + TAG_EMPTY + TAG_DESC_CP2106, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CS2101 + TAG_DESC_CP2106, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DESC_DESC + VALID_DEADLINE_CS2101,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101 + NAME_DESC_CS2101"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CS2101)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CS2101).withDeadline(VALID_DEADLINE_CS2101)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESC_DESC_CP2106 + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDeadline(VALID_DEADLINE_CS2101).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CS2101).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // deadline"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_CS2101).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101 + TAG_DESC_CS2101"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101 + TAG_DESC_CS2101"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DESC_DESC_CP2106 + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDeadline(VALID_DEADLINE_CP2106).withTags(VALID_TAG_CS2101, VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DESC_DESC + DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DESC_DESC + DEADLINE_DESC_CP2106 + DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDeadline(VALID_DEADLINE_CP2106).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 72,
      "arhjaye": 5,
      "andreathniah": 13,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_NAME \u003d \"test task\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"1-1-2011\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"test description\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"module1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"module2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_DEADLINE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(addressWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(emailWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 35,
      "arhjaye": 1,
      "andreathniah": 4,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/ProjectParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ProjectParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ProjectParser parser \u003d new ProjectParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                + TaskUtil.getTaskDetails(task));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(DeleteCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rachellim10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rachellim10"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachellim10": 61,
      "josephinetanadi": 11,
      "arhjaye": 4,
      "andreathniah": 34,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/project/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 2,
      "andreathniah": 5,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/project/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106_MILESTONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.testutil.ProjectListBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(new Project(), new Project(modelManager.getProject()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userPrefs.setProjectListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        userPrefs.setProjectListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setProjectFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setProjectListFilePath(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setProjectFilePath_validPath_setsProjectFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setProjectListFilePath(path);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(path, modelManager.getProjectListFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.hasTask(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_taskNotInProject_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(modelManager.hasTask(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_taskInProject_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(modelManager.hasTask(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void deleteTask_taskIsSelectedAndFirstTaskInFilteredTaskList_selectionCleared() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setSelectedTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.deleteTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void deleteTask_taskIsSelectedAndSecondTaskInFilteredTaskList_firstTaskSelected() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.addTask(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(Arrays.asList(CS2101_MILESTONE, CP2106_MILESTONE), modelManager.getFilteredTaskList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setSelectedTask(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.deleteTask(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(CS2101_MILESTONE, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_taskIsSelected_selectedTaskUpdated() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setSelectedTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task updatedAlice \u003d new TaskBuilder(CS2101_MILESTONE).withDescription(VALID_DESCRIPTION_CP2106).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setTask(CS2101_MILESTONE, updatedAlice);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setSelectedTask_taskNotInFilteredTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setSelectedTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setSelectedTask_taskInFilteredTaskList_setsSelectedTask() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(Collections.singletonList(CS2101_MILESTONE), modelManager.getFilteredTaskList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelManager.setSelectedTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(CS2101_MILESTONE, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectList projectList \u003d new ProjectListBuilder().withProject(CS2101).withProject(CP2106).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //Project CS2101_proj \u003d new Project(CS2101);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //ProjectList projectList \u003d new ProjectListBuilder().withProject(CS2101_proj).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Project project \u003d new ProjectBuilder().withTask(CS2101_MILESTONE).withTask(CP2106_MILESTONE).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project differentProject \u003d new Project();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(projectList, project, userPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(projectList, project, userPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectList, differentProject, userPrefs)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String[] keywords \u003d CS2101_MILESTONE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectList, project, userPrefs)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        differentUserPrefs.setProjectListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectList, project, differentUserPrefs)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 44,
      "andreathniah": 150
    }
  },
  {
    "path": "src/test/java/seedu/project/model/ProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ProjectTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final Project project \u003d new Project();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(Collections.emptyList(), project.getTaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void resetData_withValidReadOnlyProject_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project newData \u003d getTypicalProject();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(newData.getTaskList(), project.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(CS2101_MILESTONE).withDeadline(VALID_DEADLINE_CP2106)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(CS2101_MILESTONE, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ProjectStub newData \u003d new ProjectStub(newTasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.hasTask(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_taskNotInProject_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(project.hasTask(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_taskInProject_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        project.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(project.hasTask(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInProject_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        project.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(CS2101_MILESTONE).withDeadline(VALID_DEADLINE_CP2106)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(project.hasTask(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.getTaskList().remove(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.addListener(listener);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        project.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.addListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        project.removeListener(listener);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        project.addTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * A stub ReadOnlyProject whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static class ProjectStub implements ReadOnlyProject {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        private int index;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ProjectStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public int getIndex(int taskId) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 14,
      "arhjaye": 17,
      "andreathniah": 126
    }
  },
  {
    "path": "src/test/java/seedu/project/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void setProjectListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setProjectListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 2,
      "andreathniah": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/project/model/VersionedProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.FEEDBACK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.QUIZ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.TEACHING_FEEDBACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.VersionedProject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class VersionedProjectTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ReadOnlyProject projectWithTeachingFeedback \u003d new ProjectBuilder().withTask(FEEDBACK).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ReadOnlyProject projectWithFeedback \u003d new ProjectBuilder().withTask(TEACHING_FEEDBACK).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ReadOnlyProject projectWithQuiz \u003d new ProjectBuilder().withTask(QUIZ).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final ReadOnlyProject emptyProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void commit_singleProject_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertProjectListStatus(versionedProject, Collections.singletonList(emptyProject), emptyProject,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void commit_multipleProjectPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.commit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertProjectListStatus(versionedProject, Arrays.asList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback), projectWithTeachingFeedback, Collections.emptyList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void commit_multipleProjectPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.commit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertProjectListStatus(versionedProject, Collections.singletonList(emptyProject), emptyProject,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canUndo_multipleProjectPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(versionedProject.canUndo());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canUndo_multipleProjectPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(versionedProject.canUndo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canUndo_singleProject_returnsFalse() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.canUndo());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canUndo_multipleProjectPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.canUndo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canRedo_multipleProjectPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(versionedProject.canRedo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canRedo_multipleProjectPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(versionedProject.canRedo());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canRedo_singleProject_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.canRedo());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void canRedo_multipleProjectPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.canRedo());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void undo_multipleProjectPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.undo();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertProjectListStatus(versionedProject, Collections.singletonList(emptyProject), projectWithFeedback,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Collections.singletonList(projectWithTeachingFeedback));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void undo_multipleProjectPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.undo();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertProjectListStatus(versionedProject, Collections.emptyList(), emptyProject,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Arrays.asList(projectWithFeedback, projectWithTeachingFeedback));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void undo_singleProject_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertThrows(VersionedProject.NoUndoableStateException.class, versionedProject::undo);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void undo_multipleProjectPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertThrows(VersionedProject.NoUndoableStateException.class, versionedProject::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void redo_multipleProjectPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.redo();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertProjectListStatus(versionedProject, Arrays.asList(emptyProject, projectWithFeedback),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void redo_multipleProjectPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        versionedProject.redo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertProjectListStatus(versionedProject, Collections.singletonList(emptyProject), projectWithFeedback,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Collections.singletonList(projectWithTeachingFeedback));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void redo_singleProject_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertThrows(VersionedProject.NoRedoableStateException.class, versionedProject::redo);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void redo_multipleProjectPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(emptyProject, projectWithFeedback,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertThrows(VersionedProject.NoRedoableStateException.class, versionedProject::redo);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject versionedProject \u003d prepareProjectList(projectWithFeedback, projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject copy \u003d prepareProjectList(projectWithFeedback, projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(versionedProject.equals(copy));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(versionedProject.equals(versionedProject));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.equals(null));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.equals(1));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject differentProjectList \u003d prepareProjectList(projectWithTeachingFeedback, projectWithQuiz);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.equals(differentProjectList));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        VersionedProject differentCurrentStatePointer \u003d prepareProjectList(projectWithFeedback,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                projectWithTeachingFeedback);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedProject, 1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that {@code versionedProject} is currently pointing at"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedCurrentState}, states before"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code versionedProject#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedStatesBeforePointer}, and states after"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code versionedProject#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertProjectListStatus(VersionedProject versionedProject,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            List\u003cReadOnlyProject\u003e expectedStatesBeforePointer, ReadOnlyProject expectedCurrentState,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            List\u003cReadOnlyProject\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(new Project(versionedProject).getTaskList(), expectedCurrentState.getTaskList());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        while (versionedProject.canUndo()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.undo();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (ReadOnlyProject expectedProject : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            assertEquals(expectedProject.getTaskList(), new Project(versionedProject).getTaskList());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.redo();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (ReadOnlyProject expectedProject : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.redo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            assertEquals(expectedProject.getTaskList(), new Project(versionedProject).getTaskList());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(versionedProject.canRedo());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedProject.undo());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Creates and returns a {@code VersionedProject} with the {@code projectStates}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * added into it, and the {@code VersionedProject#currentStatePointer} at the"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * end of list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private VersionedProject prepareProjectList(ReadOnlyProject... projectStates) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(projectStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        VersionedProject versionedProject \u003d new VersionedProject(projectStates[0]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 1; i \u003c projectStates.length; i++) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.resetData(projectStates[i]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.commit();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return versionedProject;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Shifts the {@code versionedProject#currentStatePointer} by {@code count} to"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the left of its list."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedProject versionedProject, int count) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            versionedProject.undo();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 51,
      "arhjaye": 3,
      "andreathniah": 238
    }
  },
  {
    "path": "src/test/java/seedu/project/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/project/model/task/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // null deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // invalid deadlines"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // valid deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"1-1-2011\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"01-01-2011\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"1-01-2011\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 37
    }
  },
  {
    "path": "src/test/java/seedu/project/model/task/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"submit report\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"submit report to mr john doe at office lvl 4\")); // long description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 37
    }
  },
  {
    "path": "src/test/java/seedu/project/model/task/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .singletonList(\"Milestone\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Milestone Orbital\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Milestone\", \"Orbital\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Milestone Orbital\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Orbital\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Milestone Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"mILeStOnE\", \"OrBiTAl\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Milestone Orbital\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Milestone\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Milestone Orbital\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // Keywords match description and deadline, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1-1-2011\", \"labels\", \"project\", \"board\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Milestone\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDescription(\"config labels, milestone, project board\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDeadline(\"1-1-2011\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 16,
      "andreathniah": 3,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/project/model/task/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String invalidName \u003d \"*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        //assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 1,
      "arhjaye": 4,
      "andreathniah": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/project/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106_MILESTONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        task.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(CS2101_MILESTONE.isSameTask(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.isSameTask(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // different description and deadline -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withDeadline(VALID_DEADLINE_CP2106).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.isSameTask(editedCS2101Milestone));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.isSameTask(editedCS2101Milestone));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withDeadline(VALID_DEADLINE_CP2106)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(CS2101_MILESTONE.isSameTask(editedCS2101Milestone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(CS2101_MILESTONE.isSameTask(editedCS2101Milestone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // same name, same description, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(CS2101_MILESTONE.isSameTask(editedCS2101Milestone));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        LogicManager.setState(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(\"hello\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(CS2101_MILESTONE.getName().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(CS2101_MILESTONE.getDeadline().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(CS2101_MILESTONE.getTags().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        System.out.println(CS2101_MILESTONE.getDescription().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task cs2101MilestoneCopy \u003d new TaskBuilder(CS2101_MILESTONE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(CS2101_MILESTONE.equals(cs2101MilestoneCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(CS2101_MILESTONE.equals(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(CP2106_MILESTONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(editedCS2101Milestone));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withDescription(VALID_DESCRIPTION_CP2106).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(editedCS2101Milestone));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withDeadline(VALID_DEADLINE_CP2106).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(editedCS2101Milestone));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedCS2101Milestone \u003d new TaskBuilder(CS2101_MILESTONE).withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(CS2101_MILESTONE.equals(editedCS2101Milestone));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 44,
      "arhjaye": 9,
      "andreathniah": 51
    }
  },
  {
    "path": "src/test/java/seedu/project/model/task/UniqueTaskListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106_MILESTONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(uniqueTaskList.contains(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(uniqueTaskList.contains(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(CS2101_MILESTONE).withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(null, CS2101_MILESTONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(CS2101_MILESTONE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(CS2101_MILESTONE, CS2101_MILESTONE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(CS2101_MILESTONE, CS2101_MILESTONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedUniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(CS2101_MILESTONE).withDescription(VALID_DESCRIPTION_CP2106)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(CS2101_MILESTONE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(CS2101_MILESTONE, CP2106_MILESTONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedUniqueTaskList.add(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.setTask(CS2101_MILESTONE, CP2106_MILESTONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.remove(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.remove(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.setTasks((UniqueTaskList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedUniqueTaskList.add(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.setTasks((List\u003cTask\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        uniqueTaskList.add(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedUniqueTaskList.add(CP2106_MILESTONE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(CS2101_MILESTONE, CS2101_MILESTONE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.setTasks(listWithDuplicateTasks);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uniqueTaskList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 37,
      "andreathniah": 148
    }
  },
  {
    "path": "src/test/java/seedu/project/storage/JsonAdaptedTaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"112011\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#cs2101\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_NAME \u003d CS2101_MILESTONE.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d CS2101_MILESTONE.getDescription().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final String VALID_DEADLINE \u003d CS2101_MILESTONE.getDeadline().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //private static final int VALID_TASK_ID \u003d BENSON.getTaskId();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS2101_MILESTONE.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(CS2101_MILESTONE, task.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new JsonAdaptedTask(INVALID_NAME, VALID_DESCRIPTION, VALID_DEADLINE, VALID_TAGS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_DESCRIPTION, VALID_DEADLINE, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, INVALID_DESCRIPTION, VALID_DEADLINE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, null, VALID_DEADLINE, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, INVALID_DEADLINE, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, VALID_DEADLINE, invalidTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 28,
      "arhjaye": 4,
      "andreathniah": 17,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/project/storage/JsonProjectStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.FEEDBACK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.ReadOnlyProject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class JsonProjectStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonProjectStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void readProject_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        readProject(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private java.util.Optional\u003cReadOnlyProject\u003e readProject(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return new JsonProjectStorage(Paths.get(filePath)).readProject(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder) : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(readProject(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        readProject(\"notJsonFormatProject.json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // will be ignored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void readProject_invalidTaskProject_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        readProject(\"invalidTaskProject.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void readProject_invalidAndValidTaskProject_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        readProject(\"invalidAndValidTaskProject.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void readAndSaveProject_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempProject.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project original \u003d getTypicalProject();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonProjectStorage jsonProjectStorage \u003d new JsonProjectStorage(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        jsonProjectStorage.saveProject(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ReadOnlyProject readBack \u003d jsonProjectStorage.readProject(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(original.getTaskList(), new Project(readBack).getTaskList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        original.addTask(LECTURE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        original.removeTask(FEEDBACK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        jsonProjectStorage.saveProject(original, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        readBack \u003d jsonProjectStorage.readProject(filePath).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(original.getTaskList(), new Project(readBack).getTaskList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        original.addTask(TUTORIAL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        jsonProjectStorage.saveProject(original); // file path not specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        readBack \u003d jsonProjectStorage.readProject().get(); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(original.getTaskList(), new Project(readBack).getTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void saveProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        saveProject(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Saves {@code project} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void saveProject(ReadOnlyProject project, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            new JsonProjectStorage(Paths.get(filePath)).saveProject(project, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void saveProject_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        saveProject(new Project(), null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 8,
      "arhjaye": 3,
      "andreathniah": 111
    }
  },
  {
    "path": "src/test/java/seedu/project/storage/JsonSerializableProjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class JsonSerializableProjectTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableProjectTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksProject.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskProject.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskProject.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonSerializableProject dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE, JsonSerializableProject.class)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project projectFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Project typicalTasksProject \u003d TypicalTasks.getTypicalProject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(projectFromFile.getTaskList(), typicalTasksProject.getTaskList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonSerializableProject dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE, JsonSerializableProject.class)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonSerializableProject dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .readJsonFile(DUPLICATE_TASK_FILE, JsonSerializableProject.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        thrown.expectMessage(JsonSerializableProject.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 6,
      "arhjaye": 1,
      "andreathniah": 46
    }
  },
  {
    "path": "src/test/java/seedu/project/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        userPrefs.setProjectListFilePath(Paths.get(\"projectlist.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arhjaye": 11,
      "andreathniah": 4,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/project/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalProjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonProjectListStorage projectListStorage \u003d new JsonProjectListStorage(getTempFilePath(\"pl\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        storageManager \u003d new StorageManager(projectListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * properly wired to the {@link JsonUserPrefsStorage} class. More extensive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * testing of UserPref saving/reading is done in {@link"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void projectListReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * properly wired to the {@link JsonProjectStorage} class. More extensive"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * testing of UserPref saving/reading is done in {@link JsonProjectStorageTest}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectList original \u003d getTypicalProjectList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        storageManager.saveProjectList(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        ReadOnlyProjectList retrieved \u003d storageManager.readProjectList().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(original, new ProjectList(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public void getProjectListFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertNotNull(storageManager.getProjectListFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "arhjaye": 10,
      "andreathniah": 58
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor.setDeadline(task.getDeadline());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public EditTaskDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 12,
      "arhjaye": 1,
      "andreathniah": 64
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/ProjectBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"TYPICAL\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Initializes the ProjectBuilder with the data of {@code projectToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        name \u003d projectToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        tasks \u003d projectToCopy.getTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the {@code Name} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Parses the {@code task} into a {@code List\u003cTask\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectBuilder withTask(Task ... task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(Arrays.asList(task));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Project(name, tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 32,
      "andreathniah": 22
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/ProjectListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * A utility class to help with building ProjectList objects. Example usage:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " * {@code Project ab \u003d new ProjectListBuilder().withProject(\"CS2101 Project\").build();}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "public class ProjectListBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private List\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectListBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectListBuilder(ProjectList projectListToCopy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        projects \u003d projectListToCopy.getProjectList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Adds a new {@code Task} to the {@code Project} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectListBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.projects \u003d new ArrayList\u003c\u003e(Arrays.asList(project));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public ProjectList build() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new ProjectList(projects);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 38
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Milestone edit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"config labels, milestone, project board edit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"1-1-2011\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        deadline \u003d taskToCopy.getDeadline();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public TaskBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new Task(name, description, deadline, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 18,
      "arhjaye": 3,
      "andreathniah": 59
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        sb.append(PREFIX_DEADLINE + task.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_DEADLINE).append(deadline.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 8,
      "andreathniah": 52
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "andreathniah": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/project/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CP2106;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CP2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_CP2106;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_CS2101;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task GROUP_MEETING \u003d new TaskBuilder().withName(\"Group meeting\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"find teammates for group discussion on presentation\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withTags(\"TYPICAL\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task REPORT_SUBMISSION \u003d new TaskBuilder().withName(\"Report submission\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"submit report to John Doe\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withTags(\"TYPICAL\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task FEEDBACK \u003d new TaskBuilder().withName(\"Feedback\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"submit feedback\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task TEACHING_FEEDBACK \u003d new TaskBuilder().withName(\"Teaching Feedback\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"submit teaching feedback via portal\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").withTags(\"TYPICAL\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task PRINT \u003d new TaskBuilder().withName(\"Print slides\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"print chapter 4 slides\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task QUIZ \u003d new TaskBuilder().withName(\"Complete quiz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"attempt quiz at portal, multiple attempts possible\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task CONSULTATION \u003d new TaskBuilder().withName(\"Go for consultation\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"find mr john doe for consultation at office 04-15\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task LECTURE \u003d new TaskBuilder().withName(\"Attend lecture\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"attend lecture at utown lecture theatre\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task TUTORIAL \u003d new TaskBuilder().withName(\"Attend tutorial\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(\"attend tutorial at utown classroom\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDeadline(\"1-1-2011\").withTags(\"TUTORIAL\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public static final Project SAMPLE1 \u003d new ProjectBuilder().withTask(GROUP_MEETING, PRINT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            TEACHING_FEEDBACK, CONSULTATION, LECTURE, TUTORIAL).withName(\"Sample Project 1\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Project SAMPLE2 \u003d new ProjectBuilder().withTask(REPORT_SUBMISSION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withName(\"Sample Project 2\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task CS2101_MILESTONE \u003d new TaskBuilder().withName(VALID_NAME_CS2101)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2101).withDeadline(VALID_DEADLINE_CS2101)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Task CP2106_MILESTONE \u003d new TaskBuilder().withName(VALID_NAME_CP2106)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CP2106).withDeadline(VALID_DEADLINE_CP2106)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Project CS2101 \u003d new ProjectBuilder().withTask(GROUP_MEETING)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withName(VALID_PROJECT_NAME_CS2101).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final Project CP2106 \u003d new ProjectBuilder().withTask(CP2106_MILESTONE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            .withName(VALID_PROJECT_NAME_CP2106).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static final String KEYWORD_MATCHING_TEST \u003d \"Feedback\"; // A keyword that matches Feedback"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns an {@code ProjectList} with the typical projects."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static ProjectList getTypicalProjectList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ProjectList pl \u003d new ProjectList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "            pl.addProject(project);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return pl;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns an {@code Project} with all the typical tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static Project getTypicalProject() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Project p \u003d new Project();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        p.setName(\"TYPICAL\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            p.addTask(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GROUP_MEETING, REPORT_SUBMISSION, FEEDBACK, TEACHING_FEEDBACK, PRINT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                QUIZ, CONSULTATION));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 74,
      "arhjaye": 5,
      "andreathniah": 33
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private SimpleObjectProperty\u003cProject\u003e selectedProject \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedProject, selectedTask));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // associated web page of a task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        guiRobot.interact(() -\u003e selectedTask.set(CS2101_MILESTONE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        URL expectedTaskUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + CS2101_MILESTONE.getName().fullName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedTaskUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "arhjaye": 3,
      "andreathniah": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 5,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A GUI unit test class for Project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.storage.JsonProjectListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.JsonProjectStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        JsonProjectListStorage jsonProjectListStorage \u003d new JsonProjectListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        JsonProjectStorage jsonProjectStorage \u003d new JsonProjectStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        StorageManager storageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        storageManager \u003d new StorageManager (jsonProjectListStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "andreathniah": 7,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final int INITIAL_TOTAL_TASKS \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private final ProjectList projectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, projectList, INITIAL_TOTAL_TASKS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // after project is updated"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        guiRobot.interact(() -\u003e projectList.addProject(CS2101));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * and the sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 5,
      "arhjaye": 2,
      "andreathniah": 8,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/TaskCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task taskWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCardDisplay(taskCard, taskWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task taskWithTags \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskCard \u003d new TaskCard(taskWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCardDisplay(taskCard, taskWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same task, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskCard copy \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(taskCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(taskCard.equals(taskCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(taskCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(taskCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // different task, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // same task, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(task, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // verify task details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCardDisplaysTask(expectedTask, taskCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 72
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/TaskListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class TaskListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private TaskListPanelHandle taskListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Task expectedTask \u003d TYPICAL_TASKS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            assertCardDisplaysTask(expectedTask, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void selection_modelSelectedTaskChanged_selectionChanges() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task secondTask \u003d TYPICAL_TASKS.get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        guiRobot.interact(() -\u003e selectedTask.set(secondTask));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        TaskCardHandle expectedTask \u003d taskListPanelHandle.getTaskCardHandle(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskCardHandle selectedTask \u003d taskListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCardEquals(expectedTask, selectedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Verifies that creating and deleting large number of tasks in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code TaskListPanel} requires lesser than"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }, \"Creation and deletion of task cards exceeded time limit\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns a list of tasks containing {@code taskCount} tasks that is used to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * populate the {@code TaskListPanel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private ObservableList\u003cTask\u003e createBackingList(int taskCount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Description description \u003d new Description(\"abcd\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"1-1-2011\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            Task task \u003d new Task(name, description, deadline, Collections.emptySet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            backingList.add(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Initializes {@code taskListPanelHandle} with a {@code TaskListPanel} backed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * by {@code backingList}. Also shows the {@code Stage} that displays only"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code TaskListPanel}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        TaskListPanel taskListPanel \u003d new TaskListPanel(backingList, selectedTask, selectedTask::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        uiPartRule.setUiPart(taskListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskListPanelHandle \u003d new TaskListPanelHandle("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                getChildNode(taskListPanel.getRoot(), TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 10,
      "arhjaye": 1,
      "andreathniah": 91
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import guitests.guihandles.ProjectCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import guitests.guihandles.ProjectListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedProject}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void assertCardDisplaysProject(Project expectedProject, ProjectCardHandle actualCard) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedProject.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedTask.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedTask.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(expectedTask.getDeadline().value, actualCard.getDeadline());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedTask.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Asserts that the list in {@code projectListPanelHandle} displays the details of {@code projects} correctly and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void assertListMatching(ProjectListPanelHandle projectListPanelHandle, Project... projects) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            projectListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            assertCardDisplaysProject(projects[i], projectListPanelHandle.getProjectCardHandle(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Asserts that the list in {@code project} displays the details of {@code projects} correctly and"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void assertListMatching(ProjectListPanelHandle projectListPanelHandle, List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertListMatching(projectListPanelHandle, projects.toArray(new Project[0]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int numberOfPeople \u003d taskListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 32,
      "arhjaye": 4,
      "andreathniah": 67
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/project/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "package seedu.project.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreathniah": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CP2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DESC_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CP2106;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DEADLINE_CS2101;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106_MILESTONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.GROUP_MEETING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.LECTURE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.QUIZ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class AddCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: add a project to a non-empty project list, command with leading spaces and trailing spaces -\u003e added */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*        Project projectToAdd \u003d CS2101;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_CS2101_PROJECT + \"  \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, projectToAdd);*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: select a project */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        selectProject(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add a task without tags to a non-empty project, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task toAdd \u003d CS2101_MILESTONE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_CS2101 + \"  \" + DESC_DESC_CS2101 + \"   \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CS2101 + \"   \" + TAG_DESC_CS2101 + \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: undo adding CS2101_MILESTONE to the list -\u003e CS2101_MILESTONE deleted */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: redo adding CS2101_MILESTONE to the list -\u003e CS2101_MILESTONE added again */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);*/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add a task with all fields same as another task in the project except name -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        toAdd \u003d new TaskBuilder(CS2101_MILESTONE).withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CP2106 + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add to empty project -\u003e added */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(CS2101_MILESTONE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add a task with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        toAdd \u003d CP2106_MILESTONE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_CP2106 + DEADLINE_DESC_CP2106 + NAME_DESC_CP2106"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add a task, missing tags -\u003e added */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(LECTURE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: filters the task list before adding -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(GROUP_MEETING);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* ------------------------ Perform add operation while a task card is selected --------------------------- */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: selects first card in the task list, add a task -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(QUIZ);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add a duplicate task -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(LECTURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: add a duplicate task except with different description -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        toAdd \u003d new TaskBuilder(LECTURE).withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: add a duplicate task except with different deadline -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        toAdd \u003d new TaskBuilder(LECTURE).withDeadline(VALID_DEADLINE_CS2101).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: add a duplicate task except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(LECTURE) + \" \" + PREFIX_TAG.getPrefix() + \"CS2101\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: missing description -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2101 + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: missing deadline -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2101 + DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        command \u003d \"adds \" + TaskUtil.getTaskDetails(toAdd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2101 + INVALID_DESC_DESC + DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: invalid deadline -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2101 + DESC_DESC_CS2101 + INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2101 + DESC_DESC_CS2101 + DEADLINE_DESC_CS2101"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertCommandSuccess(Task toAdd) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(TaskUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertCommandSuccess(String command, Task toAdd) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.addTask(toAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS_TASK, toAdd);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * For the sake of it"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void assertCommandSuccess(String command, Project toAdd) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.addProject(toAdd);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS_PROJECT, toAdd);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 84,
      "arhjaye": 11,
      "-": 104,
      "andreathniah": 44
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class ClearCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        selectProject(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: clear non-empty project, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.getSelectedProject().clearTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \", expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: undo clearing project -\u003e original project restored */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: redo clearing project -\u003e cleared */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.getSelectedProject().clearTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: selects first card in task list and clears project -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original project"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: filters the task list before clearing -\u003e entire project cleared */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original project"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: clear empty project -\u003e cleared */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 27,
      "arhjaye": 4,
      "-": 61,
      "andreathniah": 20
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TestUtil.getTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class DeleteCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        selectProject(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: delete the first task in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TASK.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task deletedTask \u003d removeTask(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: delete the last task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        modelBeforeDeletingLast.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index lastTaskIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(lastTaskIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: undo deleting the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: redo deleting the last task in the list -\u003e last task deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        removeTask(modelBeforeDeletingLast, lastTaskIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: delete the middle task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index middleTaskIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(middleTaskIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: filtered task list, delete index within bounds of project and task list -\u003e deleted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c expectedModel.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(index);*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: filtered task list, delete index within bounds of project but out of bounds of task list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int invalidIndex \u003d getModel().getProject().getTaskList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);*/"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* --------------------- Performing delete operation while a task card is selected ------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: delete the selected task -\u003e task list panel selects the task before the deleted task */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectTask(selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deletedTask \u003d removeTask(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                getModel().getProject().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Removes the {@code Task} at the specified {@code index} in {@code model}\u0027s project."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @return the removed task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private Task removeTask(Model model, Index index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task targetTask \u003d getTask(model, index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.deleteTask(targetTask);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return targetTask;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Deletes the task at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task deletedTask \u003d removeTask(expectedModel, toDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 24,
      "arhjaye": 3,
      "-": 126,
      "andreathniah": 44
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CP2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DEADLINE_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CP2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.DESC_DESC_CS2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_DESC_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CP2106;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CP2106;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.CommandTestUtil.VALID_TAG_CP2106;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CP2106_MILESTONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.CS2101_MILESTONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.Messages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import seedu.project.model.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TaskUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class EditCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * ----------------- Performing edit operation while an unfiltered list is being"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * shown ----------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        selectProject(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: edit all fields, command with leading spaces, trailing spaces and"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * multiple spaces between each field -\u003e edited"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_CP2106"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + \"  \" + DESC_DESC_CP2106 + \" \" + DEADLINE_DESC_CP2106 + \" \" + TAG_DESC_CP2106 + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(CP2106_MILESTONE).withTags(VALID_TAG_CP2106).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: undo editing the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: redo editing the last task in the list -\u003e last task edited again */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model.setTask(getModel().getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: edit a task with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CP2106 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, index, CP2106_MILESTONE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: edit a task with new values same as another task\u0027s values but with"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * different name -\u003e edited"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(getModel().getProject().getTaskList().contains(CP2106_MILESTONE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertNotEquals(getModel().getFilteredTaskList().get(index.getZeroBased()), CP2106_MILESTONE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CS2101 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedTask \u003d new TaskBuilder(CP2106_MILESTONE).withName(VALID_NAME_CS2101).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        editedTask \u003d new TaskBuilder(taskToEdit).withTags().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * ------------------ Performing edit operation while a filtered list is being"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * shown ------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: filtered task list, edit index within bounds of project and task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * list -\u003e edited"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_CP2106;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        editedTask \u003d new TaskBuilder(taskToEdit).withName(VALID_NAME_CP2106).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: filtered task list, edit index within bounds of project but out of"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * bounds of task list -\u003e rejected"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int invalidIndex \u003d getModel().getProject().getTaskList().size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_CP2106,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * --------------------- Performing edit operation while a task card is selected"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * --------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: selects first card in the task list, edit a task -\u003e edited, card"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * selection remains unchanged but browser url changes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectTask(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CS2101 + DESC_DESC_CS2101"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CS2101 + TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        // browser\u0027s url is updated to reflect the new task\u0027s name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, index, CS2101_MILESTONE, index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * --------------------------------- Performing invalid edit operation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * --------------------------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_CP2106,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_CP2106,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_CP2106,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_CP2106,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.TASK_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_DESC_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: invalid deadline -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: edit a task with new values same as another task\u0027s values -\u003e rejected"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        executeCommand(TaskUtil.getAddCommand(CP2106_MILESTONE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertTrue(getModel().getProject().getTaskList().contains(CP2106_MILESTONE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(getModel().getFilteredTaskList().get(index.getZeroBased()).equals(CP2106_MILESTONE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CP2106 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: edit a task with new values same as another task\u0027s values but with"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * different tags -\u003e rejected"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CP2106 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: edit a task with new values same as another task\u0027s values but with"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * different deadline -\u003e rejected"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CP2106 + DESC_DESC_CP2106"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CS2101 + TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: edit a task with new values same as another task\u0027s values but with"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "         * different description -\u003e rejected"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CP2106 + DESC_DESC_CS2101"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                + DEADLINE_DESC_CP2106 + TAG_DESC_CP2106;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Performs the same verification as"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code assertCommandSuccess(String, Index, Task, Index)} except that the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Task, Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Task editedTask) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedTask, null);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Performs the same verification as"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code assertCommandSuccess(String, Model, String, Index)} and in"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the task"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * at index {@code toEdit} being updated to values specified"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code editedTask}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Task editedTask,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        expectedModel.setSelectedProject(expectedModel.getFilteredProjectList().get(0));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, expectedModel.getSelectedProject().getTaskList());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.setTask(expectedModel.getFilteredTaskList().get(toEdit.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Performs the same verification as"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 2. Asserts that the result display box displays"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * depending on the card at {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Model)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /*        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 2. Asserts that result display box displays"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Model)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        //assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 91,
      "arhjaye": 9,
      "-": 117,
      "andreathniah": 118
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.FEEDBACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.QUIZ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.TEACHING_FEEDBACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class FindCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find multiple tasks in project, command with leading spaces and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * trailing spaces -\u003e 2 tasks found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEST + \"   \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, FEEDBACK, TEACHING_FEEDBACK); // both task contains feedback"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: repeat previous find command where task list is displaying the tasks we"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * are finding -\u003e 2 tasks found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find task where task list is not displaying the task we are finding -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * 1 task found"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Quiz\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, QUIZ);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: find multiple tasks in project, 2 keywords -\u003e 2 tasks found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Teaching Feedback\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, TEACHING_FEEDBACK, FEEDBACK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find multiple tasks in project, 2 keywords in reversed order -\u003e 2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * tasks found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Feedback Teaching\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find multiple tasks in project, 2 keywords with 1 repeat -\u003e 2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * tasks found"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Teaching Feedback Teaching\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find multiple tasks in project, 2 matching keywords and 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * non-matching keyword -\u003e 2 tasks found"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Teaching Feedback NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find same tasks in project after deleting 1 of them -\u003e 1 task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * found"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(getModel().getProject().getTaskList().contains(FEEDBACK));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, TEACHING_FEEDBACK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find task in project, keyword is same as name but of different"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * case -\u003e 1 task found"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" FeEdBaCk\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find task in project, keyword is substring of name -\u003e 0 tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * found"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Fee\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * Case: find task in project, name is substring of keyword -\u003e 0 tasks"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         * found"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Feedbacks\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: find task not in project -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Tutorial\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: find deadline of task in project -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + TEACHING_FEEDBACK.getDeadline().value;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        /* Case: find description of task in project -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + TUTORIAL.getDescription().value;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: find tags of task in project -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(TUTORIAL.getTags());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: find while a task is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        showAllTasks();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        selectTask(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertFalse(getTaskListPanel().getHandleToSelectedCard().getName().equals(TEACHING_FEEDBACK"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .getName().fullName));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Teaching\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, TEACHING_FEEDBACK);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: find task in empty project -\u003e 0 tasks found */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        ModelHelper.setFilteredTaskList(expectedModel, TEACHING_FEEDBACK);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        command \u003d \"FiNd Teaching\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * string, the result display box displays"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code Messages#MESSAGE_TASKS_LISTED_OVERVIEW} with the number of people in"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the filtered list, and the model related components equal to"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedModel}. These verifications are done by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * the default style class, and the selected card updated accordingly, depending"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * on {@code cardStatus}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *      Model)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                expectedModel.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code command}, the result display box displays"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * current model. These verifications are done by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * unchanged, and the command box has the error style."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     *      Model)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 36,
      "arhjaye": 5,
      "-": 106,
      "andreathniah": 79
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class HelpCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        getTaskListPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 3,
      "arhjaye": 9,
      "-": 92,
      "andreathniah": 9
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static final Predicate\u003cProject\u003e PREDICATE_MATCHING_NO_PROJECTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void setFilteredProjectList(Model model, List\u003cProject\u003e toDisplay) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        Optional\u003cPredicate\u003cProject\u003e\u003e predicate \u003d toDisplay.stream().map(ModelHelper::getPredicateMatching)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                .reduce(Predicate::or);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        model.updateFilteredProjectList(predicate.orElse(PREDICATE_MATCHING_NO_PROJECTS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see ModelHelper#setFilteredProjectList(Model, List)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void setFilteredProjectList(Model model, Project... toDisplay) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setFilteredProjectList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void setFilteredTaskList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d toDisplay.stream().map(ModelHelper::getPredicateMatching)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "                .reduce(Predicate::or);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_TASKS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * @see ModelHelper#setFilteredTaskList(Model, List)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public static void setFilteredTaskList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        setFilteredTaskList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Task} equals to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code other}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    private static Predicate\u003cProject\u003e getPredicateMatching(Project other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return project -\u003e project.equals(other);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return task -\u003e task.equals(other);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 23,
      "-": 26,
      "andreathniah": 10
    }
  },
  {
    "path": "src/test/java/systemtests/ProjectSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "import guitests.guihandles.ProjectListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.BrowserPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreathniah"
        },
        "content": " * A system test class for Project, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public abstract class ProjectSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialProjectList, getProjectListSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getProjectListSaveLocation()}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected ProjectList getInitialProjectList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        return TypicalTasks.getTypicalProjectList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Returns the directory of the project list file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected Path getProjectListSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    public ProjectListPanelHandle getProjectListPanel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        return mainWindowHandle.getProjectListPanel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        return mainWindowHandle.getTaskListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        mainWindowHandle.refreshMainWindow();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Displays all tasks in the project."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    protected void showAllTasks() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(getModel().getProject().getTaskList().size(), getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Displays all tasks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    protected void showTasksWithName(String keyword) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getProject().getTaskList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected void selectProject(Index index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(index.getZeroBased(), getProjectListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    protected void selectTask(Index index) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Deletes all tasks in the project."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    protected void deleteAllTasks() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(0, getModel().getProject().getTaskList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same task objects as {@code expectedModel}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * and the task list panel displays the tasks in the model correctly."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                                                            Model expectedModel) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertEquals(new ProjectList(expectedModel.getProjectList()), testApp.readStorageProjectList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        getTaskListPanel().rememberSelectedTaskCard();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(getTaskListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the task in the task list panel at"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        getTaskListPanel().navigateToCard(getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        String selectedCardName \u003d getTaskListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the task list panel remain unchanged."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertFalse(getTaskListPanel().isSelectedTaskCardChanged());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertListMatching(getProjectListPanel(), getModel().getFilteredProjectList());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getProjectListSaveLocation()).toString(),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 19,
      "arhjaye": 6,
      "-": 235,
      "andreathniah": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ProjectList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class SampleDataTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Returns null to force test app to load data of the file in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "     * {@code getProjectListSaveLocation()}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected ProjectList getInitialProjectList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    protected Path getProjectListSaveLocation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "    public void project_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertListMatching(getTaskListPanel(), expectedList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "arhjaye": 5,
      "-": 37,
      "andreathniah": 9
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.logic.commands.SelectCommand.MESSAGE_SELECT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import static seedu.project.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import static seedu.project.testutil.TypicalTasks.KEYWORD_MATCHING_TEST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "public class SelectCommandSystemTest extends ProjectSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arhjaye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     * Just for the sake of it"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: select the first card in the task list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: select the last card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        Index taskCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + taskCount.getOneBased();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertCommandSuccess(command, taskCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: select the middle card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: filtered task list, select index within bounds of project but out of bounds of task list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        showTasksWithName(KEYWORD_MATCHING_TEST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int invalidIndex \u003d getModel().getProject().getTaskList().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: filtered task list, select index within bounds of project and task list -\u003e selected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arhjaye"
        },
        "content": "                MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        /* Case: select from empty project -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected task.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                MESSAGE_SELECT_TASK_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getTaskListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * @see ProjectSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 11,
      "arhjaye": 8,
      "-": 108,
      "andreathniah": 32
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "import seedu.project.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "import seedu.project.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyProjectList\u003e projectList, Path projectListFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephinetanadi"
        },
        "content": "                    new TestApp(projectList, projectListFileLocation));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "     * {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josephinetanadi": 4,
      "-": 69,
      "andreathniah": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003c?import seedu.project.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "andreathniah": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreathniah"
        },
        "content": "\u003cfx:root type\u003d\"seedu.project.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "andreathniah": 1
    }
  }
]
