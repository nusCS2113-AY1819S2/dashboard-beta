[
  {
    "path": ".gitignore",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Generated class files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "*.class"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# Default data file"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "addressbook.txt"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Package Files #"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "*.jar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "*.war"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "*.ear"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Idea files"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".idea/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "out/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "test/data/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/bin/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/data/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "publish.sh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".gradle/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "build/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "PlanMySem.txt"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "PlanMySem.ics"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "# Reposense config file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/config.json"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "KeyStorage.jceks"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 3,
      "-": 24,
      "macchazuki": 3
    }
  },
  {
    "path": ".travis.yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "language: java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "matrix:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  include:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    - jdk: oraclejdk9"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "script: \u003e-"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  travis_retry ./gradlew clean test coverage coveralls asciidoctor checkstyleMain checkstyleTest"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "deploy:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  skip_cleanup: true"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  provider: script"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  script: bash ./config/travis/deploy_github_pages.sh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  on:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    branch: master"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "addons:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  apt:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    packages:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      - oracle-java9-installer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "before_cache:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  directories:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    - $HOME/.gradle/caches/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    - $HOME/.gradle/wrapper/"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 11,
      "-": 17
    }
  },
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d PlanMySem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-T08-3/main[image:https://travis-ci.org/CS2113-AY1819S2-T08-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://ci.appveyor.com/project/seanieyap/main-r8jp5[image:https://ci.appveyor.com/api/projects/status/nmi13f89dmx9yasg?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://app.netlify.com/sites/planmysem/deploys[image:https://api.netlify.com/api/v1/badges/6c19b45b-dbdd-4eff-afe2-200356d6ebb4/deploy-status[Build Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S2-T08-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S2-T08-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://www.codacy.com/app/CS2113T-T08-3/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2113-AY1819S2-T08-3/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/90f57d16da5049858ef67b6eaaf692f2[Codacy Badge]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://opensource.org/licenses/MIT[image:https://img.shields.io/badge/License-MIT-yellow.svg[License: MIT]]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* is a CLI (Command Line Interface) scheduling/calendar application that caters to NUS students and staff who prefer to use a desktop application for managing their schedule/calendar."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* automatically creates a planner that is synchronised according to the NUS academic calendar for the current semester and enables easy creation, editing and deleting of items."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Special weeks such as recess week and reading week are taken into account within our unique recursion system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Items can then be efficiently managed via the intuitive tagging system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* is optimized for those who prefer to work with a Command Line Interface (CLI) and/or are learning to work more efficiently with CLI tools. Additionally, unlike traditional calendar/scheduling applications, *PlanMySem* utilizes minimal resources on the user’s machine while still allowing the user to view their schedules swiftly and efficiently."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributors"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Marcus Phua"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Julian Lim"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Lim Ding Heng"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Sean Yap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* PlanMySem is built upon an https://github.com/se-edu/addressbook-level3[AddressBook-Level3] Application created by the https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Some parts of this sample application was inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Us"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-T08-3/main/issues[issue tracker]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 24,
      "-": 23
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"macchazuki\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"JUL...REN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"macchazuki\", \"Julian\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"dingheng4448\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"LIM...ENG\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"dingheng4448\", \"Lim Ding Heng\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"marcus-pzj\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"MAR...JIE\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"marcus-pzj\", \"Marcus Phua Zheng Jie\", \"marcus_pzj\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"seanieyap\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"SEA...ONG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"seanieyap\", \"Sean Yap\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 25
    }
  },
  {
    "path": "appveyor.yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# AppVeyor configuration file"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# For more details see https://www.appveyor.com/docs/build-configuration/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Call on gradle to build and run tests"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# --no-daemon: Prevent the daemon from launching to prevent file-in-use errors"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#     when we cache the ~/.gradle directory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "build_script:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  - gradlew.bat --no-daemon assemble checkstyleMain checkstyleTest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "test_script:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  - gradlew.bat --no-daemon headless test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "environment:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  JAVA_HOME: C:\\Program Files\\Java\\jdk9  # Use 64-bit Java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Files/folders to preserve between builds to speed them up"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "  - C:\\Users\\appveyor\\.gradle"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 18
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "mainClassName \u003d \u0027planmysem.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    checkstyleTest.enabled \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    archiveName \u003d \u0027PlanMySem.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u0027site-name\u0027         : \u0027PlanMySem\u0027,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u0027site-githuburl\u0027    : \u0027https://github.com/CS2113-AY1819S2-T08-3/main\u0027,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027test\u0027, \u0027asciidoctor\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 89,
      "-": 101
    }
  },
  {
    "path": "config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"macchazuki\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"JUL...REN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"macchazuki\", \"Julian\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"dingheng4448\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"LIM...ENG\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"dingheng4448\", \"Lim Ding Heng\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"marcus-pzj\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"MAR...JIE\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"marcus-pzj\", \"Marcus Phua Zheng Jie\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"githubId\": \"seanieyap\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"displayName\": \"SEA...ONG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "      \"authorNames\": [\"seanieyap\", \"Sean Yap\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 25
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                      value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"UpperEll\"/\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                   e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                   e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "             a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "             a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                 This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "              We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 425
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        \"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 9
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 11
    }
  },
  {
    "path": "coveralls.yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "service_name: travis-pro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "repo_token: V29G75vwjFA8pJVFwyYHeE10Dt4U2ntr0"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "PlanMySem - A CLI (Command Line Interface) scheduling/calendar application that targets NUS students and staff who prefer to use a desktop application for managing their schedule/calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Sean Yap"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::seanieyap.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{empty}[https://github.com/seanieyap[Github]] [\u003c\u003cseanieyap#, Portfolio\u003e\u003e] [https://seanieyap.com[Personal Website]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Responsibilities: Add, Edit, Delete Commands and handling of Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Marcus Phua"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::marcus-pzj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{empty}[https://github.com/marcus-pzj[Github]] [\u003c\u003cmarcus-pzj#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Responsibilities: List, Find, Undo, Redo, and History commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Julian Lim"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::macchazuki.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{empty}[https://github.com/macchazuki[Github]] [\u003c\u003cmacchazuki#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Responsibilities: Encryption, Decryption, Import and Export feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Lim Ding Heng"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::dingheng4448.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{empty}[https://github.com/dingheng4448[Github]] [\u003c\u003cdingheng4448#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Responsibilities: View day, week, month commands and Initialization of calendars."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 44,
      "marcus-pzj": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-T08-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Email us* : You can also reach us at `seany [at] nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 7
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "﻿\u003d PlanMySem - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":caution-caption: :fire:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "By: `T08-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Welcome to *PlanMySem*!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*PlanMySem* is a text-based (Command Line Interface) scheduling/calendar application that caters to NUS students and staff who prefer to use a desktop application for managing their schedule/calendar."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*PlanMySem* automatically creates a planner that is synchronised according to the NUS academic calendar for the current semester and enables easy creation, editing and deleting of items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Special weeks such as recess week and reading week are taken into account within our unique recursion system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Items can then be efficiently managed via the intuitive tagging system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*PlanMySem* is optimized for those who prefer to work with a Command Line Interface (CLI) and/or are learning to work more efficiently with CLI tools. Additionally, unlike traditional calendar/scheduling applications, *PlanMySem* utilizes minimal resources on the user’s machine while still allowing the user to view their schedules swiftly and efficiently."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[[about]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d About this Developer Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This developer guide provides a detailed documentation on the implementation of all the various features *PlanMySem*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "offers. To navigate between the different sections, you could use the table of contents above."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "For ease of communication, this document will refer to lessons/activities/events/appointments that you might add into"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "the planner as _slots_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Additionally, throughout this developer guide, there will be various icons used as described below."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a tip. Follow these suggested tips to make your life much simpler when using *PlanMySem*!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a note. These are things for you to take note of when using *PlanMySem*."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a sign-post dictating important information. These are information that you will surely need to know to use"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*PlanMySem* efficiently."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a sign-post informing caution. Please take note of these items and exercise some care."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a rule. Ensure that you follow these rules to ensure proper usage of *PlanMySem*."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Run the `PlanMySem.Main` class (right-click the `Main` class and click `Run Main.main()`) and try executing a few commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ". Run all the tests (right-click the `test` folder, and click `Run \u0027All Tests\u0027`) and ensure that they pass"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ". Open the `StorageFile` file and check for any code errors"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Open link:{repoURL}/src/planmysem/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Run the `PlanMySem.Main` and try a few commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "After forking the repo, the documentation will still have the *PlanMySem* branding and refer to the `https://github.com/CS2113-AY1819S2-T08-3/main` repo."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `https://github.com/CS2113-AY1819S2-T08-3/main`), you should do the following:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::ArchitectureDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/planmysem/Main.java[`Main`]. It is responsible for,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c\u003cDesign-Common,*`Common`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The following class plays an important role at the architecture level, the App consists of four components:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `Logic.java` class."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//.Class Diagram of overall application."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::OverallClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::SDforDeleteSlot.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UiComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*API* : link:{repoURL}/src/planmysem/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The UI consists of a `MainWindow` that is made up of just a TextField `commandInput` and a TextArea `outputConsole`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This application is mainly a text-based application, hence there are not many components here."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For example, the layout of the link:{repoURL}/src/planmysem/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Executes user commands read from `commandInput`, using the `Logic` component."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Displays `commandResult` to the user via `outputConsole`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::LogicComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "link:{repoURL}/src/planmysem/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "the `Logic` component,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".  Uses the `parser` class to parse the user command."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "**  This results in a `Command` object which is executed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a _Slot_)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to `Ui`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to display results, such as displaying help to the user."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::SDforDeleteSlot.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Overall structure of the Model Component"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::ModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*API* : link:{repoURL}/src/planmysem/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Model` component"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* stores the Planner data."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*API* : link:{repoURL}/src/planmysem/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Storage` component saves the Planner data in XML format and read it back."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This functionality is provided via Java Architecture for XML Binding (JAXB), a software framework that maps Java classes to XML representations."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In summary, JAXB allows storing and retrieving data in memory in any XML format."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "More information about JAXB can be obtain from https://docs.oracle.com/javase/tutorial/jaxb/intro/index.html[Oracle]."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To represents XML content as Java objects, \"adapted\" classes are used to represent and allow conversion of un-mappable objects into mappable objects."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Design-Common]]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Classes used by multiple components are in the `PlanMySem.common` package."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[[Planner-Initialization]]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d Initialization of the Planner and its Semester"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The `Planner` and its `Semester` has to be initialized for *PlanMySem* to work as all other features of *PlanMySem* would"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "interact with this `Semester` object. The initialization is automated and dynamic to ensure sustainability."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Upon launching *PlanMySem*, the initialization of the `Planner` and its `Semester` would be implemented via two steps:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Automatically generate the academic calendar from the current date."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Setup current `Semester` from the academic calendar."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The academic calendar is dynamically generated by invoking the function `generateSemester` in the `Semester` class."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The function will first retrieve the current date from the system clock to determine which academic year it is."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "As a new academic year starts from August, it can be determined from the month of the current date."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* If the current date is before August, the current academic year is \"the previous year / current year\". +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "e.g. If the date is 25/3/2019, the academic year is \"2018 / 2019\"."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* If the current date is after August, the current academic year is \"the current year / next year\". +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "e.g. If the date is 25/8/2019, the academic year is \"2019 / 2020\"."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "After determining the academic year, the details of the semesters will be generated. All the weeks of the academic"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "year can be calculated from the first day of semester 1 since each semester has a fixed amount of weeks."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Semester 1 of the academic year starts with an orientation week and will always begin from the first Monday of August."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Semester 1 has 18 weeks (inclusive of orientation week) and semester 2 has 17 weeks."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* The vacation between semester 1 and 2 has 5 weeks."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* The vacation between academic years will have 12 or 13 weeks depending on the starting week of the next academic year."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Each week of the year will correspond to an academic week and this information will be stored in a `HashMap` for efficient retrieval. This"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`HashMap` can be used to determine the academic week given a date (by finding out the week of the year for that date)."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The tables below shows an example of the relation between academic week and the week of the year for academic year 2018/2019."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".Weeks in academic year 2018/2019, Semester 1."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,5%,\u003c10%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Academic Week |Example (Week of the year) |Example (Period)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Orientation Week |32 |6 Aug 2018 (First Monday of Aug 2018) - 12 Aug 2018"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Week 1 - 6 |33 - 38 |13 Aug 2018 - 23 Sep 2018"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Recess Week |39 |24 Sep 2018 - 30 Sep 2018"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Week 7 - 13 |40 - 46 |1 Oct 2018 - 18 Nov 2018"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Reading Week |47 |19 Nov 2018 - 25 Nov 2018"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Examination Week |48 - 49 |26 Nov 2018 - 9 Dec 2018"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Vacation |50 - 52 |10 Dec 2018 - 30 Dec 2018"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Vacation |1 - 2 |31 Dec 2018 - 13 Jan 2019"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".Weeks in academic year 2018/2019, Semester 2."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,5%,\u003c10%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Academic Week |Example (Week of the year) |Example (Period)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Week 1 - 6 |3 - 8 |14 Jan 2019 - 24 Feb 2019"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Recess Week|9 |25 Feb 2019 - 3 Mar 2019"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Week 7 - 13 |10 - 16 |4 Mar 2019 - 21 Apr 2019"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Reading Week |17 |22 Apr 2019 - 28 Apr 2019"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Examination Week |18 - 19 |29 Apr 2019 - 12 May 2019"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|Vacation |20 - 31 |12 weeks duration"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//[#img-view]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//.[.underline]#Weeks in academic year 2018/2019, Semester 1.#"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//image::Sem1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//.[.underline]#Weeks in academic year 2018/2019, Semester 2.#"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//image::Sem2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Hence, the information listed below can be determined from the current date."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Current academic week"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Current academic semester"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Current academic year"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Number of weeks in current academic semester"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Start date of current academic semester"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* End date of current academic semester"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "These information would be assigned to the `Semester` object upon initialization of the `Planner`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This section details an aspect which we carefully considered for the initialization of the `Planner` and its `Semester`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Generation of academic calendar"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Alternative 1 (current choice):* Generate academic calendar by performing calculations from the current date."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Pros: Generation of academic calendar is dynamic and will work for future dates."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Cons: Computationally expensive as many operations have to be performed."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Alternative 2:* Retrieve academic calendar from a pre-generated file."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Pros: Generation of academic calendar is efficient and not prone to calculation errors."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Cons: Requires the pre-generated file which may be accidentally edited or deleted by the user."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "We chose alternative 1 as we wanted *PlanMySem* to be sustainable and continue working for future dates. The cons for alternative 2 also outweighs the cons for alternative 1 as editing"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "or deleting the pre-generated file could potentially break the application. Hence, we implemented alternative 1 as it is"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "a more suitable choice."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Parser / Command Format and Structure"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Due to the flexibility and huge variation of the envisioned command format and structures, it was decided that it was more appropriate to create a new Parser"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "instead of relying on the existing regex implementation in AB3 for heavy parsing."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The AB3 parser was heavily modified to serve unordered command parameters as well as to allow more flexibility such that mistakes in commands will still be"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "interpreted as valid as long as the \"minimal\" set of parameters are present. Regex is currently only used to retrieve the command keywords and arguments."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Arguments are then parsed via 2 different methods/techniques according to the format and structure of the command keyword."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Ordering of parameters are ignored when possible."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Repeated parameters are ignored. The first parameter of the same \"type\" are taken as valid, the rest are discarded."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Alternate formats of commands are implemented to give freedom of choice and cater to different types of users with different personalities and comfort levels."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Shortened versions of command keywords are implemented to give ways for users to shorten commands and be more efficient."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Hence, parameters in *PlanMySem* can be categorised into 2 categories:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Prefixed parameters such as `n/NAME`, `st/START_TIME`, `des/DESCRIPTION`, etc."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Non-Prefixed parameters, A.K.A. keywords, such as `INDEX`, `TYPE_OF_VIEW`. etc."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Parsing Prefixed Parameters"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To retrieve parameters, the function `private static HashMap\u003cString, Set\u003cString\u003e\u003e getParametersWithArguments(String args)` can be called."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The keys of the returned `HashMap` represent prefixes while the values represent the prefix\u0027s parameters, held in a set."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This allows for easy, quick and efficient access to specific prefixes and its parameters; O(1) access, insertion and removal."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The results of `getParametersWithArguments` can be interpreted in these manners:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the returned set of parameters, to a specific prefix, is `null`, then both the prefix and parameters was not keyed in at all."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the returned set of parameters, to a specific prefix, is not `null` but contains empty `strings` such that `string.isEmpty()` returns true, then the prefix was keyed in but the parameter was left blank."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The values of the returned `HashMap` is a `Set`, hence, there is no need to handle repeated parameters of a specific prefix as they will be automatically discarded."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Parsing Keywords"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "To retrieve keywords, the function `private String getStartingArgument(String args)` can be called."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here, keywords are thought of as parameters that are not prefixed."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In *PlanMySem*, keywords are utilized in command structures when they are to be used alone or when order of parameters are important."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In such cases, there is no logical need for prefixing as the meaning of these parameters can be identified."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The results of `getStartingArgument` can be interpreted in these manners:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the keyword is null, then the parameter was not keyed in."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the keyword data type does not match the intended, then the parameter was keyed in wrongly or is mis-ordered."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Additional keywords are *not* handled and ignored to provide ease of use and cater to user mistakes."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here are the considerations that led to the new parsing system."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In both cases, choices were made were largely due to the fact that they provide a better user experience and ease of use."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling repeated parameters"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 1 (current choice):* When possible, accept repeated parameters."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Less computationally expensive and allow users to make minor mistakes."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: User errors may be misinterpreted and hence wrong actions may be executed."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 2:* Always accept and handle repeated parameters."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Errors are shown to the user so that the invalid command may be fixed."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: Force user to rewrite commands, even in the event of simple/minor mistakes, and thus may hinder user experience and ease of use."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling order of parameters"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 1 (current choice):* Parse parameters without regards to order."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Greater user experience due to greater ease of use."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: More computationally expensive and tougher development process due to more cases to care for, requires manual parsing."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 2:* Accept only a specific ordering of parameters."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Less computationally expensive and short development process, able to use existing regex solutions in AB3."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: Greatly hinder user experience as order of parameters have no relation to meaning of commands."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Though the current implementation has much flexibility, there is more that can be done to elevate user experience to the next level."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "These are some possible enhancements:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "1. Parse a larger variety of date and time formats."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "2. Parse time as a single parameter instead of two."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "3. Enhance function calls to retrieve prepended parameters and keywords to handle trivial cases that should invoke `ParseException`."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Slot Management"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "_Slot_ Management involves mainly the interaction between the users and their _slots_."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The section below will describe in detail the Current Implementation, Design Considerations and Future Implementation of the Slot Management."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Users are able to perform three actions (or commands), though a small variety of methods, involving _slots_:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `Add`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Add multiple slots via the _recursion_ system."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Add a single slot via omitting the _recursion_ system."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `Edit`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Edit multiple _slots_ via _tags_."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Edit a single _slot_ via _index_."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `Delete`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Delete _slots_ via _tags_."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Delete a single _slot_ via _index_."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Add` command heavily relies on the _recursion_ system to select multiple dates in which to add the same slot to multiple days."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Additionally, the `Add` command also allows users to input _tags_ to tag _slots_."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Edit` and `Delete` command then makes use of the _tagging_ system to then select multiple slots for editing/deleting."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here are the considerations regarding slot management."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Wrapping of data in `Slot`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The topic of whether to wrap all primitives and `Strings`, in Java, is contentious."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "However, in this case of *PlanMySem*, there are no possible invalid values for any of the data that `Slot` holds, other than the `/` character that would have already been handled by `parser`."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For instance, any `String` is a valid `name` and the same goes for `location`, `description` and etc; wrapping these data will not achieve any narrowing of possible valid inputs."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Hence, data in `Slot` are not wrapped. This is in accordance to the You aren\u0027t gonna need it (YAGNI) principle."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing and accessing `Slots`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* *Alternative 1 (current implementation):* Use of `Map`, such as `HashMap` to store `Days` that store `Slots`."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: `HashMap` allows for easier and faster, O(1) access time, access of particular `Day` according to date."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: This requires splitting of the calendar into days, as such there is no easy way to account for `Slots` that occur across days."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 2:* Store `Slots` in a huge list."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Allows for easier access by \"index\" and offers flexibility, for example, in the time of slots."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: Expensive to access, add and remove items. Furthermore, it is extremely expensive to collect slots that occur in a day, a very important and most likely to be a commonly used feature."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Alternative 1 was chosen as the benefits of quick and easy access to days outweigh the disadvantages involve with forbidding slots than span over a day."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "After all, there are few cases of slots crossing the boundaries of a day, over midnight."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Create a class to represent `Days`, instead of utilising a `HashMap`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Currently, `Days` are held in a HashMap of key `LocalDate` and value `Day`. While this works without any loss in performance, this causes duplication of code and removes some key concepts of abstraction."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For example, there are code blocks dedicated to retrieving days or slots that could have been placed into this new class. This is an issue as these code have nothing to do with for instance, `Semester` but they are placed there."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Therefore, this needs to be implemented in the future to achieve less coupling, more cohesion and respect the Single Responsibility Principle (SRP), Open-Closed Principle (OCP) and Separation of Concerns Principle (SoC)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `Planner` to hold multiple `Semesters`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "While *PlanMySem* now allow users to work on the current semester, it is unable to cater to future semesters. For instance when a semester is about to end, users are not able to plan ahead for the coming semester."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is an issue that plagues user experience and is a significant problem. To solve this issue, `Planner` needs to hold multiple semesters in a `List` and more features need to be included to allow saving, loading and switching of semesters and etc."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The list function supports searching using a single keyword. +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The keyword is compared to all names/tags of all `Slots` existing in `Planner`. +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "If an exact match is found, the `Slot` will be added to the output list."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The find function supports searching using a single keyword. +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The name/tag of the `Slot` MUST contain the specified keyword in order for a match to occur. Completely different keywords"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "do not constitute a match. +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The matching `Slots` are then weighted based on their name/tag\u0027s \u003c\u003clevenshtein-distance,Levenshtein Distance\u003e\u003e from the keyword."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "A low \u003c\u003clevenshtein-distance,Levenshtein Distance\u003e\u003e is attributed to a high level of similarity between the name/tag and the keyword."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "(A value of 0 constitutes an exact match.) +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The maximum Levenshtein Distance set in `PlanMySem` is 20."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The weighted `Slots` are inserted into a `PriorityQueue` and the closest matching `Slots`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "will be polled into the output list. +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Upon executing the `find` command with valid parameters,"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "a sequence of events is executed. The sequence of events illustrated in the Sequence Diagram below will be in reference to the execution"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "of a `find n/keyword` command. The sequence of events are as follows:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "1. Upon calling the `execute` method of the `Logic` component, the `Logic` component would then parse the `find n/keyword`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "command."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "2. `LogicManager` then invokes the `parseCommand` function of `ParserManager`."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "3. `ParserManager` in turn invokes the `parse` function of the appropriate parser for the `find` command which in this case,"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "is `FindCommandParser`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "4. After parsing is done, `FindCommandParser` would instantiate the `FindCommand` object which would be returned to the `LogicManager`."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "5. `LogicManager` is then able to invoke the `execute` function of the returned `FindCommand` object."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "6. The command execution will call the `getDays` method of the `FindCommand` object which retrieves data from the"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "`Model` component (i.e. retrieving data from the current `Semester`). +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "7. `FindCommand` will execute the `getDiscoveredNames` method to find the closely matching `Slots` with names containing \u0027keyword\u0027."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "8. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to `Ui`."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "9. In addition, the `CommandResult` object can also instruct the `Ui` to display results, such as displaying help to"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "the user."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "To give a graphical summary of the above process, a Sequence Diagram detailing the execution of the `find n/keyword` command is provided below."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".Sequence of Interactions between Components for the `find n/keyword` Command"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::FindSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The Communication Diagram below summarises the data links between the various objects in the `find` command."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".Data Interactions between Components for the `find n/keyword` Command"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::FindCommunicationDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What constitutes a positive search result in `find` command"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**No.**|**Alternatives** |**Pros** |**Cons**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**Past Implementation 1** |Positive search result by strictly matching the entered keyword |Easy to implement. |Search must be exact, typos or an incomplete keyword will yield incorrect results. Nothing different from `List` feature."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**Past Implementation 2** |Positive search result as long as name/tag contains the keyword.|Searches will detect names/tags similar to the keyword. |Output list will be longer. May become excessively long if short keyword is provided."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**Current Implementation** |Store the search results in a `PriorityQueue` ordered by their \u003c\u003clevenshtein-distance,Levenshtein distances\u003e\u003e from the search keyword.|Searches are ordered by a degree of similarity, instead of the random order of names/tags in Past Implementation 2.|Adds complexities in finding and searching."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[[view]]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d View feature"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This feature presents the planner in different formats to the user. The available formats are the month view, week view,"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "and the day view. This section will detail how this feature is implemented."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Upon invoking the `view` command with valid parameters (refer to \u003c\u003cUserGuide#view, UserGuide.adoc\u003e\u003e for `view` usage),"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "a sequence of events is executed. For clarity, the sequence of events will be in reference to the execution"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "of a `view month` command. A graphical representation is also included in the Sequence Diagram below for your reference"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "when following through the sequence of events. The sequence of events are as follows:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Firstly, the `view month` command is passed into the `execute` function of `LogicManager` to be parsed."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. `LogicManager` then invokes the `parseCommand` function of `ParserManager`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. `ParserManager` in turn invokes the `parse` function of the appropriate parser for the `view` command which in this case,"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "is `ViewCommandParser`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The `view` command can be parsed into only 3 general types of views which are the month, week or day view as"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "specified in the command parameter."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "4. After parsing is done, `ViewCommandParser` would instantiate the `ViewCommand` object which would be returned to the `LogicManager`."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "5. `LogicManager` is then able to invoke the `execute` function of the returned `ViewCommand` object."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "6. In the `execute` function of the `ViewCommand` object, data will be retrieved from the `Model` component (i.e. retrieving data from the current `Semester`)."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "7. Now that the `ViewCommand` object has the data of the current semester, it is able to invoke the `displayMonthView` method."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "8. With the output returned from the `displayMonthView`, the `CommandResult` object will be instantiated."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "9. This `CommandResult` object would be returned to the `LogicManager` which then returns the same `CommandResult` object"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "back to the `UI` component."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "10. Finally, the `UI` component would display the contents of the `CommandResult` object to the user. For this `view month`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "command, the displayed result would be the monthly calendar view of all months in the current semester."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".Sequence Diagram upon executing the `view month` command."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "image::ViewMonthSequenceDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The 3 general types of view (month, week, day) are generated by the methods `displayMonthView`, `displayWeekView`,"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayDetailedWeekView`, `displayDayView` from the `ViewCommand` class and the implementation of these methods is"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "explained below."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayMonthView` method displays all the months of the current semester in a monthly calendar format. Each academic week"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "of the semester is also indicated in the display. The implementation of this method can be"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "broken down into 3 parts:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Print month header (e.g. January 2019) and calculate required amount of whitespace before the 1st of the month."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Print all days of the month using a loop."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "   * Append academic week after each Saturday or last day of month."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. Repeat parts 1 and 2 for every month in the semester."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayWeekView` method displays the weekly calendar format of a specified week. The implementation of this method can be"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "broken down into the following steps:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Print academic week header (e.g. Week 13 of Sem 2)."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Retrieve all days of the week and for each day, retrieve its _slots_ into an `ArrayList`."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. For each day, print the _slot_ details (only start time, end time and a shortened title) and remove the _slot_ from"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "the `ArrayList`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "4. Repeat step 3 until the `ArrayList` of _slots_ for each day is empty."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayDayView` method displays the details of all _slots_ of a specified day. The implementation of this method can be"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "broken down into 2 parts:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Retrieve all _slots_ for the specified day."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Print all details of each _slot_ found."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayDetailedWeekView` method displays the details of all _slots_ of a specified week since `displayWeekView` only shows"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": " a formatted and summarised week view. The implementation of this method can be broken down into the following steps:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Print academic week header (e.g. Week 13 of Sem 2)."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Retrieve all days of the week."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. For each day, print all details of all _slots_ via the `displayDayView` method."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This section details our considerations for the implementation of the `view` feature."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Functionality of `view week` command"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Alternative 1 (current choice):* Option for user to display a formatted summarised week view or a detailed week view."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Pros: The formatted summarised week view is uncluttered. User given the choice and flexibility for the week view."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Cons: User is required to spend a little more time to specify an additional parameter in the `view week` command."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Alternative 2:* Only a single formatted week view which displays details of all _slots_ in the specified week."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Pros: Efficient for the user as user is only required to enter a single command to view all details of all _slots_."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Cons: The formatted week view will be too cluttered as there are too many _slots_ and lots of details. Formatting is"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "an issue as well as details of each _slot_ can be of varying lengths."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Alternative 1 was chosen to be implemented as it gives the user freedom of choice to select the degree of details to be"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "displayed in the output of the `view week` command. The output of alternative 1 is also less cluttered than alternative 2"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "and thus enhances the presentability of *PlanMySem*."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedPlanner`. +"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Only `Add`, `Edit` and `Delete` commands can be undone/redone. +"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "It extends `Planner` with an undo/redo history, stored internally as an `plannerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `VersionedPlanner#commit()` -- Saves the current planner state in its history."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `VersionedPlanner#undo()` -- Restores the previous planner state from its history."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `VersionedPlanner#redo()` -- Restores a previously undone planner state from its history."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitPlanner()`, `Model#undoPlanner()` and `Model#redoPlanner()` respectively."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedPlanner` will be initialized with the initial planner state, and the `currentStatePointer` pointing to that single planner state."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th `Slot` in the planner. The `delete` command calls `Model#commitPlanner()`, causing the modified state of the planner after the `delete 5` command executes to be saved in the `plannerStateList`, and the `currentStatePointer` is shifted to the newly inserted planner state."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Step 3. The user executes `add n/CS2113T ...` to add a new slot. The `add` command also calls `Model#commitPlanner()`, causing another modified planner state to be saved into the `plannerStateList`."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "If a command fails its execution, it will not call `Model#commitPlanner()`, so the planner state will not be saved into the `plannerStateList`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Step 4. The user now decides that adding the `Slot` was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undo()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous planner state, and restores the planner to that state."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial planner state, then there are no previous planner states to restore. The `undo` command uses `Model#canUndo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoPlanner()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the planner to that state."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "If the `currentStatePointer` is at index `plannerStateList.size() - 1`, pointing to the latest planner state, then there are no undone planner states to restore. The `redo` command uses `Model#canRedo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the planner, such as `list`, will usually not call `Model#commitPlanner()`, `Model#undoPlanner()` or `Model#redoPlanner()`. Thus, the `plannerStateList` remains unchanged."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitPlanner()`. Since the `currentStatePointer` is not pointing at the end of the `plannerStateList`, all planner states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire planner."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of planner states."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedPlanner`."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//The undo/redo mechanism is facilitated by `VersionedPlanner`."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//It extends `Planner` with an undo/redo history, stored internally as an `plannerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* `VersionedPlanner#commit()` -- Saves the current planner state in its history."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* `VersionedPlanner#undo()` -- Restores the previous planner state from its history."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* `VersionedPlanner#redo()` -- Restores a previously undone planner state from its history."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//These operations are exposed in the `Model` interface as `Model#commitPlanner()`, `Model#undoPlanner()` and `Model#redoPlanner()` respectively."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Step 1. The user launches the application for the first time. The `VersionedPlanner` will be initialized with the initial planner state, and the `currentStatePointer` pointing to that single planner state."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Step 2. The user executes `delete 5` command to delete the 5th slot in the planner. The `delete` command calls `Model#commitPlanner()`, causing the modified state of the planner after the `delete 5` command executes to be saved in the `plannerStateList`, and the `currentStatePointer` is shifted to the newly inserted planner state."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Step 3. The user executes `add n/CS2113T ...` to add a new slot. The `add` command also calls `Model#commitPlanner()`, causing another modified planner state to be saved into the `plannerStateList`."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//If a command fails its execution, it will not call `Model#commitPlanner()`, so the planner state will not be saved into the `plannerStateList`."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Step 4. The user now decides that adding the slot was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoPlanner()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous planner state, and restores the planner to that state."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//If the `currentStatePointer` is at index 0, pointing to the initial planner state, then there are no previous planner states to restore. The `undo` command uses `Model#canUndoPlanner()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//The `redo` command does the opposite -- it calls `Model#redoPlanner()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the planner to that state."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//If the `currentStatePointer` is at index `plannerStateList.size() - 1`, pointing to the latest planner state, then there are no undone planner states to restore. The `redo` command uses `Model#canRedoPlanner()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Step 5. The user then decides to execute the command `list`. Commands that do not modify the planner, such as `list`, will usually not call `Model#commitPlanner()`, `Model#undoPlanner()` or `Model#redoPlanner()`. Thus, the `plannerStateList` remains unchanged."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//Step 6. The user executes `clear`, which calls `Model#commitPlanner()`. Since the `currentStatePointer` is not pointing at the end of the `plannerStateList`, all planner states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/CS2113T ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* **Alternative 1 (current choice):** Saves the entire planner."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Pros: Easy to implement."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Pros: Will use less memory (e.g. for `delete`, just save the slot being deleted)."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* **Alternative 1 (current choice):** Use a list to store the history of planner states."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedPlanner`."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Data Exporting / Exporting feature"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This feature exports the Planner into a .ics file. This section will detail how this feature is implemented."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Upon entering the `export` command with valid parameters (refer to \u003c\u003cUserGuide#, UserGuide.adoc\u003e\u003e for `export` usage), the"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "following sequence of events is executed:"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "1. The `ParserManager` parses the `export` command and calls the `parse` method in `ExportCommandParser`."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "2. The `ExportCommandParser` then constructs a `ExportCommand` object with a filename."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "3. The Command object is returned and execution will get the current `Semester` from `Model`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "4. The `IcsSemester` is then constructed using `Semester` and converted to a `String`."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "5. The `String` is then written to a file with the filename parsed."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "5. The result of the command execution, `CommandResult`, will then returned to `Ui`."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Given below is the Sequence Diagram upon executing the `export` command."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".Sequence of implementation for the `export` Command"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::ExportCommandSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The `ExportCommandParser` will check whether the optional filename parameter was input. If this parameter is included, the input filename is used. Else, if no other characters have been input (e.g. \"export\"), the default \"PlanMySem\" is used as the filename."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This process can be seen from the activity diagram in the figure below."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".Activity diagram showing the workflows for `export` Command"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::ExportCommandActivityDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This portion explains alternative implementations as well as the rationale behind my chosen method."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using a .ics library"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* **Alternative 1 (current choice):** Writing my own .ics file."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Pros: No need to include and understand how to use the external library."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Cons: Difficult to read and work with .ics formatting."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* **Alternative 2:** Using iCal4j library to read and write .ics files."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Pros: No need to manually format data into .ics format."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Cons: Difficult to translate our recursion system to the .ics RRULE system."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Reason for current choice: Using the library will allow `PlanMySem` to easily import non-native .ics files. However, this would require changes to `Model` as currently the recurrence for slots is not saved. +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "In addition, as our application is a specially designed planner for NUS matters, I felt that it was unnecessary to have the same slots on multiple applications. +"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Hence, I chose to code the reading and writing of .ics files and add a disclaimer that importing of non-native .ics files is likely to cause errors."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Data Encryption / Decryption feature"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The storage file \"PlanMySem.txt\" is encrypted to prevent easy access of the user\u0027s calendar."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "We are encrypting and decrypting the data using the Java `Cipher`."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This feature is implemented through the `Encryptor` that contains the encrypt and decrypt methods. The encrypt method takes a `String` as an argument and returns a encrypted String object. The decrypt method takes in a String object as an argument and returns the decrypted message as a String object."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The encryption is done using AES/CBC/PKCS5Padding. The key used for encryption/decryption is generated through various device parameters such as username, operating system (OS) and java runtime version. The secret key generated is stored in a file named \"KeyStorage.jceks\". No password is required from the user to retrieve this key, but a password input can be added to `KeyStorage` to improve security. +"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "A initialization vector (IV) is required for the Cipher Block Chain (CBC) mode of encryption. A random IV is generated and appended at the beginning of the data before being stored. The IV is then retrieved from the same file to decrypt the data."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Encryption of the data is done automatically before the file is saved. In the implementation, the AdaptedPlanner is first marshaled into a `StringWriter` before being encrypted and written into the file. This is to ensure that the data is JAXB formatted and the save algorithm is unaffected."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Similarly, decryption of the data is done automatically before it is loaded. In the implementation, the file is read and decrypted and parsed into a `StringReader`. The `StringReader` is then un-marshaled and loaded. This is to ensure that the file is converted back into a JAXB object before being loaded and the load algorithm is unaffected."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d User Preferences [COMING IN 2.0]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The files generated by *PlanMySem* are also named \"PlanMySem\" and are saved in user\u0027s PlanMySem folder by default. This default filename and file path can be changed via the the configuration file (default: `config.json`). +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "There is no need for manual configuration of the `Semester` as it is initialized dynamically as mentioned in"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003c\u003cPlanner-Initialization\u003e\u003e."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//We have two types of tests:"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "e.g. `PlanMySem.commons.UtilTest`"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "e.g. `PlanMySem.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "e.g. `PlanMySem.logicManager.LogicTest`, `PlanMySem.parse,ParserTest`"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "**Problem: `Logic` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Update the version number in link:{repoURL}/src/PlanMySem/Main.java[`Main.java`]."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Projects often depends on third-party libraries."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For example, *PlanMySem* depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Managing these _dependencies_ can be automated using Gradle."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Suggested path for new programmers:"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*Scenario:* You are in charge of `logicManager`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logicManager/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logicManager/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** link:{repoURL}/src/main/java/seedu/address/logicManager/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logicManager/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*Scenario:* You are in charge of `model`. One day, the `logicManager`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Think about how you can use SLAP to design the method. Where should we place the main logicManager of deleting tags?"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logicManager. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Before**"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**After**"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Before**"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**After**"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Before**"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**After**"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Hint"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Implement the logicManager in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//****"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Examples:"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* `remark 1 r/` +"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Removes the remark for the first person."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logicManager of `remark` later."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logicManager/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/logicManager/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add new test method to link:{repoURL}/src/test/java/seedu/address/logicManager/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/logicManager/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/test/java/seedu/address/logicManager/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample model (delete your `model/addressbook.json` so that the application will load the sample model when you launch it.)"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logicManager"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logicManager for our `remark` command."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Replace the logicManager in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logicManager to modify the remarks of a person."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//. Update `RemarkCommandTest` to test that the `execute()` logicManager works."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* NUS students and staff"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* has a need to manage a significant number of categories, activites, timeslots, tags in a calendar"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* prefers having a completely offline calendar"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*Value proposition*: manage personal planner faster than a typical mouse/GUI driven app and caters to users who prefer an offline solution due to the current technology climate where information privacy/data privacy/data protection has become an uncertainty"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions if I do not know how to use the app"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |new user |initialize the calendar by year and semester |align the planner with the school\u0027s academic calendar"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |user |add a slot |store all my slots in the calendar"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |user |delete a slot |remove all slots from my calendar that have been cancelled"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |user |edit a slot |edit slots from my calendar that have been postponed/ brought forward/ changed"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |user |list all slots |view all slots on the planner which I have activities on"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* * *` |user |recurse a slot |easily create all the relevant time slots for a module to recur every week"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* * *` |user |view all slots on a certain day |conveniently view my planner for the day"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* * *` |user |view all slots on a certain week |conveniently view my planner for the week"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* * *` |user |view all slots on a certain month |conveniently view my planner for the month"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* * *` |user |add details to a slot |record information related to the slot"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* * *` |user |undo a command |easily revert my changes and restore a previous state"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* * *` |user |redo a command |easily revert my `undo` command in case I mistakenly undo too far"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* *` |user |view the planner in a graphic calendar format|easily view my schedule for the day/week/month/semester"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* *` |user |view a slot |view the details of a specific activity I am looking for"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* *` |user |remove tags on a time slot |remove unused/ unnecessary tags from an activity"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* *` |user |edit tags |rename tags"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* *` |user |list all tags |view all existing tags"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`* *` |user |view color coded categories |easily view the different types of categories"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* *` |user |encrypt my planner data |ensure the privacy of my planner"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`* *` |user |decrypt an encrypted planner data|securely transfer the planner data to be operated on another device"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |import semester timetable (.ics files) |transfer my existing activities into the new timetable"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |export semester timetable (.ics files) |view my timetable on another platform"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |receive notifications of upcoming activities |be reminded of important upcoming activities"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |view recess week and exam week |view specifically the weeks to rest"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`*` |user |view vacations |plan my schedule on vacation days or special semesters"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |favourite an activity |prioritise important activities"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |view public holidays |be aware of upcoming public holidays"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`*` |user |compare my timetable with someone else\u0027s |find a common time slot for a meeting"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`*` |user |generate summary reports |view how much time I spent attending training / tutorials"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This section describes the Use Cases for some of our implemented features."
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "(For all use cases below, the *System* is `PlanMySem` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d Use Case: Add a slot"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1. User inputs add command followed by all the mandatory parameters."
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 2. System reflects the additions to the planner."
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1a. System detects an error in the entered data."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1a1. System outputs error message."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1b. System detects insufficient parameters in the entered data."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1b1. System outputs error message."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Use Case: List slots"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1. User inputs the command to list slots followed by the tag or name of the slot."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 2. System displays all slots with the specified name or tag with their indexes."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1a. Planner is empty."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1a1. System outputs error message."
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "+"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1b. Tag or name does not exist in the planner."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1b1. System outputs error message."
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Use Case: Delete a slot"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1. User inputs the delete command followed by the index or tag of the intended slot."
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 2. System deletes the intended slot from the planner and outputs confirmation message."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1a. Tag or index does not exist in the planner."
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1a1. System outputs error message."
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Use Case: Edit a slot"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1. User inputs command to edit a slot along with the tag or index, followed by the parameters to be changed."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 2. System changes the specified parameters for the slot."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 3. System reflects the slots as well as the perimeters changed."
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1a. Tag or index does not exist in the planner."
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1a1. System outputs error message."
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1b. System detects an error in the entered data."
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1b1. System outputs error message."
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d Use Case: View all slots in a Day"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1. User inputs the command to view all slots along with the specific day or date in the current semester."
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 2. System displays all the slots for that specified day or date."
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1a. Specified day or date does not exist in the current semester."
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1a1. System outputs error message."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "+"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1b. System detects an error in the entered data."
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** 1b1. System outputs error message."
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d Use Case: Export planner"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 1. User inputs command to export the planner."
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 2. System converts planner to .ics format."
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 3. System saves .ics file in the main directory as \"PlanMySem.ics\"."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** 4. System displays confirmation message."
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":: 1a. A filename is included in the command."
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "::: 1ai. The filename is valid."
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1ai.1. System converts planner to .ics format."
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1ai.2. System saves .ics file in the respective directory."
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1ai.3. System displays confirmation message."
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "+"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "::: 1aii. The filename is invalid"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1aii.1 System outputs error message."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "+"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//\u003d\u003d\u003d Use Case: Add a Category"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//. User inputs command to add a new category along with the name of the new category."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//. System reflects the addition made to the list of Categories."
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//\u003d\u003d\u003d Use Case: Filter by category"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//. User inputs the command to list all categories (so he knows what categories exist)."
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//. User inputs the command to list all activities."
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//. User inputs command to filter all the activities by an existing category."
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//. System displays filtered activities."
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "//_{More to be added}_"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java 9 or higher installed."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ". Should be able to hold up a fully packed schedule, three times over, without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". The system should respond relatively quickly to user commands so as to not make the user wait around; this is an advantage of using *PlanMySem*."
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ". The system should take up relatively little space on the local machine so as to cater to all students and OS."
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". The system should be easy to use, intuitive and simple, such that any student regardless of past experience with calendar/scheduling software is able to use it."
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ". The system should be flexible to allow all kinds of schedules that target users might have."
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ". The data should be encrypted to prevent private data from being accessed."
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[levenshtein-distance]] Levenshtein Distance::"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The Levenshtein distance is a string metric for measuring difference between two sequences. +"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Informally, the Levenshtein distance between two words is the minimum number of single-character edits (i.e. insertions, deletions or substitutions)"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "required to change one word into the other."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: Shows a window with a welcome message. The window size may not be optimum."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Adding a slot"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Deleting a _slot_ while all _slots_ are listed"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Prerequisites: Add a single or multiple _slot(s)_ using the `add` command."
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/normal r/past` +"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: Add a single slot, named \"CS2113T Lecture\" with description \"Software Engineering\" on all mondays, from 0800hrs to 0900hrs with the tags \"CS2113T\" and \"Tutorial\". Total of 13 _slots_ are added to the planner."
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture` +"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: Add a single slot, named \"CS2113T Lecture\" with description \"Software Engineering\" on the coming monday, from 0800hrs to 0900hrs with the tags \"CS2113T\" and \"Tutorial\". A single _slot_ is added to the planner."
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `add n/ Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture` +"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: No _Slot_ is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Other incorrect add commands to try include invalid or unspecified dates, days and or time +"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Editing a slot"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Editing a _slot_ while all _slots_ are listed"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Prerequisites: List all _slot_ using the `list` command. Multiple _slots_ in the list."
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `edit 1 nl/ICube` +"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: The first slot shown in the list is edited such that it\u0027s location is replaced with \"ICube\". The selected slot and the edited details, in this case only \"location\", is displayed."
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `edit 0` +"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: No _Slot_ is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Other incorrect edit commands to try: `edit`, `edit x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Deleting a slot"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Deleting a _slot_ while all _slots_ are listed"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Prerequisites: List all _slot_ using the `list` command. Multiple _slots_ in the list."
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: First _slot_ is deleted from the Planner. Number of deleted _slots_ is shown, as `i`, and details of the _slot_ is shown."
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: No _Slot_ is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d Viewing the planner"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ". View all _slots_ for the current week"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".. Prerequisites: Add _slots_ using the `add` command for any day of the current week."
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".. Test case: `view week` +"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "   Expected: A weekly calendar view with all added _slots_ for the current week with a summarised title."
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".. Test case: `view week details` +"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "   Expected: A detailed view of all added _slots_ for the current week."
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".. Other incorrect view commands to try: `view`, `view week 0` +"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "   Expected: Error message returned which shows proper command usage or indicating an invalid input."
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanieyap": 1185,
      "marcus-pzj": 153,
      "dingheng4448": 346,
      "-": 70,
      "macchazuki": 114
    }
  },
  {
    "path": "docs/HelpWindow.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":no-site-header:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "include::UserGuide.adoc[]"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 3
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d PlanMySem - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":caution-caption: :fire:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T08-3/main"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "By: `Team T08-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Welcome to *PlanMySem*!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*PlanMySem* is a text-based (Command Line Interface) scheduling/calendar application that caters to NUS students and staff who prefer to use a desktop application for managing their schedule/calendar."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* automatically creates a planner that is synchronised according to the NUS academic calendar for the current semester and enables easy creation, editing and deleting of items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Special weeks such as recess week and reading week are taken into account within our unique recursion system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Items can then be efficiently managed via the intuitive tagging system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* is optimized for those who prefer to work with a Command Line Interface (CLI) and/or are learning to work more efficiently with CLI tools. Additionally, unlike traditional calendar/scheduling applications, *PlanMySem* utilizes minimal resources on the user’s machine while still allowing the user to view their schedules swiftly and efficiently."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[[about]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d About this User Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This user guide provides a quick start guide for you to easily setup and install *PlanMySem*, documentation of all the various features *PlanMySem* offers, frequently asked questions and a summary of the available commands. To navigate between the different sections, you could use the table of contents above."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For ease of communication, this document will refer to lessons/activities/events/appointments that you might add into the planner as _slots_."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Additionally, throughout this user guide, there will be various icons used as described below."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a tip. Follow these suggested tips to make your life much simpler when using *PlanMySem*!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a note. These are things for you to take note of when using *PlanMySem*."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a sign-post dictating important information. These are information that you will surely need to know to use *PlanMySem* efficiently."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a sign-post informing caution. Please take note of these items and exercise some care."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a rule. Ensure that you follow these rules to ensure proper usage of *PlanMySem*."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This section guides you through the installation of *PlanMySem* and provides a few example commands you may try."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Download the latest `planmysem.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your planner."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".  Double-click the file to start the app. You should see the GUI appear in a few seconds."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-startup]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".[.underline]#GUI screen upon start-up#"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Start_Screen.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "E.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* **`add`**`n/CS2113T d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/CS2113T t/Tutorial` : +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Add a _slot_, named \"CS2113T\" on the coming monday, from 0800hrs to 0900hrs with the tags \"CS2113T\" and \"Tutorial\"."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *`list`*`n/CS2113T` : list all _slots_ named \"CS2113T\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* **`delete`**`3` : delete the 3rd _slot_ shown in the current list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* *`exit`* : exit the app"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This section displays the available features of *PlanMySem* together with examples for you to refer to."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Tagging System*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Unlike other commercial calendar/scheduling/planner software, *PlanMySem* makes use of a tagging system to manage _slots_."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Using tags to tag _slots_ will make tasks easier for you in the future. Performing tasks such as viewing, deleting and editing _slots_ will be more efficient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Recommended uses for tags:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Tag modules. E.g. \"CS2113T\", \"CS2101\"."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Tag type of lesson. E.g. \"Lecture\", \"Tutorial\", \"Lab\"."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Tag type of activities. E.g. \"Sports\", \"Seminar\", \"Talk\"."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Tag difficulty of task. E.g. \"Tough\", \"Simple\", \"Trivial\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Recursion System*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Recursion facilitates quick addition of multiple _slots_, similar to Microsoft Outlook\u0027s series of appointments."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "In NUS, academic semesters are split into weeks of several types. Recursion allows you to add _slots_ to these types of weeks with ease through the use of the `r/`(recursion) parameter."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user. E.g. in `t/TAG`, `TAG` is a parameter which can be used as the name of the tag."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Items in square brackets are optional. e.g in `add [l/LOCATION]`, `LOCATION` is a parameter that may be omitted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times. E.g. `[t/TAG]…` can be used 0 times, or as `t/lab`, `t/lecture`, `t/tutorial` etc."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Parameters can be in any order. E.g. if the command specifies `st/START_TIME et/END_TIME d/DATE`, then both `et/09:00 st/08:00 d/2-13-2019` and `et/09:00 d/2-13-2019 st/08:00` are acceptable."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You can save time by utilizing the alternate and shortcut commands. E.g. instead of using `delete`, you may also use `del` or simply `d`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Identifiers and Parameters*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Identifiers in *PlanMySem* are designed to be, short and easy to memorise."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Once you are familiarised with them, they should be intuitive to use to add your parameters."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The table of Identifiers and Parameters and their descriptions (Table 1) below is useful for your reference as you jump right into grasping the system."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Identifiers and their Parameters and descriptions."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,\u003c10%,\u003c30%,\u003c30%,\u003c25\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Identifier |Parameter |Description |Format |Example"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".2+|`n/`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |`NAME` |Name of a _slot_ |Text |`n/CS2113T`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |`KEYWORD` |Text that are part of the name of a _slot_ |Text |`n/CS`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`l/` |`LOCATION` |Location of a _slot_ |Text |`l/COM2 04-22`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`des/` |`DESCRIPTION` |Description of a _slot_ |Text |`des/Topic: Abstraction`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|`t/` |`TAG` |Tag of a _slot_ |Text |`t/Lab`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".4+|`d/`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .2+|`DATE` .2+|Date"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        |`dd-mm-yyyy` |`d/01-02-2019`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        |`dd-mm` |`d/01-02`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .2+|`DAY` .2+|Day of week"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        |Name of day |`d/Monday`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        |Name of day (short-form) |`d/mon`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".2+|`st/` .2+|`START_TIME` .2+|Start time"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Time in 24-Hour format, `hh:mm` |`st/23:00`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Time in 12-Hour format, form of `hh:mm+AM\\|PM` |`st/11:00 PM`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".3+|`et/`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .2+|`END_TIME` .2+|End Time"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        |Time in 24-Hour format, `hh:mm` |`et/23:00`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        |Time 12-Hour format, `hh:mm+AM\\|PM` |`et/11:00 PM`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        |`DURATION` |Duration from Start Time |Number of minutes |`et/60`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".5+|`r/` .5+|`RECURRENCE`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Recurse _slot_ on normal academic weeks |`normal` |`r/normal`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Recurse _slot_ on recess week |`recess` |`r/recess`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Recurse _slot_ on reading week |`reading` |`r/reading`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Recurse _slot_ on examination weeks |`exam` |`r/exam`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |Recurse _slot_ on past dates |`past` |`r/past`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You may order identifiers and parameters in any fashion and you will still be able to achieve what you want!"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "So, do not bother thinking about where to place parameters as ordering does not matter, instead become more efficient and save your time!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Identifiers may be appended with a `n` to dictate \"new\". +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "E.g. `nt/NEW_TAG` signifies new tags in which you want to replace existing tags with."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "While table 1 shows you all the identifiers and parameters that *PlanMySem* uses, there are some commands that do not make use of identifiers nor parameters."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The view command is one such exception that make use of keywords that must be typed in a specific order."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[help]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Displays all the available commands with the syntax and examples. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-help]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".[.underline]#Output after entering `help`#"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Help_Command_Output.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[add]]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Adding Slots : `add` / `a`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Add _slot(s)_ to the planner. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `add n/NAME d/DATE_OR_DAY_OF_WEEK st/START_TIME et/END_TIME_OR_DURATION +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[l/LOCATION] [des/DESCRIPTION] [r/normal] [r/recess] [r/reading] [r/exam] [r/past] [t/TAG]...`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/normal r/past` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Add a single _slot_, named \"CS2113T Lecture\" with description \"Software Engineering\" on all mondays, from 0800hrs to 0900hrs with the tags \"CS2113T\" and \"Tutorial\"."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here, the recursion parameters enable a single command to place 13 slots on all \"normal\" weeks that lectures take place on."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-add]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Output after entering `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/normal r/past`#"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Add_Command_Output_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/recess r/reading r/past` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Do the same but instead of \"normal\" weeks, do the opposite of the norm and recurse the _slot_ on both recess and reading week."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Do the same but without any recursion, instead place the _slot_ the coming monday."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You may add single _slots_ by omitting the `r/` identifiers and its parameters."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* does not dictate your scheduling preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "As such, you may even add identical slots or slots with overlapping start and end times to help plan for tentative/unconfirmed events."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[edit]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Editing Slots: `edit` / `e`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Edit _slot(s)_."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "1. Edit _slot(s)_ which contains certain _tag_(s). +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `edit t/TAG... [nn/NEW_NAME] [nst/NEW_START_TIME] [net/NEW_END_TIME|DURATION] [nl/NEW_LOCATION] [ndes/NEW_DESCRIPTION] [nt/NEW_TAG]...`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "2. Edit specific _slot_ via the `list` command. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `edit INDEX [nn/NEW_NAME] [nd/NEW_DATE] [nst/NEW_START_TIME] [net/NEW_END_TIME|DURATION] [nl/NEW_LOCATION] [ndes/NEW_DESCRIPTION] [nt/NEW_TAG]...`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "You will not be able to edit a _slot_\u0027s date when editing via _tags_. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "To edit a _slot_\u0027s date, you may use the `list` or `find` command and edit specific _slot(s)_ via index."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `edit t/CS2113T t/Lecture nl/COM2 04-01` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Edit _slots_ that contain tags \"Lecture\" and \"Tutorial\", set these _slot\u0027s_ location to \"COM2 04-01\"."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-edit]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Output after entering `edit t/CS2113T t/Lecture nl/COM2 04-01`#"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Edit_Command_Output_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `edit 1 nl/ICube` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Edit the first item from the previous result of the `list` or `find` command, replace it\u0027s location with \"ICube\"."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[delete]]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Delete Slots: `delete` / `del` / `d`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "1. Delete _slot(s)_ which contains certain _tag_(s). +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `delete t/TAG...`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "2. Delete _slot_ via the `list` command. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "You may delete a specific _slot_ by using the `list` or `find` command and select the specific _slot_ via index."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `delete t/CS2113T t/Lecture` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Delete _slots_ that contain both tags \"CS2113T\" and \"Lecture\"."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-delete]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Output after entering `delete t/CS2113T t/Lecture`#"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::Delete_Command_Output_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `delete t/Lecture` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Delete _slots_ that contain the tag \"Lecture\"."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Delete the second _slot_ shown via the `list` command."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[list]]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Listing Slots: `list` / `l`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Lists all _slots_ whose name/tag directly matches the specified keyword (not case-sensitive). +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Format: `list n/NAME`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "You can also list all _slots_ in the planner as well. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Format: `list all`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Keywords are not case-sensitive. (e.g. _CS2113T_ is the same as _cs2113t_)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `list n/CS2113T Lecture` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "List all _slots_ that is named `CS2113T Lecture`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `list t/Lecture` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "List all _slots_ that contain the tag `Lecture`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `list all`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "List all _slots_ in the planner."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-list]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Output after entering `list t/Lecture`#"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::List_Command_Output_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[find]]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d Finding Slots: `find` / `f`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Find all _slots_ whose name closely matches the specified keyword and displays them as a list. (Case-sensitive) +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Format: `find n/KEYWORD`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Keywords are case sensitive! (e.g. _CS2113T_ is not the same as _cs2113t_)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The `find` command will return the closest matching `Slot` which contains the specified keyword. **The name/tag MUST"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "contain the specified keyword in order for a match to occur**."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "You may want to use short keywords (e.g CS) instead of long keywords to increase the chances of finding your desired slot. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "E.g. Let\u0027s say you are finding a `Slot` named _Golf_. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "`find n/Go` will detect the slot, while `find n/Golfs` will fail to detect the slot."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `find n/CS` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Find all _slots_ whose name closely matches `CS` (eg. CS2101, CS2113T, SOCSMeet)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `find t/2113T` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Find all _slots_ that contain tags that closely matches `2113T`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".[.underline]#Output after entering `find n/CS`#"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Find_Command_Output.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Explanation: As seen from the figure above, the output list of slots are ranked according to their degree of similarity."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "All of the `Slots` listed contain the keyword _\u0027CS\u0027_. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Since _\u0027JSOCS\u0027_ has less characters, it is considered closest to the keyword _\u0027CS\u0027_, which has only 2 characters. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Remember the tip above when you are finding your `Slots`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[view]]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d View the Planner : `view` / `v`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View the planner in a month/week/day view."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. View the monthly calendar view of the current academic semester. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Format: `view month`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. View the weekly calendar view of the current academic week. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Format: `view week [WEEK]` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`[WEEK]` is valid if it is:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any number from 1 to 13 (as there is only week 1 to 13 in a semester)."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any of the following text (case-insensitive): recess, reading, exam, examination."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "You may add in the parameter `details` after `[WEEK]` to view the details of all _slots_ with respect to the `[WEEK]`. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "E.g. `view week 13 details` will allow you to view details of all _slots_ in week 13!"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. View the day view of a particular day in the academic semester. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Format: `view day [DATE_OR_DAY_OF_WEEK]` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`[DATE_OR_DAY_OF_WEEK]` is valid if it is:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any number from 1 to 7 (the numbers 1 to 7 corresponds to the days Monday to Sunday respectively)."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any of the following text (case-insensitive): Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The three-letter abbreviation of the days (e.g. mon, tue) is accepted as well."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* A date in the format of \"dd-mm\" or \"dd-mm-yyyy\" (e.g. 16-04 or 16-04-2019). The date must exist in the current semester."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "You may omit `[WEEK]`/`[DATE_OR_DAY_OF_WEEK]` to view the calendar with respect to the current date! +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "E.g. `view week` will allow you to view the current week and `view day` will allow you to view the current day! +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "If you have added _slots_ to the planner, the expected output after successfully running `view week` will be similar to"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "the expected output shown in the figure below."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[#img-view]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".[.underline]#Expected output after entering `view week`#"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The following are some examples of the `view` command which you can try to run."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Month view example:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view month` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the months of the current academic semester."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Week view examples:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view week details` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for current week of the academic calendar with details of all _slots_."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view week 7` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for week 7 of the academic calendar."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view week recess` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for recess week of the academic calendar."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Day view examples:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view day` +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the current date."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view day 01-03-2019` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the first of March."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view day monday` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the upcoming Monday."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[history]]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Listing previous input commands : `history`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "An empty command history is initialised when _PlanMySem_ is started. It will be"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "cleared upon exiting _PlanMySem_."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Invalid commands will also be logged into the command history."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[undo]]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Restores the planner to the state before the previous command was executed. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Only Add, Edit, Delete and Clear Commands are undoable."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[redo]]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Only Add, Edit, Delete and Clear Commands are redoable."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[encrypt]]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Encrypting/decrypting data files"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Planner data is automatically encrypted before saving and decrypted before loading. You do not need to encrypt or decrypt the data manually."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[export]]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Exporting .ics formatted files: `export`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You can export the planner as a .ics file."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Format: `export [fn/FILE_NAME]`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[#img-export]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Output after entering `export`#"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::Export_Command_Output_1.png[width\u003d\"420\"]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The default name of the exported file is \"PlanMySem.ics\" and is saved in the main directory."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The .ics file can be imported into other calendar apps that support .ics files such as Google Calendar. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[#img-exportFile]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Location of PlanMySem.ics file#"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::Export_Command_Directory_1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "A file with the ICS file extension is an iCalendar file."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "These are plain text files that include calendar event details like a description, beginning and ending times, location, etc."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[[import]]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Importing native .ics files `import`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "You can import a .ics file generated by *PlanMySem* into the current planner."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Format: `import [fn/FILE_NAME]/`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This feature is to allow transfer of data between *PlanMySem* on different devices. This feature is NOT for importing non-native .ics files. Hence, only .ics files generated by *PlanMySem* should be imported."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[clear]]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Clear all data : `clear`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Clear all data stored on the planner. +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[#img-find]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".[.underline]#Output after entering `clear`#"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Clear_Command_Output_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The `clear` command cannot be undone! Your data will be permanently removed once `clear` is executed."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[exit]]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[[save]]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Planner data is saved in the hard disk automatically after any command that changes the data is executed. +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*A*: In order to transfer your data to another computer, you should:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "1. Install the app on the other computer +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "2. Transfer _PlanMySem.txt_ from your old *PlanMySem* folder and place it into the new *PlanMySem* folder. +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This will overwrite the empty data file it creates with the file that contains the data of your previous *PlanMySem* folder."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Add Slot* : `add n/NAME d/DATE_OR_DAY_OF_WEEK st/START_TIME et/END_TIME_OR_DURATION [l/LOCATION] [des/DESCRIPTION] [r/normal] [r/recess] [r/reading] [r/exam] [r/past] [t/TAG]…​` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//E.g. `add n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/CS2113T t/Tutorial` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *List Slot(s)* : `list n/NAME` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//eg. `list n/CS2113T`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Edit Slot* : `edit` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//1. Via tags: `edit t/TAG... [nn/NEW_NAME] [nst/NEW_START_TIME] [net/NEW_END_TIME|DURATION] [nl/NEW_LOCATION] [nd/NEW_DESCRIPTION] [nt/NEW_TAG]...` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//E.g. `edit t/CS2113T t/Tutorial nl/COM2 04-01`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//2. Via `list` command: `edit INDEX [nn/NEW_NAME] [nd/NEW_DATE] [nst/NEW_START_TIME] [net/NEW_END_TIME|DURATION] [nl/NEW_LOCATION] [nd/NEW_DESCRIPTION] [nt/NEW_TAG]...` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//E.g. `edit 1 des/Topic: Sequence Diagram`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Delete Slot* : `delete` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//1. Via tags: `delete t/TAG…​` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//eg. `delete t/CS2113T t/Tutorial`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//2. Via `list` command: `delete INDEX` +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//eg. `delete 2`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Find Slots* : `find [KEYWORD]…​` +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//E.g. `find CS`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *View planner* : `view day [DATE] | view week [WEEK] | view month [MONTH]` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//E.g.`view month`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *View all details* : `view all`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Clear all model* : `clear`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Exit the program* : `exit`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Export .ics  file* : `export`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Import .ics  file* : `import FILENAME`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "General commands that you might find useful in helping you to navigate and configure *PlanMySem*:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Task |Purpose |Command |Example"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003chelp, Help\u003e\u003e_ |Shows you the user guide |`help` | `help`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003chistory, History\u003e\u003e_ |Shows you a history of all commands used |`history` | `history`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cundo, Undo\u003e\u003e_ |Undo your previous command |`undo` | `undo`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003credo, Redo\u003e\u003e_ |Redo your undo | `redo` | `redo`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cclear, Clear\u003e\u003e_ |Clear your planner | `clear` | `clear`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cexit, Exit\u003e\u003e_ |Exit the *PlanMySem* | `exit` | `exit`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Manipulating the Planner"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Commands to manage _slots_:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Task |Purpose |Command |Example"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cadd, Add slot(s)\u003e\u003e_ |Add _slot(s)_ into the planner"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`add` | `add n/CS2113T Tutorial d/mon st/08:00 et/09:00 t/CS2113T`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cedit, Edit slot(s)\u003e\u003e_ |Edit _slot(s)_"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`edit` | `edit t/CS2113T nl/COM2 04-01`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cdelete, Delete slot(s)\u003e\u003e_ |Delete _slot(s)_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`delete` | `delete t/CS2113T`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Viewing the Planner"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Commands to view _slots_:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Task |Purpose |Command |Example"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cview, View the planner\u003e\u003e_ |view the planner in a chosen format/layout |"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`view` | `view month`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003clist, List slot(s)\u003e\u003e_ |list _slot(s)_ of a certain name |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`list` | `list n/CS2113T`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cfind, Find slot(s)\u003e\u003e_ |find _slot(s)_ containing certain keywords |"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`find` | `find CS`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Import/Exporting the Planner"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Commands:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Task |Purpose |Command |Example"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|_\u003c\u003cexport, Export your planner\u003e\u003e_ |Export all your slots into a .ics file|"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`export` | `export`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "|_\u003c\u003cimport, Import into your planner\u003e\u003e_ |Import a native .ics file into your planner from a .ics file |"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "`import` | `import fn/PlanMySem`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 330,
      "marcus-pzj": 126,
      "dingheng4448": 79,
      "-": 67,
      "macchazuki": 25
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat headless allTests` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "seanieyap": 85
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "seanieyap": 42
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 54
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Runs all tests in the `seedu.address.ui` and `systemtests` package"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Runs all non-GUI tests in the `seedu.address`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "tests"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "seanieyap": 107
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name, width \u003d 630]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:netlify/change_site_name.png[Change site name, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 50
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Runs the `./gradlew clean headless allTests coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "--"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "--"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "--"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "--"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level4/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "...."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "...."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "seanieyap": 131
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "audio, canvas, video {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "audio:not([controls]) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[hidden], template {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "script {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none !important"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "html {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: sans-serif;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -ms-text-size-adjust: 100%;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-text-size-adjust: 100%"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "body {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: transparent"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a:focus {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    outline: thin dotted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a:active, a:hover {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    outline: 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1 {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 2em;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: .67em 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "abbr[title] {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom: 1px dotted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "b, strong {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dfn {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "hr {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -moz-box-sizing: content-box;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-sizing: content-box;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: 0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "mark {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #ff0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #000"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "code, kbd, pre, samp {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: monospace;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "pre {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    white-space: pre-wrap"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "q {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    quotes: \"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "small {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 80%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "sub, sup {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 75%;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: baseline"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "sup {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    top: -.5em"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "sub {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    bottom: -.25em"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "img {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "svg:not(:root) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    overflow: hidden"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "figure {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "fieldset {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 1px solid silver;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 2px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .35em .625em .75em"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "legend {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "button, input, select, textarea {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: inherit;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 100%;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "button, input {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: normal"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "button, select {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-transform: none"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "button, html input[type\u003d\"button\"], input[type\u003d\"reset\"], input[type\u003d\"submit\"] {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-appearance: button;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: pointer"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "button[disabled], html input[disabled] {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: default"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "input[type\u003d\"checkbox\"], input[type\u003d\"radio\"] {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-sizing: border-box;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "input[type\u003d\"search\"] {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-appearance: textfield;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -moz-box-sizing: content-box;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-box-sizing: content-box;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-sizing: content-box"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button, input[type\u003d\"search\"]::-webkit-search-decoration {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-appearance: none"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "button::-moz-focus-inner, input::-moz-focus-inner {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "textarea {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    overflow: auto;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: top"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-collapse: collapse;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-spacing: 0"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*, *:before, *:after {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -moz-box-sizing: border-box;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-box-sizing: border-box;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-sizing: border-box"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "html, body {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 100%"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "body {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Noto Serif\", \"DejaVu Serif\", serif;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: auto"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a:hover {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: pointer"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "img, object, embed {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    max-width: 100%;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: auto"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "object, embed {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: 100%"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "img {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -ms-interpolation-mode: bicubic"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".left {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    float: left !important"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".right {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    float: right !important"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".text-left {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: left !important"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".text-right {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: right !important"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".text-center {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: center !important"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".text-justify {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: justify !important"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".hide {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "body {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-font-smoothing: antialiased"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "img, object, svg {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: middle"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "textarea {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: auto;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    min-height: 50px"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "select {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 100%"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".center {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: auto"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".spread {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 100%"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p.lead, .paragraph.lead \u003e p, #preamble \u003e .sectionbody \u003e .paragraph:first-of-type p {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.21875em;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.6"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".subheader, .admonitionblock td.content \u003e .title, .audioblock \u003e .title, .exampleblock \u003e .title, .imageblock \u003e .title, .listingblock \u003e .title, .literalblock \u003e .title, .stemblock \u003e .title, .openblock \u003e .title, .paragraph \u003e .title, .quoteblock \u003e .title, table.tableblock \u003e .title, .verseblock \u003e .title, .videoblock \u003e .title, .dlist \u003e .title, .olist \u003e .title, .ulist \u003e .title, .qlist \u003e .title, .hdlist \u003e .title {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .25em"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "div, dl, dt, dd, ul, ol, li, h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6, pre, form, p, blockquote, th, td {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    direction: ltr"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #2156a5;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: underline;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a:hover, a:focus {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #1d4b8f"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a img {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: none"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: inherit;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeLegibility"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p aside {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .875em;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.35;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6 {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 300;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #ba3925;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeLegibility;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 1em;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .5em;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.0125em"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1 small, h2 small, h3 small, #toctitle small, .sidebarblock \u003e .content \u003e .title small, h4 small, h5 small, h6 small {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 60%;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #e99b8f;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 0"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1 {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 2.125em"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h2 {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.6875em"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h3, #toctitle, .sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.375em"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h4, h5 {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.125em"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h6 {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "hr {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: solid #ddddd8;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px 0 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    clear: both;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 1.25em 0 1.1875em;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: 0"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "em, i {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "strong, b {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "small {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 60%;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "code {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .9)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul, ol, dl {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-position: outside;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: inherit"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul, ol, ul.no-bullet, ol.no-bullet {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.5em"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul li ul, ul li ol {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.25em;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.square li ul, ul.circle li ul, ul.disc li ul {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style: inherit"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.square {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: square"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.circle {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: circle"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.disc {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: disc"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.no-bullet {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style: none"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol li ul, ol li ol {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.25em;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dl dt {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .3125em;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dl dd {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "abbr, acronym {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-transform: uppercase;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 90%;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom: 1px dotted #ddd;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: help"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "abbr {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-transform: none"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "blockquote {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 0 1.25em;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .5625em 1.25em 0 1.1875em;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-left: 1px solid #ddd"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "blockquote cite {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .9375em;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "blockquote cite:before {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\2014 \\0020\""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "blockquote cite a, blockquote cite a:visited {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "blockquote, blockquote p {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6 {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        line-height: 1.2"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    h1 {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 2.75em"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    h2 {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 2.3125em"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    h3, #toctitle, .sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1.6875em"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    h4 {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1.4375em"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: solid 1px #dedede"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table thead, table tfoot {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f7f8f7;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table thead tr th, table thead tr td, table tfoot tr th, table tfoot tr td {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .5em .625em .625em;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: inherit;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: left"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table tr th, table tr td {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .5625em .625em;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: inherit;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table tr.even, table tr.alt, table tr:nth-of-type(even) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f8f8f7"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table thead tr th, table tfoot tr th, table tbody tr td, table tr td, table tfoot tr td {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: table-cell;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.6"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "body {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    tab-size: 4"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6 {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.2;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    word-spacing: -.05em"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1 strong, h2 strong, h3 strong, #toctitle strong, .sidebarblock \u003e .content \u003e .title strong, h4 strong, h5 strong, h6 strong {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".clearfix:before, .clearfix:after, .float-group:before, .float-group:after {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \" \";"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: table"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".clearfix:after, .float-group:after {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    clear: both"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*:not(pre) \u003e code {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .9375em;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: normal !important;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    letter-spacing: 0;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .1em .5ex;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    word-spacing: -.15em;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #f7f7f8;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 4px;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeSpeed"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "pre, pre \u003e code {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .9);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeSpeed"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".keyseq {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(51, 51, 51, .8)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "kbd {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .65em;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #f7f7f7;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 1px solid #ccc;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 3px;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 3px;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em white inset;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em #fff inset;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 .15em;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .2em .5em;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    top: -.1em;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    white-space: nowrap"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".keyseq kbd:first-child {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 0"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".keyseq kbd:last-child {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: 0"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".menuseq, .menu {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8)"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "b.button:before, b.button:after {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    top: -1px;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "b.button:before {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"[\";"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 3px 0 2px"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "b.button:after {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"]\";"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 2px 0 3px"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p a \u003e code:hover {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .9)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header, #content, #footnotes, #footer {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    max-width: 62.5em;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    *zoom: 1;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-left: .9375em;"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-right: .9375em"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header:before, #header:after, #content:before, #content:after, #footnotes:before, #footnotes:after, #footer:before, #footer:after {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \" \";"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: table"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header:after, #content:after, #footnotes:after, #footer:after {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    clear: both"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 1.25em"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content:before {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: none"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header \u003e h1:first-child {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 2.25rem;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header \u003e h1:first-child + #toc {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 8px;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-top: 1px solid #ddddd8"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header \u003e h1:only-child, body.toc2 #header \u003e h1:nth-last-child(2) {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: 8px"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-top: .25em;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: .25em;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-left: .25em;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .6);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: -ms-flexbox;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: -webkit-flex;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -ms-flex-flow: row wrap;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-flex-flow: row wrap;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    flex-flow: row wrap"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details span:first-child {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: -.125em"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details span.email a {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details br {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details br + span:before {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\00a0\\2013\\00a0\""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details br + span.author:before {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\00a0\\22c5\\00a0\";"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header .details br + span#revremark:before {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\00a0|\\00a0\""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header #revnumber {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-transform: capitalize"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#header #revnumber:after {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\00a0\""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content \u003e h1:first-child:not([class]) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: 8px;"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-top: 1rem;"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25rem"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom: 1px solid #efefed;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: .5em"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc \u003e ul {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: .125em"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc ul.sectlevel0 \u003e li \u003e a {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1 {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: .5em 0"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc ul {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: none"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc li {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.3334;"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: .3334em"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc a {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toc a:active {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: underline"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#toctitle {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.2em"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toctitle {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1.375em"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.toc2 {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 15em;"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-right: 0"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-top: 0 !important;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        background-color: #f8f8f7;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        position: fixed;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        width: 15em;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        left: 0;"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        top: 0;"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border-right: 1px solid #efefed;"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border-top-width: 0 !important;"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border-bottom-width: 0 !important;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        z-index: 1000;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding: 1.25em 1em;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        height: 100%;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        overflow: auto"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 #toctitle {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-top: 0;"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-bottom: .8rem;"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1.2em"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 \u003e ul {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: .9em;"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-bottom: 0"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 ul ul {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-left: 0;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 1em"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 ul.sectlevel0 ul.sectlevel1 {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 0;"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-top: .5em;"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-bottom: .5em"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.toc2.toc-right {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 0;"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-right: 15em"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.toc2.toc-right #toc.toc2 {"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border-right-width: 0;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border-left: 1px solid #efefed;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        left: auto;"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        right: 0"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media only screen and (min-width: 1280px) {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.toc2 {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 20em;"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-right: 0"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        width: 20em"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 #toctitle {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1.375em"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 \u003e ul {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: .95em"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc.toc2 ul ul {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 1.25em"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.toc2.toc-right {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: 0;"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-right: 20em"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content #toc {"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-style: solid;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-color: #e0e0dc;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 1.25em;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f8f8f7;"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content #toc \u003e :first-child {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content #toc \u003e :last-child {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footer {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    max-width: 100%;"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 1.25em"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footer-text {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(255, 255, 255, .8);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.44"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sect1 {"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: .625em"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .sect1 {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-bottom: 1.25em"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sect1 + .sect1 {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-top: 1px solid #efefed"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content h1 \u003e a.anchor, h2 \u003e a.anchor, h3 \u003e a.anchor, #toctitle \u003e a.anchor, .sidebarblock \u003e .content \u003e .title \u003e a.anchor, h4 \u003e a.anchor, h5 \u003e a.anchor, h6 \u003e a.anchor {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    z-index: 1001;"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 1.5ex;"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: -1.5ex;"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: none !important;"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    visibility: hidden;"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content h1 \u003e a.anchor:before, h2 \u003e a.anchor:before, h3 \u003e a.anchor:before, #toctitle \u003e a.anchor:before, .sidebarblock \u003e .content \u003e .title \u003e a.anchor:before, h4 \u003e a.anchor:before, h5 \u003e a.anchor:before, h6 \u003e a.anchor:before {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\00A7\";"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .85em;"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-top: .1em"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content h1:hover \u003e a.anchor, #content h1 \u003e a.anchor:hover, h2:hover \u003e a.anchor, h2 \u003e a.anchor:hover, h3:hover \u003e a.anchor, #toctitle:hover \u003e a.anchor, .sidebarblock \u003e .content \u003e .title:hover \u003e a.anchor, h3 \u003e a.anchor:hover, #toctitle \u003e a.anchor:hover, .sidebarblock \u003e .content \u003e .title \u003e a.anchor:hover, h4:hover \u003e a.anchor, h4 \u003e a.anchor:hover, h5:hover \u003e a.anchor, h5 \u003e a.anchor:hover, h6:hover \u003e a.anchor, h6 \u003e a.anchor:hover {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    visibility: visible"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content h1 \u003e a.link, h2 \u003e a.link, h3 \u003e a.link, #toctitle \u003e a.link, .sidebarblock \u003e .content \u003e .title \u003e a.link, h4 \u003e a.link, h5 \u003e a.link, h6 \u003e a.link {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #ba3925;"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content h1 \u003e a.link:hover, h2 \u003e a.link:hover, h3 \u003e a.link:hover, #toctitle \u003e a.link:hover, .sidebarblock \u003e .content \u003e .title \u003e a.link:hover, h4 \u003e a.link:hover, h5 \u003e a.link:hover, h6 \u003e a.link:hover {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #a53221"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".audioblock, .imageblock, .literalblock, .listingblock, .stemblock, .videoblock {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.content \u003e .title, .audioblock \u003e .title, .exampleblock \u003e .title, .imageblock \u003e .title, .listingblock \u003e .title, .literalblock \u003e .title, .stemblock \u003e .title, .openblock \u003e .title, .paragraph \u003e .title, .quoteblock \u003e .title, table.tableblock \u003e .title, .verseblock \u003e .title, .videoblock \u003e .title, .dlist \u003e .title, .olist \u003e .title, .ulist \u003e .title, .qlist \u003e .title, .hdlist \u003e .title {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeLegibility;"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Noto Serif\", \"DejaVu Serif\", serif;"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.tableblock \u003e caption.title {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    overflow: visible;"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    max-width: 0"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".paragraph.lead \u003e p, #preamble \u003e .sectionbody \u003e .paragraph:first-of-type p {"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.tableblock #preamble \u003e .sectionbody \u003e .paragraph:first-of-type p {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: inherit"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock \u003e table {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-collapse: separate;"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: none;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 100%"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock \u003e table td.icon {"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 80px"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock \u003e table td.icon img {"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    max-width: none"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock \u003e table td.icon .title {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-transform: uppercase"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock \u003e table td.content {"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-left: 1.125em;"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-right: 1.25em;"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-left: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock \u003e table td.content \u003e :last-child \u003e :last-child {"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".exampleblock \u003e .content {"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-style: solid;"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-color: #e6e6e6;"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 1.25em;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".exampleblock \u003e .content \u003e :first-child {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".exampleblock \u003e .content \u003e :last-child {"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sidebarblock {"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-style: solid;"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px;"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-color: #e0e0dc;"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 1.25em;"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f8f8f7;"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sidebarblock \u003e :first-child {"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sidebarblock \u003e :last-child {"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: center"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".exampleblock \u003e .content \u003e :last-child \u003e :last-child, .exampleblock \u003e .content .olist \u003e ol \u003e li:last-child \u003e :last-child, .exampleblock \u003e .content .ulist \u003e ul \u003e li:last-child \u003e :last-child, .exampleblock \u003e .content .qlist \u003e ol \u003e li:last-child \u003e :last-child, .sidebarblock \u003e .content \u003e :last-child \u003e :last-child, .sidebarblock \u003e .content .olist \u003e ol \u003e li:last-child \u003e :last-child, .sidebarblock \u003e .content .ulist \u003e ul \u003e li:last-child \u003e :last-child, .sidebarblock \u003e .content .qlist \u003e ol \u003e li:last-child \u003e :last-child {"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".literalblock pre, .listingblock pre:not(.highlight), .listingblock pre[class\u003d\"highlight\"], .listingblock pre[class^\u003d\"highlight \"], .listingblock pre.CodeRay, .listingblock pre.prettyprint {"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f7f7f8"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sidebarblock .literalblock pre, .sidebarblock .listingblock pre:not(.highlight), .sidebarblock .listingblock pre[class\u003d\"highlight\"], .sidebarblock .listingblock pre[class^\u003d\"highlight \"], .sidebarblock .listingblock pre.CodeRay, .sidebarblock .listingblock pre.prettyprint {"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f2f1f1"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 4px;"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    word-wrap: break-word;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 1em;"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .8125em"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".literalblock pre.nowrap, .literalblock pre[class].nowrap, .listingblock pre.nowrap, .listingblock pre[class].nowrap {"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    overflow-x: auto;"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    white-space: pre;"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    word-wrap: normal"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: .90625em"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media only screen and (min-width: 1280px) {"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1em"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".literalblock.output pre {"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #f7f7f8;"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: rgba(0, 0, 0, .9)"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock pre.highlightjs {"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock pre.highlightjs \u003e code {"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 1em;"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock pre.prettyprint {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 0"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock \u003e .content {"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock code[data-lang]:before {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: attr(data-lang);"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .75em;"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    top: .425rem;"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    right: .5rem;"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1;"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-transform: uppercase;"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #999"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock:hover code[data-lang]:before {"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock.terminal pre .command:before {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: attr(data-prompt);"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-right: .5em;"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #999"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"$\""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.pyhltable {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-collapse: separate;"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: none"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.pyhltable td {"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: top;"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.pyhltable td.code {"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-left: .75em;"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-right: 0"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "pre.pygments .lineno, table.pyhltable td:not(.code) {"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #999;"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-right: .5em;"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-right: 1px solid #ddddd8"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "pre.pygments .lineno {"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: .25em"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.pyhltable .linenodiv {"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: none !important;"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-right: 0 !important"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock {"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 1em 1.25em 1.5em;"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: table"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock \u003e .title {"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: -1.5em;"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .75em"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock blockquote, .quoteblock blockquote p {"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.15rem;"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.75;"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    word-spacing: .1em;"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    letter-spacing: 0;"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic;"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: justify"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock blockquote {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock blockquote:before {"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\201c\";"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 2.75em;"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: .6em;"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: -.6em;"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-shadow: 0 1px 2px rgba(0, 0, 0, .1)"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock blockquote \u003e .paragraph:last-child p {"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .attribution {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: .5em;"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: .5ex;"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: right"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .quoteblock {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 0;"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: 0;"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .5em 0;"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-left: 3px solid rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .quoteblock blockquote {"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 0 0 .75em"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .quoteblock blockquote:before {"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".verseblock {"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 1em 1.25em 1em"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".verseblock pre {"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans;"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.15rem;"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 300;"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeLegibility"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".verseblock pre strong {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".verseblock .attribution {"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: 1.25rem;"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: .5ex"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .attribution, .verseblock .attribution {"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .9375em;"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .attribution br, .verseblock .attribution br {"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock .attribution cite, .verseblock .attribution cite {"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    letter-spacing: -.025em;"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock.abstract {"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 0 1.25em 0;"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock.abstract blockquote, .quoteblock.abstract blockquote p {"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    word-spacing: 0"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".quoteblock.abstract blockquote:before, .quoteblock.abstract blockquote p:first-of-type:before {"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.tableblock {"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    max-width: 100%;"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-collapse: separate"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.tableblock td \u003e .paragraph:last-child p \u003e p:last-child, table.tableblock th \u003e p:last-child, table.tableblock td \u003e p:last-child {"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.tableblock, th.tableblock, td.tableblock {"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0 solid #dedede"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-all th.tableblock, table.grid-all td.tableblock {"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 0 1px 1px 0"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-all tfoot \u003e tr \u003e th.tableblock, table.grid-all tfoot \u003e tr \u003e td.tableblock {"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px 1px 0 0"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-cols th.tableblock, table.grid-cols td.tableblock {"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 0 1px 0 0"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-all * \u003e tr \u003e .tableblock:last-child, table.grid-cols * \u003e tr \u003e .tableblock:last-child {"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-right-width: 0"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-rows th.tableblock, table.grid-rows td.tableblock {"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 0 0 1px 0"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-all tbody \u003e tr:last-child \u003e th.tableblock, table.grid-all tbody \u003e tr:last-child \u003e td.tableblock, table.grid-all thead:last-child \u003e tr \u003e th.tableblock, table.grid-rows tbody \u003e tr:last-child \u003e th.tableblock, table.grid-rows tbody \u003e tr:last-child \u003e td.tableblock, table.grid-rows thead:last-child \u003e tr \u003e th.tableblock {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-bottom-width: 0"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.grid-rows tfoot \u003e tr \u003e th.tableblock, table.grid-rows tfoot \u003e tr \u003e td.tableblock {"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px 0 0 0"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.frame-all {"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.frame-sides {"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 0 1px"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table.frame-topbot {"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px 0"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "th.halign-left, td.halign-left {"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: left"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "th.halign-right, td.halign-right {"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: right"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "th.halign-center, td.halign-center {"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: center"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "th.valign-top, td.valign-top {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: top"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "th.valign-bottom, td.valign-bottom {"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: bottom"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "th.valign-middle, td.valign-middle {"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: middle"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "table thead th, table tfoot th {"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "tbody tr th {"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: table-cell;"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #f7f8f7"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "tbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p {"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p.tableblock \u003e code:only-child {"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: none;"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p.tableblock {"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "td \u003e div.verse {"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    white-space: pre"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol {"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.75em"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul li ol {"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.5em"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dl dd {"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.125em"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dl dd:last-child, dl dd:last-child \u003e :last-child {"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol \u003e li p, ul \u003e li p, ul dd, ol dd, .olist .olist, .ulist .ulist, .ulist .olist, .olist .ulist {"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .625em"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.unstyled, ol.unnumbered, ul.checklist, ul.none {"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: none"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.unstyled, ol.unnumbered, ul.checklist {"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: .625em"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.checklist li \u003e p:first-child \u003e .fa-square-o:first-child, ul.checklist li \u003e p:first-child \u003e .fa-check-square-o:first-child {"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 1em;"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .85em"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.checklist li \u003e p:first-child \u003e input[type\u003d\"checkbox\"]:first-child {"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 1em;"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    top: 1px"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.inline {"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: 0 auto .625em auto;"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: -1.375em;"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: 0;"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    overflow: hidden"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.inline \u003e li {"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.375em;"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ul.inline \u003e li \u003e * {"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".unstyled dl dt {"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: normal"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.arabic {"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: decimal"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.decimal {"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: decimal-leading-zero"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.loweralpha {"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: lower-alpha"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.upperalpha {"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: upper-alpha"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.lowerroman {"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: lower-roman"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.upperroman {"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: upper-roman"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ol.lowergreek {"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    list-style-type: lower-greek"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".hdlist \u003e table, .colist \u003e table {"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: none"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".hdlist \u003e table \u003e tbody \u003e tr, .colist \u003e table \u003e tbody \u003e tr {"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: none"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "td.hdlist1, td.hdlist2 {"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: top;"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 .625em"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "td.hdlist1 {"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: 1.25em"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".literalblock + .colist, .listingblock + .colist {"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: -.5em"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".colist \u003e table tr \u003e td:first-of-type {"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 .75em;"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".colist \u003e table tr \u003e td:last-of-type {"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .25em 0"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".thumb, .th {"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 0;"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: solid 4px #fff;"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-box-shadow: 0 0 0 1px #ddd;"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-shadow: 0 0 0 1px #ddd"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".imageblock.left, .imageblock[style*\u003d\"float: left\"] {"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: .25em .625em 1.25em 0"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".imageblock.right, .imageblock[style*\u003d\"float: right\"] {"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: .25em 0 1.25em .625em"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".imageblock \u003e .title {"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".imageblock.thumb, .imageblock.th {"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 6px"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".imageblock.thumb \u003e .title, .imageblock.th \u003e .title {"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 .125em"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".image.left, .image.right {"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: .25em;"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .25em;"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 0"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".image.left {"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-right: .625em"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".image.right {"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: .625em"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a.image {"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "a.image object {"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    pointer-events: none"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "sup.footnote, sup.footnoteref {"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .875em;"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: static;"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    vertical-align: super"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "sup.footnote a, sup.footnoteref a {"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "sup.footnote a:active, sup.footnoteref a:active {"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: underline"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footnotes {"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-top: .75em;"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding-bottom: .75em;"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .625em"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footnotes hr {"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 20%;"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    min-width: 6.25em;"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin: -.25em 0 .75em 0;"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-width: 1px 0 0 0"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footnotes .footnote {"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: 0 .375em 0 .225em;"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.3334;"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .875em;"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-left: 1.2em;"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-indent: -1.05em;"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: .2em"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footnotes .footnote a:first-of-type {"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#footnotes .footnote:last-of-type {"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#content #footnotes {"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-top: -.625em;"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    padding: .75em 0"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".gist .file-data \u003e table {"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".gist .file-data \u003e table td.line-data {"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 99%"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "div.unbreakable {"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    page-break-inside: avoid"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".big {"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: larger"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".small {"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: smaller"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".underline {"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: underline"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".overline {"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: overline"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".line-through {"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-decoration: line-through"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".aqua {"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #00bfbf"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".aqua-background {"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #00fafa"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".black {"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #000"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".black-background {"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #000"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".blue {"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #0000bf"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".blue-background {"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #0000fa"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".fuchsia {"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bf00bf"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".fuchsia-background {"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #fa00fa"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".gray {"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #606060"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".gray-background {"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #7d7d7d"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".green {"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #006000"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".green-background {"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #007d00"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".lime {"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #00bf00"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".lime-background {"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #00fa00"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".maroon {"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #600000"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".maroon-background {"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #7d0000"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".navy {"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #000060"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".navy-background {"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #00007d"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".olive {"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #606000"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".olive-background {"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #7d7d00"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".purple {"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #600060"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".purple-background {"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #7d007d"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".red {"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bf0000"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".red-background {"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #fa0000"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".silver {"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #909090"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".silver-background {"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #bcbcbc"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".teal {"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #006060"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".teal-background {"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #007d7d"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".white {"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bfbfbf"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".white-background {"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #fafafa"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".yellow {"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bfbf00"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".yellow-background {"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #fafa00"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "span.icon \u003e .fa {"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: default"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"] {"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 2.5em;"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-shadow: 1px 1px 2px rgba(0, 0, 0, .5);"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    cursor: default"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.icon .icon-note:before {"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\f05a\";"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #19407c"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.icon .icon-tip:before {"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\f0eb\";"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-shadow: 1px 1px 2px rgba(155, 155, 0, .8);"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #111"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.icon .icon-warning:before {"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\f071\";"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bf6900"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.icon .icon-caution:before {"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\f06d\";"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bf3400"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".admonitionblock td.icon .icon-important:before {"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: \"\\f06a\";"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #bf0000"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".conum[data-value] {"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #fff !important;"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-border-radius: 100px;"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-radius: 100px;"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: .75em;"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    width: 1.67em;"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    height: 1.67em;"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    line-height: 1.67em;"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".conum[data-value] * {"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: #fff !important"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".conum[data-value] + b {"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".conum[data-value]:after {"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    content: attr(data-value)"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "pre .conum[data-value] {"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    top: -.125em"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "b.conum * {"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    color: inherit !important"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".conum:not([data-value]):empty {"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "dt, th.tableblock, td.content, div.footnote {"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    text-rendering: optimizeLegibility"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "h1, h2, p, td.content, span.alt {"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    letter-spacing: -.01em"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p strong, td.content strong, div.footnote strong {"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    letter-spacing: -.005em"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p, blockquote, dt, td.content, span.alt {"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1.0625rem"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "p {"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    margin-bottom: 1.25rem"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".sidebarblock p, .sidebarblock dt, .sidebarblock td.content, p.tableblock {"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".exampleblock \u003e .content {"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    background-color: #fffef7;"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    border-color: #e0e0dc;"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    -webkit-box-shadow: 0 1px 4px #e0e0dc;"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    box-shadow: 0 1px 4px #e0e0dc"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".print-only {"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    display: none !important"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @page {"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin: 1.25cm .75cm"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    * {"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        -webkit-box-shadow: none !important;"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        box-shadow: none !important;"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        text-shadow: none !important"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    a {"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        color: inherit !important;"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        text-decoration: underline !important"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    a.bare, a[href^\u003d\"#\"], a[href^\u003d\"mailto:\"] {"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        text-decoration: none !important"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    a[href^\u003d\"http:\"]:not(.bare):after, a[href^\u003d\"https:\"]:not(.bare):after {"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        content: \"(\" attr(href) \")\";"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: inline-block;"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: .875em;"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-left: .25em"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    abbr[title]:after {"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        content: \" (\" attr(title) \")\""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    pre, blockquote, tr, img, object, svg {"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        page-break-inside: avoid"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    thead {"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: table-header-group"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    svg {"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        max-width: 100%"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    p, blockquote, dt, td.content {"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: 1em;"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        orphans: 3;"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        widows: 3"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        page-break-after: avoid"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc, .sidebarblock, .exampleblock \u003e .content {"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        background: none !important"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #toc {"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border-bottom: 1px solid #ddddd8 !important;"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-bottom: 0 !important"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .sect1 {"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding-bottom: 0 !important"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .sect1 + .sect1 {"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border: 0 !important"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #header \u003e h1:first-child {"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-top: 1.25rem"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #header {"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        text-align: center"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #header \u003e h1:first-child {"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border: 0 !important;"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin: 2.5em 0 1em 0"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #header .details {"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border: 0 !important;"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: block;"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding: 0 !important"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #header .details span:first-child {"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin-left: 0 !important"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #header .details br {"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: block"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #header .details br + span:before {"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        content: none !important"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #toc {"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        border: 0 !important;"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        text-align: left !important;"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding: 0 !important;"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        margin: 0 !important"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    body.book #toc, body.book #preamble, body.book h1.sect0, body.book .sect1 \u003e h2 {"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        page-break-before: always"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .listingblock code[data-lang]:before {"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: block"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        background: none !important;"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        padding: 0 .9375em"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        color: rgba(0, 0, 0, .6) !important;"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        font-size: .9em"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .hide-on-print {"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: none !important"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .print-only {"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: block !important"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .hide-for-print {"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: none !important"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    .show-for-print {"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display: inherit !important"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@media print {a[href]:after{content: none !important;}}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 2030,
      "-": 3
    }
  },
  {
    "path": "docs/team/dingheng4448.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Lim Ding Heng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ":caution-caption: :fire:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d PROJECT: PlanMySem"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Hello there! I am Lim Ding Heng, a Year 2 Information Security undergraduate at the National University of Singapore and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "will be graduating in 2020. This portfolio documents my contributions to the project,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main[*PlanMySem*], which was developed together with my team;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003c\u003cmarcus-pzj#, Marcus\u003e\u003e, \u003c\u003cmacchazuki#, Julian\u003e\u003e, and \u003c\u003cseanieyap#, Sean\u003e\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "My team and I have morphed the original https://github.com/nusCS2113-AY1819S2/addressbook-level3[AddressBook (Level 3)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "into *PlanMySem* for our Software Engineering project. *PlanMySem* is a text-based (Command Line Interface)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "scheduling/calendar application that caters to NUS students and staff who prefer to use a desktop application for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "managing their schedule/calendar efficiently. *PlanMySem* offers the following features and benefits:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Automatic creation of a planner that is synchronized to the NUS academic calendar for the current semester so you will"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "not have to waste time manually doing so."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Flexible commands to facilitate easy creation, editing and deleting of items so you would enjoy a smooth experience"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "while using the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* A unique recursion system which takes into account special weeks such as recess week or reading week so as to allow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "you to add recurring items efficiently."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* An intuitive tagging system for you to manage items productively."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Optimized for you if you prefer to work with a Command Line Interface (CLI) and/or are learning to work more"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "efficiently with CLI tools."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Utilizes minimal resources on your machine while still allowing you to view your schedules swiftly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d About this Portfolio"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "My role was to implement the automatic synchronization of *PlanMySem* with the academic calendar as well as the `view`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "feature. The following sections illustrate my implementations in more detail, as well as the relevant sections I have"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "contributed to the user and developer guides in relation to my implementations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "For ease of communication, this document will refer to lessons/activities/events/appointments that you might add into"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "the planner as _slots_."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Throughout this portfolio, there will be various icons used as described below."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a tip. Follow these suggested tips to make your life much simpler when using *PlanMySem*!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This is a note. These are things for you to take note of when using *PlanMySem*."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Main feature*: I implemented the automatic synchronization of *PlanMySem* with the academic calendar."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** What it does: Upon running *PlanMySem*, the planner is automatically initialized and synchronized with details"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "pertaining to the current academic semester. The current academic semester is dynamically generated based on the current"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "date. This enhancement allows *PlanMySem* to function as intended; as a planner for the academics."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Justification: This enhancement is required as the other commands in *PlanMySem*, including the `view` command,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "rely on the proper initialization of the current academic semester for their command functionalities. The current"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "academic semester is dynamically generated from the current date so as to ensure *PlanMySem* continues to work in the future."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Highlights: This enhancement is critical to existing commands and commands to be added in future. Hence, it required"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "an in-depth analysis of design alternatives pertaining to the aspect of academic calendar generation. The chosen"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "implementation must be reliable indefinitely."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Minor features*:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** I added the `view` command and implemented the various types of planner views which will allow the user to view the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "planner in different viewing formats."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** I also enhanced the parsing for `view` command to allow for more flexibility with the command parameters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Please click this link to view my code contributions on RepoSense"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ": [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003ddingheng4448\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-14\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003ddingheng4448\u0026tabRepo\u003dCS2113-AY1819S2-T08-3_main_master[Contributed code]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Please click this link to view my contributed pull requests"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ": [https://github.com/CS2113-AY1819S2-T08-3/main/pulls?q\u003dis%3Apr+author%3Adingheng4448+is%3Aclosed[Contributed pull requests]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** Wrote JUnit tests for existing features to increase overall coverage. I have ensured that the coverage of my"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "contributed code is at 100%."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "(Pull requests https://github.com/CS2113-AY1819S2-T08-3/main/pull/76[#76],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/116[#116],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/129[#129],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/139[#139],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/145[#145],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/147[#147],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/150[#150],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/151[#151])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** Review and edit existing contents of the User Guide:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/81[#81],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/99[#99],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/106[#106],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/108[#108],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/124[#124],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/129[#129],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/138[#138],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/190[#190]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** Review and edit existing contents of the Developer Guide:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "(Commits"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/commit/de375295c2b10b2ef08d38f885a1ebfbde972a66#diff-d23c8091515dc18149f4f2e759e1e288[#1],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/commit/55fa543bef202fd44f91b64882de4ac2c161e0ed#diff-d23c8091515dc18149f4f2e759e1e288[#2],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/commit/e7b9300902116c781f983c36edf87848dc33f678#diff-d23c8091515dc18149f4f2e759e1e288[#3],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/commit/791f22409245076f70303658de9fb60a72f95a4f#diff-d23c8091515dc18149f4f2e759e1e288[#4])"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "(Pull requests"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/81[#81],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/116[#116],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/117[#117],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/124[#124],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/134[#134],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/135[#135],"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/137[#137],"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/138[#138],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/151[#151],"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/154[#154],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/190[#190],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/193[#193])"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/12[#12],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/98[#98],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "https://github.com/CS2113-AY1819S2-T08-3/main/pull/109[#109]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|_This section includes a segment which I contributed to the User Guide and it showcases my ability to write"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "documentation suitable for end-users._"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Links to my contributed sections in the User Guide: +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#view[View the Planner : view / v]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d View the Planner : `view` / `v`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View the planner in a month/week/day view."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. View the monthly calendar view of the current academic semester. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Format: `view month`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. View the weekly calendar view of the current academic week. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Format: `view week [WEEK]` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`[WEEK]` is valid if it is:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any number from 1 to 13 (as there is only week 1 to 13 in a semester)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any of the following text (case-insensitive): recess, reading, exam, examination."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "You may add in the parameter `details` after `[WEEK]` to view the details of all _slots_ with respect to the `[WEEK]`. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "E.g. `view week 13 details` will allow you to view details of all _slots_ in week 13!"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. View the day view of a particular day in the academic semester. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Format: `view day [DATE_OR_DAY_OF_WEEK]` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`[DATE_OR_DAY_OF_WEEK]` is valid if it is:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any number from 1 to 7 (the numbers 1 to 7 corresponds to the days Monday to Sunday respectively)."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* Any of the following text (case-insensitive): Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The three-letter abbreviation of the days (e.g. mon, tue) is accepted as well."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* A date in the format of \"dd-mm\" or \"dd-mm-yyyy\" (e.g. 16-04 or 16-04-2019). The date must exist in the current semester."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "You may omit `[WEEK]`/`[DATE_OR_DAY_OF_WEEK]` to view the calendar with respect to the current date! +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "E.g. `view week` will allow you to view the current week and `view day` will allow you to view the current day! +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "If you have added _slots_ to the planner, the expected output after successfully running `view week` will be similar to"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "the expected output shown in the figure below."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[#img-view]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".[.underline]#Expected output after entering `view week`#"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The following are some examples of the `view` command which you can try to run."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Month view example:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view month` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the months of the current academic semester."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Week view examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view week details` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for current week of the academic calendar with details of all _slots_."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view week 7` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for week 7 of the academic calendar."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view week recess` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for recess week of the academic calendar."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Day view examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view day` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the current date."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view day 01-03-2019` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the first of March."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* `view day monday` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "View planner for the upcoming Monday."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "|_This section includes a segment which I contributed to the Developer Guide and it showcases my ability to write"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "  technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Links to my contributed sections in the Developer Guide: +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#Planner-Initialization[Initialization of the Planner and its Semester] +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#view[View feature]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d View feature"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This feature presents the planner in different formats to the user. The available formats are the month view, week view,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "and the day view. This section will detail how this feature is implemented."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Upon invoking the `view` command with valid parameters (refer to https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#view[UserGuide.adoc] for `view` usage),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "a sequence of events is executed. For clarity, the sequence of events will be in reference to the execution"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "of a `view month` command. A graphical representation is also included in the Sequence Diagram below for your reference"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "when following through the sequence of events. The sequence of events are as follows:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Firstly, the `view month` command is passed into the `execute` function of `LogicManager` to be parsed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. `LogicManager` then invokes the `parseCommand` function of `ParserManager`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. `ParserManager` in turn invokes the `parse` function of the appropriate parser for the `view` command which in this case,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "is `ViewCommandParser`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The `view` command can be parsed into only 3 general types of views which are the month, week or day view as"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "specified in the command parameter."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "4. After parsing is done, `ViewCommandParser` would instantiate the `ViewCommand` object which would be returned to the `LogicManager`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "5. `LogicManager` is then able to invoke the `execute` function of the returned `ViewCommand` object."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "6. In the `execute` function of the `ViewCommand` object, data will be retrieved from the `Model` component (i.e. retrieving data from the current `Semester`)."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "7. Now that the `ViewCommand` object has the data of the current semester, it is able to invoke the `displayMonthView` method."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "8. With the output returned from the `displayMonthView`, the `CommandResult` object will be instantiated."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "9. This `CommandResult` object would be returned to the `LogicManager` which then returns the same `CommandResult` object"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "back to the `UI` component."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "10. Finally, the `UI` component would display the contents of the `CommandResult` object to the user. For this `view month`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "command, the displayed result would be the monthly calendar view of all months in the current semester."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ".Sequence Diagram upon executing the `view month` command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "image::ViewMonthSequenceDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "The 3 general types of view (month, week, day) are generated by the methods `displayMonthView`, `displayWeekView`,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayDetailedWeekView`, `displayDayView` from the `ViewCommand` class and the implementation of these methods is"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "explained below."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayMonthView` method displays all the months of the current semester in a monthly calendar format. Each academic week"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "of the semester is also indicated in the display. The implementation of this method can be"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "broken down into 3 parts:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Print month header (e.g. January 2019) and calculate required amount of whitespace before the 1st of the month."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Print all days of the month using a loop."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "   * Append academic week after each Saturday or last day of month."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. Repeat parts 1 and 2 for every month in the semester."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayWeekView` method displays the weekly calendar format of a specified week. The implementation of this method can be"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "broken down into the following steps:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Print academic week header (e.g. Week 13 of Sem 2)."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Retrieve all days of the week and for each day, retrieve its _slots_ into an `ArrayList`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. For each day, print the _slot_ details (only start time, end time and a shortened title) and remove the _slot_ from"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "the `ArrayList`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "4. Repeat step 3 until the `ArrayList` of _slots_ for each day is empty."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayDayView` method displays the details of all _slots_ of a specified day. The implementation of this method can be"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "broken down into 2 parts:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Retrieve all _slots_ for the specified day."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Print all details of each _slot_ found."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "`displayDetailedWeekView` method displays the details of all _slots_ of a specified week since `displayWeekView` only shows"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": " a formatted and summarised week view. The implementation of this method can be broken down into the following steps:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "1. Print academic week header (e.g. Week 13 of Sem 2)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "2. Retrieve all days of the week."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "3. For each day, print all details of all _slots_ via the `displayDayView` method."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "This section details our considerations for the implementation of the `view` feature."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Functionality of `view week` command"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Alternative 1 (current choice):* Option for user to display a formatted summarised week view or a detailed week view."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Pros: The formatted summarised week view is uncluttered. User given the choice and flexibility for the week view."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Cons: User is required to spend a little more time to specify an additional parameter in the `view week` command."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "* *Alternative 2:* Only a single formatted week view which displays details of all _slots_ in the specified week."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Pros: Efficient for the user as user is only required to enter a single command to view all details of all _slots_."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "** Cons: The formatted week view will be too cluttered as there are too many _slots_ and lots of details. Formatting is"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "an issue as well as details of each _slot_ can be of varying lengths."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "Alternative 1 was chosen to be implemented as it gives the user freedom of choice to select the degree of details to be"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "displayed in the output of the `view week` command. The output of alternative 1 is also less cluttered than alternative 2"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "and thus enhances the presentability of *PlanMySem*."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "{zwsp}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 33,
      "dingheng4448": 275
    }
  },
  {
    "path": "docs/team/macchazuki.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Julian Lim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":caution-caption: :fire:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d PROJECT: PlanMySem"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "My team and I were tasked with enhancing a basic command line interface addressbook application, https://github.com/nusCS2113-AY1819S2/addressbook-level3[AddressBook Level 3], for our Software Engineering project. +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "We chose to morph it into a student planner called *PlanMySem*. This planner is made specially for NUS students and staff, containing features that will help them manage their school schedules more easily. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "*PlanMySem* is automatically synchronised according to the current semester of the NUS academic calendar."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Special weeks such as recess week and reading week are taken into account within our unique recursion system."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This allows students and staff to easily keep track of school related matters such as classes, deadlines and examinations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "These activities can also be efficiently managed via the intuitive tagging system. The user can then view his schedule for the day or week (shown in the figure below), or view the current semester."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[#img-view]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".[.underline]#Example of viewing the current week#"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The next sections will illustrate my enhancements in more detail as well as my various contributions to the project."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Kindly take note that throughout this portfolio, there will be various icons used as described as such."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This is a tip. Follow these suggested tips to make your life much simpler when using *PlanMySem*!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This is a note. These are things for you to take note of when using *PlanMySem*."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This is a sign-post informing caution. Please take note of these items and exercise some care."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This section shows a summary of the features I have implemented in *PlanMySem* as well as some details regarding the implementation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* *Major enhancement 1*: I added the ability to *import .ics files*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** What it does: allows the user to import .ics files obtained from this or other applications."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".ics stands for a iCalendar file format. .ics files are one of the most commonly used calendar formats in applications such as Google Calendar and Outlook."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Justification: This feature improves the product significantly because the user can import existing appointments on other calendar applications into PlanMySem, allowing him to combine external appointments with his school schedule."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Highlights: This enhancement works with existing as well as future commands. In particular, this enhancement works hand-in-hand with 2 features that I will go into detail later: exporting and data and encryption."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "An in-depth analysis of the add command was necessary to understand how slots are added into our planner as I had to add multiple slots into the planner at once."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Code available https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/src/planmysem/logic/commands/ImportCommand.java[here]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* *Major enhancement 2*: I added the ability to *export .ics files*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** What it does: allows the user to export .ics files from the planner  ** What it does: allows the user to export .ics files from the planner"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Justification: This feature improves the product because the user can export current slots in the planner and merge them into other calendar applications. The user can also export the .ics file to be imported across devices."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Highlights: This enhancement works with existing as well as future commands. In particular, this enhancement works hand-in-hand with the import feature described above. This allows the user to export a file that can be imported into PlanMySem on another device."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This enhancement also allows the user to obtain a readable file as the data will be encrypted (discussed later). +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "An in-depth analysis of how the planner stores slots was necessary in order to extract their details to be exported."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Code available https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/src/planmysem/logic/commands/ExportCommand.java[here]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* *Minor enhancement*: I added data encryption of the storage file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** What it does: the planner automatically encrypts the data before saving it into a .txt file. This data is then decrypted before being loaded by the application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Justification: This feature improves the product because the user\u0027s schedule data will not be able to easily obtained by others."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Highlights: This enhancement works with existing as well as future commands. In particular, this enhancement works hand-in-hand with the import and export functions. As we have decided to encrypt the raw data file, the user will not be able to obtain the raw data of his planner. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "As a result, the export function allows the user to obtain a read-able text file when he wishes to. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This enhancement also allows the user to obtain a readable file as the data will be encrypted (discussed later). +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "An in-depth analysis of how the planner data is stored was necessary to identify where encryption and decryption should be done on the data. Also, a general understanding of ciphers and data encryption was necessary in implementation of this enhancement."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Code available https://github.com/CS2113-AY1819S2-T08-3/main/tree/master/src/planmysem/storage[here]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    ** View my RepoSense contribution analysis: https://nuscs2113-ay1819s2.github.io/dashboard-beta/#\u003dundefined\u0026search\u003dmacchazuki[here]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "**Test coverage:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "*** I wrote JUnit tests for all my features and had close to 100% coverage. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "*** I wrote Use Cases on the Developer Guide: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc[here]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._ +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#encrypt[Data Encryption] +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#import[Importing files] +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#export[Exporting files] +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[[encrypt]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Encrypting/decrypting data files"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Planner data is automatically encrypted before saving and decrypted before loading. You do not need to encrypt or decrypt the data manually."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[[export]]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Exporting .ics formatted files: `export`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "You can export the planner as a .ics file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Format: `export [fn/FILE_NAME]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[#img-export]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".[.underline]#Output after entering `export`#"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::Export_Command_Output_1.png[width\u003d\"420\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The default name of the exported file is \"PlanMySem.ics\" and is saved in the main directory."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The .ics file can be imported into other calendar apps that support .ics files such as Google Calendar. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[#img-exportFile]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".[.underline]#Location of PlanMySem.ics file#"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::Export_Command_Directory_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "A file with the ICS file extension is an iCalendar file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "These are plain text files that include calendar event details like a description, beginning and ending times, location, etc."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[[import]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Importing native .ics files `import`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "You can import a .ics file generated by *PlanMySem* into the current planner."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Format: `import [fn/FILE_NAME]/`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This feature is to allow transfer of data between *PlanMySem* on different devices. This feature is NOT for importing non-native .ics files. Hence, only .ics files generated by *PlanMySem* should be imported."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._ +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#data-exporting-exporting-feature[Exporting files] +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#data-encryption-decryption-feature[Data Encryption] +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "- https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#use-cases[Use cases] +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Data Exporting / Exporting feature"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This feature exports the Planner into a .ics file. This section will detail how this feature is implemented."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Upon entering the `export` command with valid parameters (refer to \u003c\u003cUserGuide#, UserGuide.adoc\u003e\u003e for `export` usage), the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "following sequence of events is executed:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "1. The `ParserManager` parses the `export` command and calls the `parse` method in `ExportCommandParser`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "2. The `ExportCommandParser` then constructs a `ExportCommand` object with a filename."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "3. The Command object is returned and execution will get the current `Semester` from `Model`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "4. The `IcsSemester` is then constructed using `Semester` and converted to a `String`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "5. The `String` is then written to a file with the filename parsed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "5. The result of the command execution, `CommandResult`, will then returned to `Ui`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Given below is the Sequence Diagram upon executing the `export` command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".Sequence of implementation for the `export` Command"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::ExportCommandSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The `ExportCommandParser` will check whether the optional filename parameter was input. If this parameter is included, the input filename is used. Else, if no other characters have been input (e.g. \"export\"), the default \"PlanMySem\" is used as the filename."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This process can be seen from the activity diagram in the figure below."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ".Activity diagram showing the workflows for `export` Command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "image::ExportCommandActivityDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This portion explains alternative implementations as well as the rationale behind my chosen method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using a .ics library"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* **Alternative 1 (current choice):** Writing my own .ics file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Pros: No need to include and understand how to use the external library."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Cons: Difficult to read and work with .ics formatting."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* **Alternative 2:** Using iCal4j library to read and write .ics files."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Pros: No need to manually format data into .ics format."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** Cons: Difficult to translate our recursion system to the .ics RRULE system."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Reason for current choice: Using the library will allow `PlanMySem` to easily import non-native .ics files. However, this would require changes to `Model` as currently the recurrence for slots is not saved. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "In addition, as our application is a specially designed planner for NUS matters, I felt that it was unnecessary to have the same slots on multiple applications. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Hence, I chose to code the reading and writing of .ics files and add a disclaimer that importing of non-native .ics files is likely to cause errors."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Data Encryption / Decryption feature"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The storage file \"PlanMySem.txt\" is encrypted to prevent easy access of the user\u0027s calendar."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "We are encrypting and decrypting the data using the Java `Cipher`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This feature is implemented through the `Encryptor` that contains the encrypt and decrypt methods. The encrypt method takes a `String` as an argument and returns a encrypted String object. The decrypt method takes in a String object as an argument and returns the decrypted message as a String object."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The encryption is done using AES/CBC/PKCS5Padding. The key used for encryption/decryption is generated through various device parameters such as username, operating system (OS) and java runtime version. The secret key generated is stored in a file named \"KeyStorage.jceks\". No password is required from the user to retrieve this key, but a password input can be added to `KeyStorage` to improve security. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "A initialization vector (IV) is required for the Cipher Block Chain (CBC) mode of encryption. A random IV is generated and appended at the beginning of the data before being stored. The IV is then retrieved from the same file to decrypt the data."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Encryption of the data is done automatically before the file is saved. In the implementation, the AdaptedPlanner is first marshaled into a `StringWriter` before being encrypted and written into the file. This is to ensure that the data is JAXB formatted and the save algorithm is unaffected."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Similarly, decryption of the data is done automatically before it is loaded. In the implementation, the file is read and decrypted and parsed into a `StringReader`. The `StringReader` is then un-marshaled and loaded. This is to ensure that the file is converted back into a JAXB object before being loaded and the load algorithm is unaffected."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d\u003d User Preferences [COMING IN 2.0]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "The files generated by *PlanMySem* are also named \"PlanMySem\" and are saved in user\u0027s PlanMySem folder by default. This default filename and file path can be changed via the the configuration file (default: `config.json`). +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "There is no need for manual configuration of the `Semester` as it is initialized dynamically as mentioned in"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003c\u003cPlanner-Initialization\u003e\u003e."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d\u003d Use Case: Export planner"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* MSS:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** 1. User inputs command to export the planner."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** 2. System converts planner to .ics format."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** 3. System saves .ics file in the main directory as \"PlanMySem.ics\"."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "** 4. System displays confirmation message."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "+"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "* Extensions:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":: 1a. A filename is included in the command."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "::: 1ai. The filename is valid."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1ai.1. System converts planner to .ics format."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1ai.2. System saves .ics file in the respective directory."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1ai.3. System displays confirmation message."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "+"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "::: 1aii. The filename is invalid"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ":::: 1aii.1 System outputs error message."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "+"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "\u003d\u003d PROJECT: PlanMySem"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 25,
      "macchazuki": 233
    }
  },
  {
    "path": "docs/team/marcus-pzj.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Marcus Phua - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d PROJECT: PlanMySem"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Hi! I am Marcus Phua and I am currently a Year 2 Computer Engineering undergraduate at the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "This is where I document my contributions to *PlanMySem*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "For our Software Engineering project, my team and I were tasked with enhancing a basic command line interface address book  application. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "We chose to morph it into a text-based (Command Line Interface) scheduling/calendar application called *PlanMySem*, which caters to NUS students and staff who prefer to use a desktop application for managing their schedule/calendar. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*PlanMySem* automatically creates a planner that is synchronised according to the NUS academic calendar for the current semester and enables easy creation, editing and deleting of items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Special weeks such as recess week and reading week are taken into account within our unique recursion system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Items can then be efficiently managed via the intuitive tagging system. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "This symbol indicates important information. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Also take note: +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[grid\u003dnone]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[frame\u003dnone]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|`list` | A grey highlight (called a mark-up) indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|[blue]`VersionedPlanner`| Blue text with grey highlight indicates a component, class, method or object in the architecture of the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "My role was to design and write the codes for the `list`, `find`, `history`, `undo` and `redo` features."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The following sections illustrate these enhancements in more detail, as well as"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "the relevant sections I have added to the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* *Main Feature*: I implemented the searching framework within the [blue]`Planner`. The searching framework"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "comprises of 2 sections:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "** **List**: I added the ability to *search and list [blue]`Slots`* using a keyword user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** What it does: The `list` command *generates a list* containing all [blue]`Slots` whose name/tag *directly matches* the specified keyword (not case-sensitive)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Justification: After the user has added [blue]`Slots` to their planner, they may want to be able to view information regarding"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "a [blue]`Slot` that they have added. If the user wants to find out the dates, start times, end times, venues and descriptions pertaining to a specific [blue]`Slot`, they can use the `list` command to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "locate that specific [blue]`Slot` and view all of its information in a list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "** **Find**: I added the ability to *search and find [blue]`Slots`* using a keyword user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** What it does: The `find` command *generates a list* containing all [blue]`Slots` whose name *closely matches* the specified keyword and displays them as a list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Justification: Unlike the `list` command, the `find` command will also consider searches that are similar to the desired name/tag. This is to account for a typo or an incomplete keyword, which can happen often while the user is typing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Additionally, the user may not remember the exact name he has added to the planner, and hence, the `find` command provides a higher chance for the user to locate their desired [blue]`Slot`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The `find` command ends up generating a longer output list, which potentially contains many [blue]`Slots`, which may not be optimal for the user to skim through. Thus, I provide users with the option to use the `list` command to specifically pinpoint their desired [blue]`Slot` to list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Highlights: It was challenging to provide an optimal string matching algorithm that accurately weighs the closeness of strings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "An in-depth analysis of design alternatives was necessary to determine the kind of string matching algorithm to implement in order to improve search accuracy."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Credits: The string matching logic was largely dependent on the \u003c\u003clevenshtein-distance,Levenshtein Distance\u003e\u003e algorithm."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* *Minor Feature*: I added the ability to *undo/redo previous commands* and *view the history* of commands entered."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** What it does: The `undo` command allows the user to undo a previous `add`/`edit`/`delete` command. The user may reverse this command with the `redo` command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Justification: In the event that users have made a mistake or changed their minds about executing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                  a command, the `undo` command enables them to revert to a version immediately before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                  the mistaken command was executed. If they change their minds again and decide to"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                  execute the command after all, then the `redo` command enables them to do so easily."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Highlights: As our group chose to morph the product from https://github.com/nusCS2113-AY1819S2/addressbook-level3[AddressBook 3], we did not have a History framework in place. I took up the responsibility"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "to adapt the History Framework provided in https://github.com/nusCS2113-AY1819S2/addressbook-level4[AddressBook 4] in order to cater to our implementation of *PlanMySem*."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** Credits: https://github.com/nusCS2113-AY1819S2/addressbook-level4[AddressBook 4] for providing the History framework."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "To get a sense of how all these features function together, the activity diagram below shows how the search workflow for a [blue]`Slot` in *PlanMySem* looks like:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".[.underline]#Activity Diagram for Search workflow#"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::FindListHistoryActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Essentially, if the user knows the exact keyword to use to locate his/her desired [blue]`Slot`, he would use the `list` command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Otherwise, the `find` command is recommended for use. As a parallel process, [blue]`CommandHistory` records the user input and saves it to [blue]`Planner\u0027s` history."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dmarcus-pzj\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-14\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dmarcus-pzj\u0026tabRepo\u003dCS2113-AY1819S2-T08-3_main_master\u0026repoSort\u003dtrue[RepoSense]] [https://github.com/CS2113-AY1819S2-T08-3/main/pulls?q\u003dis%3Apr+author%3Amarcus-pzj+is%3Aclosed[Pull Requests]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** I managed releases from version 1.1 to 1.4, which are all of the https://github.com/CS2113-AY1819S2-T08-3/main/releases[releases] on GitHub."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "** Enhancement to existing features:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** I wrote additional tests for existing features to increase coverage."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** I performed cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2113-AY1819S2-T08-3/main/pull/98[#98], https://github.com/CS2113-AY1819S2-T08-3/main/pull/101[#101]."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** I reviewed Pull Requests and provided non-trivial review comments for some requests: https://github.com/CS2113-AY1819S2-T08-3/main/pull/25[#25], https://github.com/CS2113-AY1819S2-T08-3/main/pull/53[#53], https://github.com/CS2113-AY1819S2-T08-3/main/pull/75[#75], https://github.com/CS2113-AY1819S2-T08-3/main/pull/115[#115]."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "*** I completed the initial set up of the https://github.com/CS2113-AY1819S2-T08-3[developer team and organisation repository] on GitHub."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. I have added the descriptions of all features that I have implemented."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "I have also provided clear instructions for users to use my implemented features._"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Here are the links to my contributed sections in the User Guide:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- List Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#list[`list`] +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- Find Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#find[`find`] +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- History Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#history[`history`] +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- Undo Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#undo[`undo`] +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- Redo Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/UserGuide.adoc#redo[`redo`]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Below is an example of my addition to the User Guide for the `find` feature."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d Finding Slots: `find` / `f`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Find all _slots_ whose name closely matches the specified keyword and displays them as a list. (Case-sensitive) +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Format: `find n/KEYWORD`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Keywords are case sensitive! (e.g. _CS2113T_ is not the same as _cs2113t_)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The `find` command will return the closest matching `Slot` which contains the specified keyword. **The name/tag MUST"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "contain the specified keyword in order for a match to occur**."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Use short keywords (e.g CS) instead of long keywords to increase the chances of finding your desired slot. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "E.g. Let\u0027s say you are finding a `Slot` named _Golf_. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "`find n/Go` will detect the slot, while `find n/Golfs` will fail to detect the slot. (Golf does not contain Golfs) +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `find n/CS` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Find all _slots_ whose name closely matches `CS` (eg. CS2101, CS2113T, SOCSMeet)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "* `find t/2113T` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Find all _slots_ that contain tags that closely matches `2113T`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".[.underline]#Output after entering `find n/CS`#"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::Find_Command_Output.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Explanation: As seen from the figure above, the output list of slots are ranked according to their degree of similarity."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "All of the `Slots` listed contain the keyword _\u0027CS\u0027_. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Since _\u0027JSOCS\u0027_ has less characters, it is considered closest to the keyword _\u0027CS\u0027_, which has only 2 characters. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Remember the tip above when you are finding your `Slots`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. I have explained the logic behind the features that were tasked to me."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "I have also elaborated on my design considerations in order to justify my implementation style. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "In addition, I was tasked with collating and polishing the User Stories which were generated during the ideation phase of the project._"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Here are the links to my contributed sections in the Developer Guide:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- List Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#list-feature[`list`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- Find Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#find-feature[`find`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- Undo \u0026 Redo Command: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#undoredo-feature[`undo` \u0026 `redo`]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "- User Stories: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master/docs/DeveloperGuide.adoc#user-stories[User Stories]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Below is an example of my addition to the Developer Guide for the `find` feature."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The find function supports searching using a single keyword. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The name/tag of the [blue]`Slot` MUST contain the specified keyword in order for a match to occur. Completely different keywords"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "do not constitute a match. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The matching [blue]`Slots` are then weighted based on their name/tag\u0027s \u003c\u003clevenshtein-distance,Levenshtein Distance\u003e\u003e from the keyword."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "A low \u003c\u003clevenshtein-distance,Levenshtein Distance\u003e\u003e is attributed to a high level of similarity between the name/tag and the keyword."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "(A value of 0 constitutes an exact match.) +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The maximum Levenshtein Distance set in *PlanMySem* is 20."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The weighted [blue]`Slots` are inserted into a [blue]`PriorityQueue` and the closest matching [blue]`Slots`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "will be polled into the output list. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Upon executing the `find` command with valid parameters,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "a sequence of events is executed. The sequence of events illustrated in the Sequence Diagram below will be in reference to the execution"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "of a `find n/keyword` command. The sequence of events are as follows:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "1. Upon calling the [blue]`execute` method of the [blue]`Logic` component, the [blue]`Logic` component would then parse the `find n/keyword`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "command."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "2. [blue]`LogicManager` then invokes the [blue]`parseCommand` function of [blue]`ParserManager`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "3. [blue]`ParserManager` in turn invokes the [blue]`parse` function of the appropriate parser for the `find` command which in this case,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "is [blue]`FindCommandParser`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "4. After parsing is done, [blue]`FindCommandParser` would instantiate the [blue]`FindCommand` object which would be returned to the [blue]`LogicManager`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "5. [blue]`LogicManager` is then able to invoke the [blue]`execute` function of the returned [blue]`FindCommand` object."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "6. The command execution will call the [blue]`getDays` method of the [blue]`FindCommand` object which retrieves data from the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[blue]`Model` component (i.e. retrieving data from the current [blue]`Semester`). +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "7. [blue]`FindCommand` will execute the [blue]`getDiscoveredNames` method to find the closely matching [blue]`Slots` with names containing \u0027keyword\u0027."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "8. The result of the command execution is encapsulated as a [blue]`CommandResult` object which is passed back to [blue]`Ui`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "9. In addition, the [blue]`CommandResult` object can also instruct the [blue]`Ui` to display results, such as displaying help to"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "the user."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "To give a graphical summary of the above process, a Sequence Diagram detailing the execution of the `find n/keyword` command is provided below."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".Sequence of Interactions between Components for the `find n/keyword` Command"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::FindSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The Communication Diagram below summarises the data links between the various objects in the `find` command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ".Data Interactions between Components for the `find n/keyword` Command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "image::FindCommunicationDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What constitutes a positive search result in `find` command"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**No.**|**Alternatives** |**Pros** |**Cons**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**Past Implementation 1** |Positive search result by strictly matching the entered keyword |Easy to implement. |Search must be exact, typos or an incomplete keyword will yield incorrect results. Nothing different from `List` feature."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**Past Implementation 2** |Positive search result as long as name/tag contains the keyword.|Searches will detect names/tags similar to the keyword. |Output list will be longer. May become excessively long if short keyword is provided."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|**Current Implementation** |Store the search results in a `PriorityQueue` ordered by their \u003c\u003clevenshtein-distance,Levenshtein distances\u003e\u003e from the search keyword.|Searches are ordered by a degree of similarity, instead of the random order of names/tags in Past Implementation 2.|Adds complexities in finding and searching."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "{zwsp}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "[[levenshtein-distance]] Levenshtein Distance::"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "The Levenshtein distance is a string metric for measuring difference between two sequences. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "Informally, the Levenshtein distance between two words is the minimum number of single-character edits (i.e. insertions, deletions or substitutions)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "required to change one word into the other."
      }
    ],
    "authorContributionMap": {
      "seanieyap": 40,
      "marcus-pzj": 199
    }
  },
  {
    "path": "docs/team/seanieyap.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d Sean Yap - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":caution-caption: :fire:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T08-3/main/blob/master"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d PROJECT: PlanMySem"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Hello ! My name is Sean Yap and I am currently a Year 3 undergraduate and resident of Tembusu College at the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This portfolio documents my contributions to *PlanMySem*, an application that was morphed from https://github.com/CS2113-AY1819S2-T08-3/main[AddressBook Level 3]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "into a scheduling/calendar application that caters to NUS students and staff."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In summary, *PlanMySem* offers the following features:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Automatic creation of a planner that is synchronized to the NUS academic calendar for the current semester."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Quick and easy slot management (adding, editing and deleting of slots). This is achieved via two systems."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** A unique recursion system which takes into account special weeks such as recess week or reading week to allow efficient adding of recurring items."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** An intuitive tagging system to manage large amount of slots productively."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Optimized for you if you prefer to work with a Command Line Interface (CLI) and/or are learning to work more efficiently with CLI tools."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* Utilizes minimal resources on your machine while still allowing you to view your schedules swiftly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "This application was developed as part of CS2113T, a software engineering module in the National University of Singapore (NUS), and consisted of 4 partners, \u003c\u003cmarcus-pzj#, Marcus\u003e\u003e, \u003c\u003cmacchazuki#, Julian\u003e\u003e, \u003c\u003cdingheng4448#, Ding Heng\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "and myself; in which I served as the team lead. I was responsible for the slot management feature (add, edit and delete commands) and the structure of the codebase."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The next sections will illustrate these enhancements in more detail as well as the respective changes that I have made to both the user guide and developer guide."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Kindly take note that throughout this portfolio, there will be various icons used as described as such."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a tip. Follow these suggested tips to make your life much simpler when using *PlanMySem*!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a note. These are things for you to take note of when using *PlanMySem*."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a sign-post dictating important information. These are information that you will surely need to know to use *PlanMySem* efficiently."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is a sign-post informing caution. Please take note of these items and exercise some care."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Main Feature*: Slot management system, including the recursion and tagging system, of *PlanMySem*."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** What it does: Slot management composes of the three interactions that users are able to perform regarding slots."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        As such, slot management consists of the execution of the add, edit and delete commands and its functions."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Justification: Slot management is the most crucial feature of *PlanMySem*, it is also the highlight of the application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Without so, the planner cannot be manipulated nor interacted with."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Highlights: This enhancement involved many variables and data types due to the nature of slots and its details."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        As such, this enhancement involved a large amount of cases, same was the came as with its tests. Additionally, to cater"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for greater user experience and ease of use, several variations of each functions were done up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        For example, slots can be editing via tags or index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Minor Features*:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** A new unique parsing system to replace the existing system for both prefixed parameters and keywords."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** A clock system to manage dates and time more efficiently as with the nature of a planner application, the application is very time sensitive."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** View my RepoSense contribution analysis: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-03-26\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dseanieyap\u0026tabRepo\u003dCS2113-AY1819S2-T08-3_main_master[here]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** View my Pull Requests: [https://github.com/CS2113-AY1819S2-T08-3/main/pulls?q\u003dis%3Apr+author%3Aseanieyap+is%3Aclosed[here]]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Project Management: I was involved with the conception of *PlanMySem* and managed the codebase up till the release of version 1.4. These releases can be viewed https://github.com/CS2113-AY1819S2-T08-3/main/releases[here]."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Testing: I wrote tests for all code in trying to achieve the most code coverage and ensure reliability of my code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Most of classes belonging to my features have 100% code coverage. At this time of writing, the code coverage for the entire codebase of *PlanMySem* is 91%."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Documentation: I updated the User Guide and Developer\u0027s Guide regarding all items related to the features that I am in charge of and the design."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Community: I reviewed Pull Requests and provided non-trivial review comments for some requests. These Pull Requests can be viewed https://github.com/CS2113-AY1819S2-T08-3/main/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3Aseanieyap[here]."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Tools: Integrated all AddressBook Level 4 continuous Integration and continuous Deployment tools"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        *** Continuous Integration tools: https://travis-ci.org/CS2113-AY1819S2-T08-3/main[Travis-CI], https://ci.appveyor.com/project/seanieyap/main-r8jp5[AppVeyor]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        *** Continuous Deployment tools: https://app.netlify.com/sites/planmysem/deploys[Netlify]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        *** Test Coverage History \u0026 Statistics tools: https://coveralls.io/github/CS2113-AY1819S2-T08-3/main?branch\u003dmaster[Coveralls]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        *** Automated code reviews and code analytics tools: https://app.codacy.com/project/CS2113T-T08-3/main/dashboard[Codacy]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This section shows some of my contributions to the User Guide."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "They not only showcase my ability to write documentation targeting end-users but also make user-centric design choices."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "My contributions here can be summarised into 2 sections, features and adding, editing and deleting slots."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Features"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Under the Features section, I contributed to explaining the Tagging and Recursion system that I designed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Tagging System*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Unlike other commercial calendar/scheduling/planner software, *PlanMySem* makes use of a tagging system to manage _slots_."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Using tags to tag _slots_ will make tasks easier for you in the future. Performing tasks such as viewing, deleting and editing _slots_ will be more efficient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Recommended uses for tags:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//1. Tag modules. E.g. \"CS2113T\", \"CS2101\"."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//2. Tag type of lesson. E.g. \"Lecture\", \"Tutorial\", \"Lab\"."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//3. Tag type of activities. E.g. \"Sports\", \"Seminar\", \"Talk\"."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//4. Tag difficulty of task. E.g. \"Tough\", \"Simple\", \"Trivial\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Recursion System*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Recursion facilitates quick addition of multiple _slots_, similar to Microsoft Outlook\u0027s series of appointments."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In NUS, academic semesters are split into weeks of several types. Recursion allows you to add _slots_ to these types of weeks with ease through the use of the `r/`(recursion) parameter."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You can save time by utilizing the alternate and shortcut commands. E.g. instead of using `delete`, you may also use `del` or simply `d`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*Identifiers and Parameters*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Identifiers in *PlanMySem* are designed to be, short and easy to memorise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Once you are familiarised with them, they should be intuitive to use to add your parameters."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The table of Identifiers and Parameters and their descriptions (Table 1) below is useful for your reference as you jump right into grasping the system."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Identifiers and their Parameters and descriptions."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,\u003c10%,\u003c30%,\u003c30%,\u003c25\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|Identifier |Parameter |Description |Format |Example"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".2+|`n/`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |`NAME` |Name of a _slot_ |Text |`n/CS2113T`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    |`KEYWORD` |Text that are part of the name of a _slot_ |Text |`n/CS`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`l/` |`LOCATION` |Location of a _slot_ |Text |`l/COM2 04-22`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|`des/` |`DESCRIPTION` |Description of a _slot_ |Text |`des/Topic: Abstraction`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "5+|_Further rows are omitted due to space constrains_"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You may order identifiers and parameters in any fashion and you will still be able to achieve what you want!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "So, do not bother thinking about where to place parameters as ordering does not matter, instead become more efficient and save your time!"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Identifiers may be appended with a `n` to dictate \"new\". +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "E.g. `nt/NEW_TAG` signifies new tags in which you want to replace existing tags with."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "While table 1 shows you all the identifiers and parameters that *PlanMySem* uses, there are some commands that do not make use of identifiers nor parameters."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The view command is one such exception that make use of keywords that must be typed in a specific order."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Adding Slots : `add` / `a`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here is an example of a helpful guide to a specific feature that I was responsible for."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Add _slot(s)_ to the planner. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Format: `add n/NAME d/DATE_OR_DAY_OF_WEEK st/START_TIME et/END_TIME_OR_DURATION +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[l/LOCATION] [des/DESCRIPTION] [r/normal] [r/recess] [r/reading] [r/exam] [r/past] [t/TAG]...`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/normal r/past` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Add a single _slot_, named \"CS2113T Lecture\" with description \"Software Engineering\" on all mondays, from 0800hrs to 0900hrs with the tags \"CS2113T\" and \"Tutorial\"."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here, the recursion parameters enable a single command to place 13 slots on all \"normal\" weeks that lectures take place on."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[#img-add]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".[.underline]#Output after entering `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/normal r/past`#"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::Add_Command_Output_1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture r/recess r/reading r/past` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Do the same but instead of \"normal\" weeks, do the opposite of the norm and recurse the _slot_ on both recess and reading week."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `add n/CS2113T Lecture d/mon st/8:00 am et/9:00 am des/Topic: Software Engineering t/CS2113T t/Lecture` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Do the same but without any recursion, instead place the _slot_ the coming monday."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "You may add single _slots_ by omitting the `r/` identifiers and its parameters."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*PlanMySem* does not dictate your scheduling preferences."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "As such, you may even add identical slots or slots with overlapping start and end times to help plan for tentative/unconfirmed events."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "_Here, the editing and deleting slots features are omitted._"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This section shows some of my contributions to the Developer Guide."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "They showcase my ability to:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Write technical documentation and create UML diagrams."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Design practical and effective code solutions."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Adhere to software engineering practices."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "My contributions here can be summarised into 3 sections, design, slot management and Parser/Command Format and Structure."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Design"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Under the design section, I wrote documentation and created UML diagrams to explain the overall system architecture."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For instance, I documented the design of the architecture and its 4 innate components."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::ArchitectureDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/planmysem/Main.java[`Main`]. It is responsible for,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003c\u003cDesign-Common,*`Common`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The following class plays an important role at the architecture level, the App consists of four components:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::LogicComponentClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "link:{repoURL}/src/planmysem/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Logic` component,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  uses the `parser` class to parse the user command."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "**  This results in a `Command` object which is executed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a _Slot_)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to `Ui`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to display results, such as displaying help to the user."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "image::SDforDeleteSlot.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "_Here, the other 3 major components are omitted._"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Slot Management"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "_Slot_ Management involves mainly the interaction between the users and their _slots_."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The section below will describe in detail the Current Implementation, Design Considerations and Future Implementation of the Slot Management."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Users are able to perform three actions (or commands), though a small variety of methods, involving _slots_:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `Add`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Add multiple slots via the _recursion_ system."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Add a single slot via omitting the _recursion_ system."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `Edit`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Edit multiple _slots_ via _tags_."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Edit a single _slot_ via _index_."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* `Delete`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Delete _slots_ via _tags_."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ** Delete a single _slot_ via _index_."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Add` command heavily relies on the _recursion_ system to select multiple dates in which to add the same slot to multiple days."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Additionally, the `Add` command also allows users to input _tags_ to tag _slots_."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The `Edit` and `Delete` command then makes use of the _tagging_ system to then select multiple slots for editing/deleting."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here are the considerations regarding slot management."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The choices made were largely due to computation effectiveness."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Wrapping of data in `Slot`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The topic of whether to wrap all primitives and `Strings`, in Java, is contentious."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "However, in this case of *PlanMySem*, there are no possible invalid values for any of the data that `Slot` holds, other than the `/` character that would have already been handled by `parser`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For instance, any `String` is a valid `name` and the same goes for `location`, `description` and etc; wrapping these data will not achieve any narrowing of possible valid inputs."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Hence, data in `Slot` are not wrapped. This is in accordance to the You aren\u0027t gonna need it (YAGNI) principle."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Storing and accessing `Slots`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 1 (current implementation):* Use of `Map`, such as `HashMap` to store `Days` that store `Slots`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: `HashMap` allows for easier and faster, O(1) access time, access of particular `Day` according to date."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: This requires splitting of the calendar into days, as such there is no easy way to account for `Slots` that occur across days."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* *Alternative 2:* Store `Slots` in a huge list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Pros: Allows for easier access by \"index\" and offers flexibility, for example, in the time of slots."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "** Cons: Expensive to access, add and remove items. Furthermore, it is extremely expensive to collect slots that occur in a day, a very important and most likely to be a commonly used feature."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Alternative 1 was chosen as the benefits of quick and easy access to days outweigh the disadvantages involve with forbidding slots than span over a day."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "After all, there are few cases of slots crossing the boundaries of a day, over midnight."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Create a class to represent `Days`, instead of utilising a `HashMap`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Currently, `Days` are held in a HashMap of key `LocalDate` and value `Day`. While this works without any loss in performance, this causes duplication of code and removes some key concepts of abstraction."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "For example, there are code blocks dedicated to retrieving days or slots that could have been placed into this new class. This is an issue as these code have nothing to do with for instance, `Semester` but they are placed there."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Therefore, this needs to be implemented in the future to achieve less coupling, more cohesion and respect the Single Responsibility Principle (SRP), Open-Closed Principle (OCP) and Separation of Concerns Principle (SoC)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `Planner` to hold multiple `Semesters`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "While *PlanMySem* now allow users to work on the current semester, it is unable to cater to future semesters. For instance when a semester is about to end, users are not able to plan ahead for the coming semester."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This is an issue that plagues user experience and is a significant problem. To solve this issue, `Planner` needs to hold multiple semesters in a `List` and more features need to be included to allow saving, loading and switching of semesters and etc."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d Parser / Command Format and Structure"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Due to the flexibility and huge variation of the envisioned command format and structures, it was decided that it was more appropriate to create a new Parser"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "instead of relying on the existing regex implementation in AB3 for heavy parsing."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The AB3 parser was heavily modified to serve unordered command parameters as well as to allow more flexibility such that mistakes in commands will still be"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "interpreted as valid as long as the \"minimal\" set of parameters are present. Regex is currently only used to retrieve the command keywords and arguments."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Arguments are then parsed via 2 different methods/techniques according to the format and structure of the command keyword."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Ordering of parameters are ignored when possible."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Repeated parameters are ignored. The first parameter of the same \"type\" are taken as valid, the rest are discarded."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Alternate formats of commands are implemented to give freedom of choice and cater to different types of users such as different personalities and comfort levels."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* Shortened versions of command keywords are implemented to give ways for users to shortened commands and be more efficient."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Hence, parameters in *PlanMySem* can be categorised into 2 categories:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Prefixed parameters such as `n/NAME`, `st/START_TIME`, `des/DESCRIPTION`, etc."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ". Non-Prefixed parameters, A.K.A. keywords, such as `INDEX`, `TYPE_OF_VIEW`. etc."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Parsing Prefixed Parameters"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "To retrieve parameters, the function `private static HashMap\u003cString, Set\u003cString\u003e\u003e getParametersWithArguments(String args)` can be called."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The keys of the returned `HashMap` represent prefixes while the values represent the prefix\u0027s parameters, held in a set."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "This allows for easy, quick and efficient access to specific prefixes and its parameters; O(1) access, insertion and removal."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The results of `getParametersWithArguments` can be interpreted in these manners:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the returned set of parameters, to a specific prefix, is `null`, then both the prefix and parameters was not keyed in at all."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the returned set of parameters, to a specific prefix, is not `null` but contains empty `strings` such that `string.isEmpty()` returns true, then the prefix was keyed in but the parameter was left blank."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The values of the returned `HashMap` is a `Set`, hence, there is no need to handle repeated parameters of a specific prefix as they will be automatically discarded."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Parsing Keywords"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here, keywords are thought of as parameters that are not prefixed."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In *PlanMySem*, keywords are utilized in command structures when they are to be used alone or when order of parameters are important."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "In such cases, there is no logical need for prefixing as the meaning of these parameters can be identified."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "The function `private String getStartingArgument(String args)` provides this functionality."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Here, `IncorrectCommand` is invoked due to different circumstances:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the keyword is null, then the parameter was not keyed in."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "* When the keyword data type does not match the intended, then the parameter was keyed in wrongly or is mis-ordered."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "Additional keywords are purposefully *not* handled to provide ease of use and cater to user mistakes."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "_Here, the design considerations and future implementations are omitted._"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Here are the considerations that led to the new parsing system."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//The choices made were largely due to the fact that they provide a better user experience and ease of use."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: Handling repeated parameters"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Alternative 1 (current choice):* When possible, accept repeated parameters."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Pros: Less computationally expensive and allow users to make minor mistakes."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Cons: User errors may be misinterpreted and hence wrong actions may be executed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Alternative 2:* Always accept and handle repeated parameters."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Pros: Errors are shown to the user so that the invalid command may be fixed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Cons: Force user to rewrite commands, even in the event of simple/minor mistakes, and thus may hinder user experience and ease of use."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: Handling order of parameters"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Alternative 1 (current choice):* Parse parameters without regards to order."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Pros: Greater user experience due to greater ease of use."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Cons: More computationally expensive and tougher development process due to more cases to care for, requires manual parsing."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//* *Alternative 2:* Accept only a specific ordering of parameters."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Pros: Less computationally expensive and short development process, able to use existing regex solutions in AB3."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//** Cons: Greatly hinder user experience as order of parameters have no relation to meaning of commands."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Alternative 1 was chosen due to the team\u0027s priority in providing a better user experience and allow ease of use."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//Though the current implementation has much flexibility, there is more that can be done to elevate user experience to the next level."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//These are some possible enhancements:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//1. Parse more formats of date and time."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//2. Parse time as a single parameter instead of two."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//3. Enhance function calls to retrieve prepended parameters and keywords to handle trivial cases that should invoke `IncorrectCommand`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 397,
      "macchazuki": 1
    }
  },
  {
    "path": "docs/templates/_header.html.slim",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/ NOTE: You must restart the gradle daemon after modifying any template file for the changes to take effect."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "- if !(attr? \u0027no-site-header\u0027)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  #site-header"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    nav.navbar.navbar-light.bg-light"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      .container"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? \u0027site-name\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "            a.navbar-brand href\u003d(site_url \u0027index.html\u0027) \u003d(attr \u0027site-name\u0027)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        ul.navbar-nav"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003dnav_link(\u0027UserGuide\u0027, \u0027UserGuide.html\u0027, \u0027User Guide\u0027)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003dnav_link(\u0027DeveloperGuide\u0027, \u0027DeveloperGuide.html\u0027, \u0027Developer Guide\u0027)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003dnav_link(\u0027AboutUs\u0027, \u0027AboutUs.html\u0027, \u0027About Us\u0027)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \u003dnav_link(\u0027ContactUs\u0027, \u0027ContactUs.html\u0027, \u0027Contact Us\u0027)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "          - if attr? \u0027site-githuburl\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            li.navitem"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "              a.nav-link href\u003d(attr \u0027site-githuburl\u0027)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                span.fa.fa-github.fa-lg aria-hidden\u003d\u0027true\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                | \u0026nbsp;View on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/ AsciiDoc leaves an empty header div even if there\u0027s no doctitle"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "#header"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  - if has_header?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    - unless notitle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      h1 \u003dheader.title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    - if [:author, :revnumber, :revdate, :revremark].any? {|a| attr? a }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      .details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :author"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          span.author#author \u003d(attr :author)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          br"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          - if attr? :email"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            span.email#email \u003dsub_macros(attr :email)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            br"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          - if (authorcount \u003d (attr :authorcount).to_i) \u003e 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            - (2..authorcount).each do |idx|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "              span.author id\u003d\"author#{idx}\" \u003d(attr \"author_#{idx}\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "              br"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "              - if attr? \"email_#{idx}\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                span.email id\u003d\"email#{idx}\" \u003dsub_macros(attr \"email_#{idx}\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :revnumber"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          span#revnumber #{((attr \u0027version-label\u0027) || \u0027\u0027).downcase} #{attr :revnumber}#{\u0027,\u0027 if attr? :revdate}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :revdate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          span#revdate \u003dattr :revdate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :revremark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          br"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          span#revremark \u003d(attr :revremark)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  - if (attr? :toc) \u0026\u0026 (attr? \u0027toc-placement\u0027, \u0027auto\u0027)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    include _toc.html"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 3,
      "-": 48
    }
  },
  {
    "path": "gradle.properties",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "org.gradle.parallel\u003dfalse"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "org.gradle.jvmargs\u003d-XX:MaxMetaspaceSize\u003d512m -XX:+HeapDumpOnOutOfMemoryError -Xmx1024m -Dfile.encoding\u003dutf-8"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 2
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "#Mon Feb 18 18:42:33 SGT 2019"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-4.8.1-all.zip"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 2,
      "-": 4
    }
  },
  {
    "path": "src/planmysem/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.LogicManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.storage.StorageFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.ui.Stoppable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Main entry point to the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Version info of the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String VERSION \u003d \"PlanMySem - Version 1.4\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Storage storageFile \u003d new StorageFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        UiManager uiManager \u003d new UiManager(new LogicManager(storageFile), VERSION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        uiManager.start(primaryStage, this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanieyap": 17,
      "-": 23
    }
  },
  {
    "path": "src/planmysem/common/Clock.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Utility methods"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class Clock {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static java.time.Clock clock \u003d java.time.Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static java.time.Clock get() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Checks whether any of the given items are null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static void set(String dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        clock \u003d java.time.Clock.fixed(Instant.parse(dateTime), ZoneId.of(\"UTC\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanieyap": 24
    }
  },
  {
    "path": "src/planmysem/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.WeightedName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL \u003d \"Invalid command format! \\n%1$s\\n\\n%2$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_INVALID_MULTIPLE_PARAMS \u003d \"Either search by NAME or by TAG only, not both.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_INVALID_SLOT_DISPLAYED_INDEX \u003d \"The slot index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"java Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to PlanMySem!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_EDIT \u003d \"There are no details to edit.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_OR_DAY \u003d \"Date have to be in either these two formats:\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tIn the form of \\\"dd-mm\\\". e.g. \\\"01-01\\\"\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tIn the form of \\\"dd-mm-yyyy\\\". e.g. \\\"01-01-2019\\\"\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tOr perhaps target the next day of week.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t\\tIn the form of the day itself, \\\"Monday\\\", in 3-letter short forms, \\\"mon\\\" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"or numbered day of week, \\\"1\\\"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Time have to be in either these two formats:\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t24-Hour in the form of “hh:mm”. e.g. \\\"23:00\\\"\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t12-Hour in the form of `hh:mm AM|PM`. e.g. \\\"12:30 am\\\"\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tOr perhaps type a duration in minutes. e.g. \\\"60\\\" to represent 60 minutes\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_INVALID_ENDTIME \u003d \"A slot is not able to have an end time that is \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"before it\u0027s start time.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"Tags cannot be empty !\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_VALUE \u003d \"Illegal value detected!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_WEEK_VALUE \u003d \"No such week is found in the current semester!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public static final String MESSAGE_DATE_OUT_OF_BOUNDS \u003d \"No such date is found in the current semester!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft selected message via tags."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String craftSelectedMessage(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        sb.append(\"Selected Slots containing: \\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(count);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\".\\t\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        sb.append(\"\\nEnter \u0027list n/{name} OR t/{tag}\u0027 to list all slots related to the name/tag\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft selected message via index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String craftSelectedMessage(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"Selected index: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft selected message with header."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String craftSelectedMessage(String header,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                              List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(header);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString() + getSelectedMessage(selectedSlots);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Craft selected message via weighted Set of Pairs."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String craftListMessageWeighted(List\u003cWeightedName\u003e tries) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (WeightedName wn : tries) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(count + \".\\t\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"Name: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(wn.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\",\\n\\t\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"Date: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(wn.getMap().getKey().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\",\\n\\t\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"Start Time: \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(wn.getSlot().getStartTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"\\n\\t\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(wn.getSlot().getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        sb.append(\"\\n To view more information about a particular slot, try the \u0027view day\u0027 command!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft list message."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String craftListMessage(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e entry : selectedSlots) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(count + \".\\t\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"Name: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getValue().getValue().getName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\",\\n\\t\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"Date: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getKey().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\",\\n\\t\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"Start Time: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getValue().getValue().getStartTime());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\n\\t\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"Tags: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getValue().getValue().getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        sb.append(\"\\n To view more information about a particular slot, try the \u0027view day\u0027 command!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft selected message."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static String getSelectedMessage("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.sort((p1, p2) -\u003e p1.getKey().compareTo(p2.getKey()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e entry : selectedSlots) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(count);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\".\\t\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getValue().getValue().getName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getKey());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getValue().getValue().getStartTime());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getValue().getKey().getType());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(entry.getKey().getDayOfWeek().toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 116,
      "marcus-pzj": 44,
      "dingheng4448": 2,
      "-": 9
    }
  },
  {
    "path": "src/planmysem/common/Utils.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static java.time.temporal.ChronoUnit.MINUTES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final Pattern INTEGER_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Pattern.compile(\"\\\\d+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private static final int MAXIMUM_DISTANCE \u003d 20;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether any of the given items are null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNull(Object... items) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Object item : items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (item \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if every element in a collection are unique by {@link Object#equals(Object)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Object item : items) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            if (itemAlreadyExists) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Check if String represents an actual date or day."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns 0 if string does not represent a DayOfWeek, else returns int corresponding to the day."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static int parseDay(String unknown) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (unknown.trim().isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String day \u003d unknown.trim().toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"monday\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"tuesday\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"wednesday\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 3;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"thursday\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 4;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"friday\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"5\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 5;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"saturday\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"6\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 6;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"sunday\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case \"7\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d 7;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d -1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parse String to LocalDate."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static LocalDate parseDate(String date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate result;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // with year"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"d-MM-yyyy\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // without year"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result \u003d LocalDate.parse(date + \"-\" + Year.now().getValue(), DateTimeFormatter.ofPattern(\"d-MM-yyyy\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result \u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parse String to 12 hour or 24 hour time format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static LocalTime parseTime(String time) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime result;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Twelve hour format"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d LocalTime.parse(time.toUpperCase(), DateTimeFormatter.ofPattern(\"h[h]:mma\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result \u003d LocalTime.parse(time.toUpperCase(), DateTimeFormatter.ofPattern(\"h[h]:mm a\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // Twenty-four hour format"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result \u003d LocalTime.parse(time, DateTimeFormatter.ofPattern(\"H[H]:mm\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result \u003d null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parse string into integer."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static int parseInteger(String value) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (value !\u003d null \u0026\u0026 INTEGER_FORMAT.matcher(value).matches()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                return Integer.parseInt(value);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get the time difference between two LocalTimes in minutes."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static int getDuration(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return (int) MINUTES.between(startTime, endTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get the end time of a time after a duration."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static LocalTime getEndTime(LocalTime time, int duration) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return time.plusMinutes(duration);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Computes Levenshtein Distance from strings"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static int getLevenshteinDistance (String lhsIn, String rhsIn) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String lhs \u003d lhsIn.toLowerCase();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String rhs \u003d rhsIn.toLowerCase();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // the array of distances"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        int[] cost \u003d new int[lhs.length() + 1];"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        int[] newCost \u003d new int[lhs.length() + 1];"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // initial cost in String lhs"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (int i \u003d 0; i \u003c lhs.length(); i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            cost[i] \u003d i;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // cost for transforming each letter in String rhs"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (int j \u003d 1; j \u003c rhs.length() + 1 \u0026\u0026 j \u003c MAXIMUM_DISTANCE; j++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            // initial cost in String rhs"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            newCost[0] \u003d j;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            // transformation cost for each letter in String lhs"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (int i \u003d 1; i \u003c lhs.length() + 1; i++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                // match current letters in both strings"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int match \u003d (lhs.charAt(i - 1) \u003d\u003d rhs.charAt(j - 1)) ? 0 : 1;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                // cost for each type of transformation"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int costReplace \u003d cost[i - 1] + match;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int costInsert \u003d cost[i] + 1;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int costDelete \u003d newCost[i - 1] + 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                // keep minimum cost"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                newCost[i] \u003d Math.min(Math.min(costInsert, costDelete), costReplace);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            // switch cost array with newCost array"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            int[] temp \u003d cost;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            cost \u003d newCost;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            newCost \u003d temp;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // the distance is the cost for transforming all letters in both strings"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return cost[lhs.length()];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get the nearest date to a type of day from today."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static LocalDate getNearestDayOfWeek(LocalDate date, int day) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return date.with(TemporalAdjusters.next(DayOfWeek.of(day)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 176,
      "marcus-pzj": 47,
      "-": 36
    }
  },
  {
    "path": "src/planmysem/common/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 1,
      "-": 12
    }
  },
  {
    "path": "src/planmysem/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 2,
      "marcus-pzj": 56
    }
  },
  {
    "path": "src/planmysem/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Execute command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Gets the storage file\u0027s path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getStorageFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Gets unmodifiable view of the current last shown list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getLastShownSlots();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 25,
      "-": 14
    }
  },
  {
    "path": "src/planmysem/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.storage.StorageFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents the main LogicManager of the Planner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String STORAGE_ERROR \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final ParserManager parserManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public LogicManager(Storage storage) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.model \u003d new ModelManager(storage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(String userCommandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Command command \u003d parserManager.parseCommand(userCommandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            history.add(userCommandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            storage.save(model.getPlanner());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (StorageFile.StorageOperationException soe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new CommandException(STORAGE_ERROR + soe, soe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getLastShownSlots() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return model.getLastShownList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 70
    }
  },
  {
    "path": "src/planmysem/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Adds a person to the planner."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add single or multiple slots to the Planner.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tParameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t\\tMandatory: n/NAME d/DATE_OR_DAY_OF_WEEK st/START_TIME et/END_TIME_OR_DURATION\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t\\tOptional: [l/LOCATION] [des/DESCRIPTION] [r/normal] [r/recess] [r/reading] [r/exam]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"[r/past] [t/TAG]...\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \" n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/CS2113T \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"t/Tutorial r/normal\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s Slots added.\\n\\n%2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_FAIL_OUT_OF_BOUNDS \u003d \"Date specified is out of bounds.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Slot slot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Recurrence recurrence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AddCommand(LocalDate date, String name, String location, String description, LocalTime startTime,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                      int duration, Set\u003cString\u003e tags, Set\u003cString\u003e recurrences) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot \u003d new Slot(name, location, description, startTime, duration, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        recurrence \u003d new Recurrence(recurrences, date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AddCommand(int day, String name, String location, String description, LocalTime startTime,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                      int duration, Set\u003cString\u003e tags, Set\u003cString\u003e recurrences) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot \u003d new Slot(name, location, description, startTime, duration, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        recurrence \u003d new Recurrence(recurrences, day);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Creates an AddCommand to add the specified {@code slot}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and using specific {@code recurrence}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AddCommand(Slot slot, Recurrence recurrence) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        requireNonNull(recurrence);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cLocalDate\u003e dates \u003d recurrence.generateDates(model.getPlanner().getSemester());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Map\u003cLocalDate, Day\u003e days \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate date : dates) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                days.put(date, model.addSlot(date, slot));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (Semester.DateNotFoundException dnfe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new CommandException(MESSAGE_FAIL_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, dates.size(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                craftSuccessMessage(days, slot)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft success message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String craftSuccessMessage(Map\u003cLocalDate, Day\u003e days, Slot slot) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"On dates:\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e day : days.entrySet()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(count);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\".\\t\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(day.getValue().getType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(day.getKey().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(day.getKey().getDayOfWeek().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(slot.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 slot.equals(((AddCommand) other).slot)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 recurrence.equals(((AddCommand) other).recurrence));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 97,
      "-": 21
    }
  },
  {
    "path": "src/planmysem/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Clears the planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the planner permanently.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The Planner has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.clearSlots();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 10,
      "marcus-pzj": 1,
      "-": 12
    }
  },
  {
    "path": "src/planmysem/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 21
    }
  },
  {
    "path": "src/planmysem/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * The feedback message to be shown to the user. Contains a description of the execution result"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * The list of Slots that was produced by the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e slots;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slots \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns list of Slots relevant to the command command result, if any."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Optional\u003cList\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e\u003e getRelevantSlots() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Optional.ofNullable(slots);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 42,
      "-": 20
    }
  },
  {
    "path": "src/planmysem/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD_ALT \u003d \"del\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete single or multiple slots in the Planner.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tParameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t\\tMandatory: t/TAG... or INDEX\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample 1: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \" t/CS2113T t/Tutorial\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample 2: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \" 2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NO_CHANGE \u003d \"No Slots were deleted.\\n\\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s Slots deleted.\\n\\n%2$s\\n%3$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SLOT_NOT_IN_PLANNER \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            \"Slot could not be found in Planner. Perhaps it was previously deleted.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final int targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public DeleteCommand(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        targetIndex \u003d -1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSelected;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSlots;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (targetIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            selectedSlots.addAll(model.getSlots(tags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (selectedSlots.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_SUCCESS_NO_CHANGE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    Messages.craftSelectedMessage(tags)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // perform deletion of slots from the planner"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e entry : selectedSlots) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                model.removeSlot(entry.getKey(), entry.getValue().getValue());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            messageSelected \u003d Messages.craftSelectedMessage(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            messageSlots \u003d Messages.craftSelectedMessage(\"Deleted Slots:\", selectedSlots);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                final Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e target \u003d model.getLastShownItem(targetIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                // check if slot still exist"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                if (!model.slotExists(target.getKey(), target.getValue().getValue())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    throw new CommandException(MESSAGE_SLOT_NOT_IN_PLANNER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                selectedSlots.add(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                model.removeSlot(target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSelected \u003d Messages.craftSelectedMessage(targetIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSlots \u003d Messages.craftSelectedMessage(\"Deleted Slot:\", selectedSlots);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                selectedSlots.size(), messageSelected, messageSlots));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 tags.equals(((DeleteCommand) other).tags)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 targetIndex \u003d\u003d ((DeleteCommand) other).targetIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 110
    }
  },
  {
    "path": "src/planmysem/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit single or multiple slots in the Planner.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tParameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t\\tMandatory: t/TAG... or INDEX\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\t\\tOptional: [nst/NEW_START_TIME] [net/NEW_END_TIME|DURATION] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"[nl/NEW_LOCATION] [nd/NEW_DESCRIPTION]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample 1: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \" t/CS2113T t/Tutorial nl/COM2 04-01\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample 2: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \" 2 nl/COM2 04-01\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s Slots edited.\\n\\n%2$s\\n%3$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NO_CHANGE \u003d \"No Slots were edited.\\n\\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final int duration;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cString\u003e newTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final int targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Convenience constructor using raw values. Edit via tags."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public EditCommand(String name, LocalTime startTime, int duration, String location, String description,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                       Set\u003cString\u003e tags, Set\u003cString\u003e newTags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        targetIndex \u003d -1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (newTags !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.newTags.addAll(newTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Convenience constructor using raw values. Edit via index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public EditCommand(int index, String name, LocalDate date, LocalTime startTime, int duration,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                       String location, String description, Set\u003cString\u003e newTags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (newTags !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.newTags.addAll(newTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSelected;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSlots;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (targetIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            selectedSlots.addAll(model.getSlots(tags));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (selectedSlots.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_SUCCESS_NO_CHANGE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        Messages.craftSelectedMessage(tags)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // Need to craft success message earlier to get original instead of edited Slots"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            messageSlots \u003d craftSuccessMessage(selectedSlots);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e entry : selectedSlots) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                model.editSlot(entry.getKey(), entry.getValue().getValue(), date,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        startTime, duration, name, location, description, newTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            messageSelected \u003d Messages.craftSelectedMessage(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                final Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e target \u003d model.getLastShownItem(targetIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                selectedSlots.add(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                // Need to craft success message earlier to get original instead of edited Slots"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSlots \u003d craftSuccessMessage(selectedSlots);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                model.editSlot(target.getKey(), target.getValue().getValue(), date,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        startTime, duration, name, location, description, newTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSelected \u003d Messages.craftSelectedMessage(targetIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSelected, messageSlots));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Craft success message."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String craftSuccessMessage(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"Details Edited: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (name !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\nName: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (\"\".equals(name)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb.append(\"null\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb.append(name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\nStart Time: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(startTime.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (duration !\u003d -1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\nDuration: \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(duration);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\nLocation: \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (\"\".equals(location)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb.append(\"null\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb.append(location);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\nDescription: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (\"\".equals(description)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb.append(\"null\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb.append(description);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\\"\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (newTags.size() \u003e 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            StringJoiner sj \u003d new StringJoiner(\", \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (String tag : newTags) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                StringBuilder sb2 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb2.append(\"\\\"\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb2.append(tag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sb2.append(\"\\\"\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                sj.add(sb2.toString());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(sj.toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(Messages.craftSelectedMessage(\"Edited Slots:\", selectedSlots));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(date, ((EditCommand) other).date)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, ((EditCommand) other).startTime)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 duration \u003d\u003d ((EditCommand) other).duration"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(name, ((EditCommand) other).name)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(location, ((EditCommand) other).location)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(description, ((EditCommand) other).description)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 tags.equals(((EditCommand) other).tags)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 newTags.equals(((EditCommand) other).newTags)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 targetIndex \u003d\u003d ((EditCommand) other).targetIndex);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 219
    }
  },
  {
    "path": "src/planmysem/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PlanMySem as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 9,
      "-": 12
    }
  },
  {
    "path": "src/planmysem/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.IcsSemester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Exports the calendar into a .ics file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export the planner as a .ics file.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            + \"\\n\\tParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            + \"\\n\\t\\tOptional: [fn/FILENAME]\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD + \" my_planner.ics\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar exported.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String MESSAGE_FAILED \u003d \"Export failed. File cannot be created\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public ExportCommand(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Planner planner \u003d model.getPlanner();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Semester semester \u003d planner.getSemester();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        IcsSemester icsSemester \u003d new IcsSemester(semester);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(fileName + \".ics\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            writer.write(icsSemester.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            throw new CommandException(MESSAGE_FAILED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \u0026\u0026 fileName.equals(((ExportCommand) other).fileName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 7,
      "macchazuki": 47
    }
  },
  {
    "path": "src/planmysem/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.WeightedName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Finds all slots in planner whose name contains the argument keyword."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"f\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"%1$s Slots listed.\\n%2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static final String MESSAGE_SUCCESS_NONE \u003d \"0 Slots listed.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all slots whose name \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"contains the specified keywords (case-sensitive).\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tMandatory Parameters: n/NAME or t/TAG...\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD + \" n/CS1010\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final boolean isFindByName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e lastShownList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public FindCommand(String name, String tag) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.keyword \u003d (name \u003d\u003d null) ? tag.trim() : name.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.isFindByName \u003d (name !\u003d null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (isFindByName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    generateDiscoveredNames(keyword, slot.getName(), entry, slot);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    for (String tag : tagSet) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        generateDiscoveredNames(keyword, tag, entry, slot);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (weightedNames.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_NONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (WeightedName entry : selectedSlots) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            ReadOnlyDay day \u003d entry.getMap().getValue();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            ReadOnlySlot slot \u003d entry.getSlot();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            Pair\u003cReadOnlyDay, ReadOnlySlot\u003e pair \u003d new Pair\u003c\u003e(day, slot);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            lastShownList.add(new Pair\u003c\u003e(entry.getMap().getKey(), pair));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    * If a slot entry is found, calculates the Levenshtein Distance between the name and the keyword."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    * Updates the weightedNames PQ with the new WeightedName pair containing the name and its weight."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private void generateDiscoveredNames(String keyword, String compareString,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                         Map.Entry\u003cLocalDate, Day\u003e entry, Slot slot) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // Pattern Matching: Check for presence of keyword in name/tag"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (!Pattern.matches(\".*\" + keyword + \".*\", compareString)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        //calculate Levenshtein Distance if a match is found"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        int dist \u003d Utils.getLevenshteinDistance(keyword, compareString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public boolean getIsFindByName() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return isFindByName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 18,
      "marcus-pzj": 100,
      "-": 14
    }
  },
  {
    "path": "src/planmysem/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + EditCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\n\" + ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + HistoryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + UndoCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + RedoCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + ExportCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + ImportCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 18,
      "dingheng4448": 1,
      "-": 16
    }
  },
  {
    "path": "src/planmysem/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"h\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \": Lists all the commands that you have entered in reverse chronological order.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        requireNonNull(commandHistory);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(commandHistory.getHistory());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 40
    }
  },
  {
    "path": "src/planmysem/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Imports a .ics file into the Planner."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports a .ics file into the Planner.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            + \"\\n\\tParameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            + \"\\n\\t\\tMandatory: fn/FILENAME\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD + \" my_outlook_calendar.ics\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File imported.\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static final String MESSAGE_ERROR_IN_READING_FILE \u003d \"Error in reading file.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private int failedImports \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public ImportCommand(String fileName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        if (!fileName.endsWith(\".ics\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            this.fileName \u003d fileName.concat(\".ics\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            FileReader fileReader;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            fileReader \u003d new FileReader(this.fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            String sCurrentLine \u003d br.readLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            while (!(\"END:VCALENDAR\".equals(sCurrentLine))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                sCurrentLine \u003d br.readLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                if (\"BEGIN:VEVENT\".equals(sCurrentLine)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    LocalDate date \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    String name \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    String location \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    String description \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    LocalTime startTime \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    int duration \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    while (!(\"END:VEVENT\".equals(sCurrentLine))) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        sCurrentLine \u003d br.readLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        String[] sSplit \u003d sCurrentLine.split(\":\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        switch (sSplit[0]) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        case \"SUMMARY\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            name \u003d sSplit[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        case \"DTSTART\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            date \u003d LocalDate.parse(sSplit[1], dateFormat);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            startTime \u003d LocalTime.parse(sSplit[1], dateFormat);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        case \"DTEND\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            LocalDateTime startDateTime \u003d LocalDateTime.of(date, startTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            LocalDateTime endDateTime \u003d LocalDateTime.parse(sSplit[1], dateFormat);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            duration \u003d (int) startDateTime.until(endDateTime, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        case \"LOCATION\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            location \u003d sSplit[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        case \"DESCRIPTION\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            description \u003d sSplit[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        case \"X-TAGS\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            String[] tagArray \u003d sSplit[1].split(\",\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            tags.addAll(Arrays.asList(tagArray));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    Slot slot \u003d new Slot(name, location, description, startTime, duration, tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    Recurrence recurrence \u003d new Recurrence(null, date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    Set\u003cLocalDate\u003e dates \u003d recurrence.generateDates(model.getPlanner().getSemester());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    Map\u003cLocalDate, Day\u003e days \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    for (LocalDate singleDate : dates) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            days.put(singleDate, model.addSlot(date, slot));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        } catch (Semester.DateNotFoundException dnfe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                            this.failedImports++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR_IN_READING_FILE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        if (this.failedImports \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + this.failedImports + \" event(s) failed to import.\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \u0026\u0026 fileName.equals(((ImportCommand) other).fileName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanieyap": 1,
      "macchazuki": 140
    }
  },
  {
    "path": "src/planmysem/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Displays a list of all slots in the planner whose name matches the argument keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"l\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s Slots listed.\\n%2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NONE \u003d \"0 Slots listed.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all slots/ slots whose name \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"directly matches the specified keyword (not case-sensitive).\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"\\n\\tMandatory Parameters: n/NAME or t/TAG... or o/OPTION\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD + \" n/CS1010\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD + \" all\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final boolean isListByName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private final boolean isListAll;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ListCommand(String name, String tag) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.keyword \u003d (name \u003d\u003d null) ? tag.trim() : name.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.isListByName \u003d (name !\u003d null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.isListAll \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.keyword \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.isListByName \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.isListAll \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (isListAll) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (isListByName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    if (slot.getName().equalsIgnoreCase(keyword)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    for (String tag : tagSet) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        if (tag.equalsIgnoreCase(keyword)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                            selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (selectedSlots.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_NONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        selectedSlots.sort((p1, p2) -\u003e p1.getKey().compareTo(p2.getKey()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.setLastShownList(selectedSlots);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessage(selectedSlots)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public boolean getIsListByName() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return isListByName;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 94
    }
  },
  {
    "path": "src/planmysem/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Reverts the {@code model}\u0027s planner to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reverses the most recent undo command.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (!model.canRedo()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.redo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.clearLastShownList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 35
    }
  },
  {
    "path": "src/planmysem/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * Reverts the {@code model}\u0027s planner to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Restores the planner to the state before the previous\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \" undoable command was executed.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            + \"\\n\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.clearLastShownList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 35
    }
  },
  {
    "path": "src/planmysem/logic/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.firstDayOfYear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_DATE_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.common.Utils.getNearestDayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": " * View the planner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public static final String COMMAND_WORD_SHORT \u003d \"v\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View month/week/day view of planner.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\tFormat: view [viewType] [specifier]\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\tParameters:\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tMandatory: [viewType]\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tOptional: [specifier]\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\tView month example: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 1: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" month\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\tView week example: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 1: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" week 7\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 2: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" week recess\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 3: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" week\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 4: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" week details\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\tView day example: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 1: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" day 01-03-2019\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 2: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" day monday\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \"\\n\\t\\tExample 3: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            + \" day\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private final String[] viewArgs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public ViewCommand(String[] viewArgs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.viewArgs \u003d viewArgs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Semester currentSemester \u003d model.getPlanner().getSemester();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String viewType \u003d viewArgs[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            output \u003d displayMonthView(currentSemester);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if ((viewArgs.length \u003d\u003d 3 \u0026\u0026 \"Details\".equals(viewArgs[2]))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    || (viewArgs.length \u003d\u003d 2 \u0026\u0026 \"Details\".equals(viewArgs[1]))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                output \u003d displayDetailedWeekView(currentSemester, viewArgs[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (viewArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                output \u003d displayWeekView(currentSemester, viewArgs[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                output \u003d displayWeekView(currentSemester, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (viewArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                output \u003d displayDayView(currentSemester, viewArgs[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                output \u003d displayDayView(currentSemester, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Display all months for the semester."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Solution below adapted from https://introcs.cs.princeton.edu/java/21function/Calendar.java.html"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private String displayMonthView(Semester currentSemester) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cLocalDate, Day\u003e allDays \u003d currentSemester.getDays();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate semesterStartDate \u003d currentSemester.getStartDate();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate semesterEndDate \u003d currentSemester.getEndDate();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int year \u003d semesterStartDate.getYear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate firstDay \u003d semesterStartDate.with(firstDayOfYear());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int spaces \u003d firstDay.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int firstMonthOfSem \u003d semesterStartDate.getMonthValue();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int lastMonthOfSem \u003d semesterEndDate.getMonthValue();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String[] months \u003d {\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String[] monthOutput \u003d new String[12];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int[] days \u003d {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int m \u003d 1; m \u003c\u003d 12; m++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            StringBuilder monthBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            // Set number of days in February to 29 if it is a leap year."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if ((((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0)) \u0026\u0026 m \u003d\u003d 2) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                days[m] \u003d 29;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            // Print calendar header."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            monthBuilder.append(\"          \" + months[m] + \" \" + year + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            monthBuilder.append(\"_____________________________________\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            monthBuilder.append(\"   Sun  Mon Tue   Wed Thu   Fri  Sat\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            // Print spaces required for the start of a month."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            spaces \u003d (days[m - 1] + spaces) % 7;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            for (int i \u003d 0; i \u003c spaces; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                monthBuilder.append(\"     \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            // Print the days in the month."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d days[m]; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                monthBuilder.append(String.format(\"  %3d\", i));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (((i + spaces) % 7 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    Day tempDay \u003d allDays.get(LocalDate.of(year, m, i));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    String weekType \u003d \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    if (tempDay !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        weekType \u003d tempDay.getType();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    monthBuilder.append(\"   | \" + weekType + \"\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                } else if (i \u003d\u003d days[m]) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    LocalDate tempDate \u003d LocalDate.of(year, m, i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    Day tempDay \u003d allDays.get(tempDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    String weekType \u003d \"\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    int extraSpaces \u003d 6 - (tempDate.getDayOfWeek().getValue() % 7);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    for (int j \u003d 0; j \u003c extraSpaces; j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        monthBuilder.append(\"     \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    if (tempDay !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        weekType \u003d tempDay.getType();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    monthBuilder.append(\"   | \" + weekType + \"\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            monthBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            monthOutput[m - 1] \u003d monthBuilder.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int m \u003d firstMonthOfSem - 1; m \u003c lastMonthOfSem; m++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(monthOutput[m]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Display all slots for a given week in a formatted view."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private String displayWeekView(Semester currentSemester, String givenWeek) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cLocalDate, Day\u003e allDays \u003d currentSemester.getDays();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        List\u003cLocalDate\u003e datesList;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate weekStart;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate weekEnd;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int[] weekOfYear \u003d {0, 0};"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String week \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (givenWeek \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            week \u003d allDays.get(LocalDate.now(Clock.get())).getType() + \" of \" + currentSemester.getName();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d LocalDate.now(Clock.get()).with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekEnd \u003d weekStart.plusDays(7);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            datesList \u003d weekStart.datesUntil(weekEnd).collect(Collectors.toList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            HashMap\u003cInteger, String\u003e acadCal \u003d currentSemester.getAcadCal();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            String key;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            week \u003d givenWeek;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (\"Recess\".equals(week) || \"Reading\".equals(week) || \"Examination\".equals(week)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    || \"Orientation\".equals(week)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                key \u003d week + \" Week\" + \"_\" + currentSemester.getName();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                week \u003d week + \" Week of \" + currentSemester.getName();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                key \u003d \"Week \" + week + \"_\" + currentSemester.getName();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                week \u003d \"Week \" + week + \" of \" + currentSemester.getName();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            for (Map.Entry\u003cInteger, String\u003e entry: acadCal.entrySet()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (key.equals(entry.getValue())) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    if (weekOfYear[0] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        weekOfYear[0] \u003d entry.getKey();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        weekOfYear[1] \u003d entry.getKey();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d LocalDate.now(Clock.get()).with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfYear[0]);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d weekStart.with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekEnd \u003d weekStart.with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfYear[0] + 1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            datesList \u003d weekStart.datesUntil(weekEnd).collect(Collectors.toList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print academic week header."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int width \u003d 120;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, week) + \"\\n\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print formatted week view."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(getFormattedWeek(allDays, datesList));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (weekOfYear[1] !\u003d 0) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d weekEnd;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekEnd \u003d weekStart.plusDays(7);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            datesList \u003d weekStart.datesUntil(weekEnd).collect(Collectors.toList());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"\\n\" + getFormattedWeek(allDays, datesList));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Display all slots for a given week in a detailed view."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private String displayDetailedWeekView(Semester currentSemester, String week) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cLocalDate, Day\u003e allDays \u003d currentSemester.getDays();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        List\u003cLocalDate\u003e datesList;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate weekStart;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate weekEnd;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int[] weekOfYear \u003d {0, 0};"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (\"Details\".equals(week)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(allDays.get(LocalDate.now(Clock.get())).getType() + \" of \" + currentSemester.getName() + \"\\n\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d LocalDate.now(Clock.get()).with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekEnd \u003d weekStart.plusDays(7);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            datesList \u003d weekStart.datesUntil(weekEnd).collect(Collectors.toList());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            HashMap\u003cInteger, String\u003e acadCal \u003d currentSemester.getAcadCal();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            String key;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (\"Recess\".equals(week) || \"Reading\".equals(week) || \"Examination\".equals(week)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    || \"Orientation\".equals(week)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                key \u003d week + \" Week\" + \"_\" + currentSemester.getName();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                sb.append(week + \" Week\" + \" of \" + currentSemester.getName() + \"\\n\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                key \u003d \"Week \" + week + \"_\" + currentSemester.getName();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                sb.append(\"Week \" + week + \" of \" + currentSemester.getName() + \"\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            for (Map.Entry\u003cInteger, String\u003e entry: acadCal.entrySet()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (key.equals(entry.getValue())) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    if (weekOfYear[0] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        weekOfYear[0] \u003d entry.getKey();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        weekOfYear[1] \u003d entry.getKey();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d LocalDate.now(Clock.get()).with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfYear[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekStart \u003d weekStart.with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekEnd \u003d weekStart.with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfYear[0] + 1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (weekOfYear[1] !\u003d 0) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                weekEnd \u003d weekStart.with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfYear[0] + 2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            datesList \u003d weekStart.datesUntil(weekEnd).collect(Collectors.toList());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(\"__________________________________________________________________________\\n\\n\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (LocalDate date : datesList) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(displayDayView(currentSemester, date.format(formatter)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"__________________________________________________________________________\\n\\n\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Display all slots for a given day/date."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private String displayDayView(Semester currentSemester, String dateOrDay) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cLocalDate, Day\u003e allDays \u003d currentSemester.getDays();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Parse different formats of given day/date."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate givenDate;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (dateOrDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            givenDate \u003d LocalDate.now(Clock.get());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            int day \u003d -1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            givenDate \u003d Utils.parseDate(dateOrDay);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (givenDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                day \u003d Utils.parseDay(dateOrDay);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (day \u003d\u003d -1 \u0026\u0026 givenDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (day !\u003d -1) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                givenDate \u003d getNearestDayOfWeek(LocalDate.now(Clock.get()), day);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (givenDate.isAfter(currentSemester.getStartDate().minusDays(1))"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \u0026\u0026 givenDate.isBefore(currentSemester.getEndDate().plusDays(1))) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(givenDate.getDayOfWeek().name() + \" , \" + givenDate + \"\\n\\n\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            return MESSAGE_DATE_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Retrieve all slots for given day/date in sorted order."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ArrayList\u003cSlot\u003e allSlotsInDay \u003d allDays.get(givenDate).getSlots();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Comparator\u003cSlot\u003e comparator \u003d new Comparator\u003cSlot\u003e() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            public int compare(final Slot o1, final Slot o2) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return o1.getStartTime().compareTo(o2.getStartTime());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        };"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        allSlotsInDay.sort(comparator);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print each slot."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (Slot slot : allSlotsInDay) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"* \" + slot.getStartTime());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\" to \");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(Utils.getEndTime(slot.getStartTime(), slot.getDuration()));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"\\n\\t\" + slot.getName() + \"\\n\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (slot.getLocation() !\u003d null) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                sb.append(\"\\t\" + \"Location: \" + slot.getLocation() + \"\\n\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (slot.getDescription() !\u003d null) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                sb.append(\"\\t\" + \"Description: \" + slot.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (!slot.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                sb.append(\"\\n\\tTags: \\n\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                for (String tag : slot.getTags()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    sb.append(\"\\t\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    sb.append(count);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    sb.append(\". \");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    sb.append(tag);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Center aligns text."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private String centerAlignText(int width, String text) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String formattedString \u003d text;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int padSize \u003d width - formattedString.length();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int padStart \u003d formattedString.length() + padSize / 2;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        formattedString \u003d String.format(\"%\" + padStart + \"s\", formattedString);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        formattedString \u003d String.format(\"%-\" + width + \"s\", formattedString);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Returns formatted week view."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private String getFormattedWeek(HashMap\u003cLocalDate, Day\u003e allDays, List\u003cLocalDate\u003e datesList) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print line divider."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int width \u003d 120;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d 0; i \u003c width; i++) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"-\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print days of week header."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        width \u003d 16;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(\"|\" + centerAlignText(width, \"Monday\") + \"|\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, \"Tuesday\") + \"|\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, \"Wednesday\") + \"|\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, \"Thursday\") + \"|\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, \"Friday\") + \"|\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, \"Saturday\") + \"|\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(centerAlignText(width, \"Sunday\") + \"|\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(\"\\n|\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (LocalDate date : datesList) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(centerAlignText(width, date.toString()) + \"|\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        width \u003d 120;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d 0; i \u003c width; i++) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"-\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Retrieve all slots for each day."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ArrayList\u003cArrayList\u003cSlot\u003e\u003e slotsInDayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (LocalDate date : datesList) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            ArrayList\u003cSlot\u003e allSlotsInDay \u003d allDays.get(date).getSlots();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            Comparator\u003cSlot\u003e comparator \u003d new Comparator\u003cSlot\u003e() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                public int compare(final Slot o1, final Slot o2) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    return o1.getStartTime().compareTo(o2.getStartTime());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            };"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            allSlotsInDay.sort(comparator);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            slotsInDayList.add(new ArrayList\u003c\u003e(allSlotsInDay));"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print all slots for each day."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        width \u003d 16;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        while (!slotsInDayList.get(0).isEmpty() || !slotsInDayList.get(1).isEmpty()"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                || !slotsInDayList.get(2).isEmpty() || !slotsInDayList.get(3).isEmpty()"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                || !slotsInDayList.get(4).isEmpty() || !slotsInDayList.get(5).isEmpty()"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                || !slotsInDayList.get(6).isEmpty()) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            StringBuilder slotTimingLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            StringBuilder slotTitleLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            StringBuilder emptyLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            slotTimingLine.append(\"|\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            slotTitleLine.append(\"\\n|\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            emptyLine.append(\"\\n|\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            for (ArrayList\u003cSlot\u003e allSlotsInDay : slotsInDayList) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (allSlotsInDay.isEmpty()) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    slotTimingLine.append(centerAlignText(width, \"\") + \"|\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    slotTitleLine.append(centerAlignText(width, \"\") + \"|\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    Slot slot \u003d allSlotsInDay.get(0);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    String slotTiming \u003d \"* \" + slot.getStartTime() + \" - \""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                            + Utils.getEndTime(slot.getStartTime(), slot.getDuration()) + \" |\";"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    slotTimingLine.append(slotTiming);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    String shortTitle;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    if (slot.getName().length() \u003c 15) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        shortTitle \u003d slot.getName();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                        shortTitle \u003d slot.getName().substring(0, 14) + \"..\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    slotTitleLine.append(centerAlignText(width, shortTitle) + \"|\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    allSlotsInDay.remove(0);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                emptyLine.append(centerAlignText(width, \"\") + \"|\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(slotTimingLine.toString() + slotTitleLine.toString() + emptyLine.toString() + \"\\n\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Print closing border."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        width \u003d 120;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d 0; i \u003c width; i++) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            sb.append(\"-\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \u0026\u0026 Arrays.equals(viewArgs, ((ViewCommand) other).viewArgs));"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 7,
      "dingheng4448": 488
    }
  },
  {
    "path": "src/planmysem/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 17
    }
  },
  {
    "path": "src/planmysem/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_DATE_OR_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Name is mandatory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d getFirstInSet(arguments.get(PREFIX_NAME));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if ((arguments \u003d\u003d null || arguments.isEmpty())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (name \u003d\u003d null || name.isEmpty())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || arguments.get(PREFIX_DATE_OR_DAY) \u003d\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || arguments.get(PREFIX_START_TIME) \u003d\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || arguments.get(PREFIX_END_TIME) \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Either date or day must be present"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String dateOrDay \u003d getFirstInSet(arguments.get(PREFIX_DATE_OR_DAY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int day \u003d -1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d Utils.parseDate(dateOrDay);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            day \u003d Utils.parseDay(dateOrDay);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (day \u003d\u003d -1 \u0026\u0026 date \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_DATE_OR_DAY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Start time is mandatory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String stringStartTime \u003d getFirstInSet(arguments.get(PREFIX_START_TIME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d Utils.parseTime(stringStartTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // determine if \"end time\" is a duration or time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String stringEndTime \u003d getFirstInSet(arguments.get(PREFIX_END_TIME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d Utils.parseInteger(stringEndTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (duration \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            LocalTime endTime \u003d Utils.parseTime(stringEndTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            duration \u003d Utils.getDuration(startTime, endTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (duration \u003c 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_ENDTIME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Description is not mandatory and can be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d getFirstInSet(arguments.get(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Location is not mandatory and can be null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d getFirstInSet(arguments.get(PREFIX_LOCATION));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Tags is not mandatory"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d arguments.get(PREFIX_TAG);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (String tag : tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                if (tag.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                            AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TAG));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Recurrences is not mandatory"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e recurrences \u003d arguments.get(PREFIX_RECURRENCE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (day !\u003d -1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    day,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    name,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    location,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    description,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    startTime,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    duration,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    tags,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    recurrences"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    date,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    name,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    location,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    description,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    startTime,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    duration,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    tags,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    recurrences"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            );"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 129
    }
  },
  {
    "path": "src/planmysem/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String stringIndex \u003d getStartingArgument(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int index \u003d Utils.parseInteger(stringIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d arguments.get(PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if ((index \u003c\u003d 0 \u0026\u0026 tags \u003d\u003d null) || (index \u003e 0 \u0026\u0026 tags !\u003d null)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new DeleteCommand(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 40
    }
  },
  {
    "path": "src/planmysem/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_NOTHING_TO_EDIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String stringIndex \u003d getStartingArgument(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int index \u003d Utils.parseInteger(stringIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d arguments.get(PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if ((index \u003c\u003d 0 \u0026\u0026 tags \u003d\u003d null) || (index \u003e\u003d 0 \u0026\u0026 tags !\u003d null)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String nst \u003d getFirstInSet(arguments.get(PREFIX_NEW_START_TIME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (nst !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            startTime \u003d Utils.parseTime(nst);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        EditCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // determine if \"end time\" is a duration or time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String net \u003d getFirstInSet(arguments.get(PREFIX_NEW_END_TIME));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d -1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (net !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            duration \u003d Utils.parseInteger(net);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (duration \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime endTime \u003d Utils.parseTime(net);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                            EditCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    duration \u003d Utils.getDuration(startTime, endTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // The following are not mandatory and can be null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d getFirstInSet(arguments.get(PREFIX_NEW_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d getFirstInSet(arguments.get(PREFIX_NEW_LOCATION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d getFirstInSet(arguments.get(PREFIX_NEW_DESCRIPTION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e newTags \u003d arguments.get(PREFIX_NEW_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // check if no edits"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if ((name \u003d\u003d null || name.isEmpty())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 startTime \u003d\u003d null \u0026\u0026 duration \u003d\u003d -1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 (location \u003d\u003d null || location.isEmpty())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 (description \u003d\u003d null || description.isEmpty())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 newTags \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    EditCommand.MESSAGE_USAGE, MESSAGE_NOTHING_TO_EDIT));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new EditCommand(name, startTime, duration, location, description, tags, newTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            String nd \u003d getFirstInSet(arguments.get(PREFIX_NEW_DATE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            LocalDate date \u003d Utils.parseDate(nd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new EditCommand(index, name, date, startTime, duration, location, description, newTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 90
    }
  },
  {
    "path": "src/planmysem/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String trimArg \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String fileName \u003d getFirstInSet(arguments.get(PREFIX_FILE_NAME));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        if (fileName \u003d\u003d null || \"\".equals(fileName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            if (\"\".equals(trimArg)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                return new ExportCommand(\"PlanMySem\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new ExportCommand(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 38
    }
  },
  {
    "path": "src/planmysem/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_MULTIPLE_PARAMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d getFirstInSet(arguments.get(PREFIX_NAME));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String tag \u003d getFirstInSet(arguments.get(PREFIX_TAG));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (name \u003d\u003d null \u0026\u0026 tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else if (name !\u003d null \u0026\u0026 tag !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_MULTIPLE_PARAMS, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new FindCommand(name, tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 36
    }
  },
  {
    "path": "src/planmysem/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String fileName \u003d getFirstInSet(arguments.get(PREFIX_FILE_NAME));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        if (fileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new ImportCommand(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 32
    }
  },
  {
    "path": "src/planmysem/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_MULTIPLE_PARAMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e arguments \u003d getParametersWithArguments(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d getFirstInSet(arguments.get(PREFIX_NAME));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String tag \u003d getFirstInSet(arguments.get(PREFIX_TAG));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String option \u003d getStartingArgument(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        if (option !\u003d null \u0026\u0026 option.equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (name \u003d\u003d null \u0026\u0026 tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else if (name !\u003d null \u0026\u0026 tag !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_MULTIPLE_PARAMS, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new ListCommand(name, tag);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 35,
      "marcus-pzj": 5
    }
  },
  {
    "path": "src/planmysem/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NAME \u003d \"n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_DATE_OR_DAY \u003d \"d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_START_TIME \u003d \"st\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_END_TIME \u003d \"et\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_RECURRENCE \u003d \"r\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_LOCATION \u003d \"l\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_DESCRIPTION \u003d \"des\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_TAG \u003d \"t\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_NAME \u003d \"nn\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_DATE \u003d \"nd\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_START_TIME \u003d \"nst\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_END_TIME \u003d \"net\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_LOCATION \u003d \"nl\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_DESCRIPTION \u003d \"ndes\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String PREFIX_NEW_TAG \u003d \"nt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    String PREFIX_FILE_NAME \u003d \"fn\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses arguments in the context of the add slots command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return hashmap of parameter command with set of parameters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    default HashMap\u003cString, Set\u003cString\u003e\u003e getParametersWithArguments(String args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String parameters \u003d args.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String parameter;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String option;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int buf;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        HashMap\u003cString, Set\u003cString\u003e\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            buf \u003d parameters.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (buf \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            option \u003d parameters.substring(0, buf).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (option.contains(\" \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                parameters \u003d parameters.substring(option.lastIndexOf(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            parameters \u003d parameters.substring(buf + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (parameters.indexOf(\u0027/\u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                parameter \u003d parameters.substring(0, parameters.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                if (parameter.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    parameter \u003d parameter.substring(0, parameter.lastIndexOf(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                parameter \u003d parameters;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (result.get(option) \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.put(option, new HashSet\u003c\u003e(Collections.singletonList(parameter.trim())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Set\u003cString\u003e ss \u003d result.get(option);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ss.add(parameter.trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.replace(option, ss);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (parameters.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            parameters \u003d parameters.substring(parameter.length());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get the first argument."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    default String getStartingArgument(String args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String result \u003d args;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // test if firstArgument is present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (result.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else if (result.indexOf(\u0027/\u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result \u003d result.substring(0, result.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (result.lastIndexOf(\" \") \u003d\u003d -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return result.substring(0, result.lastIndexOf(\" \")).trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return result.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get the first string in a set."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    default String getFirstInSet(Set\u003cString\u003e set) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (set \u003d\u003d null || set.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return set.stream().findFirst().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 118,
      "macchazuki": 1
    }
  },
  {
    "path": "src/planmysem/logic/parser/ParserManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case AddCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case EditCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_ALT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case FindCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ListCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ViewCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case UndoCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case RedoCommand.COMMAND_WORD_SHORT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 92,
      "marcus-pzj": 8,
      "macchazuki": 5
    }
  },
  {
    "path": "src/planmysem/logic/parser/ViewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_ILLEGAL_WEEK_VALUE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_DATE_OR_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (args \u003d\u003d null || args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String[] viewArgs \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String viewType \u003d viewArgs[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (viewArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return new ViewCommand(viewArgs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (viewArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return new ViewCommand(viewArgs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                viewArgs[1] \u003d viewArgs[1].substring(0, 1).toUpperCase() + viewArgs[1].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (\"Exam\".equals(viewArgs[1])) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    viewArgs[1] \u003d \"Examination\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (!\"Details\".equals(viewArgs[1]) \u0026\u0026 checkIllegalWeekValue(viewArgs[1])) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_ILLEGAL_WEEK_VALUE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return new ViewCommand(viewArgs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                viewArgs[1] \u003d viewArgs[1].substring(0, 1).toUpperCase() + viewArgs[1].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                viewArgs[2] \u003d viewArgs[2].substring(0, 1).toUpperCase() + viewArgs[2].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (\"Exam\".equals(viewArgs[1])) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    viewArgs[1] \u003d \"Examination\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (\"Exam\".equals(viewArgs[2])) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    viewArgs[2] \u003d \"Examination\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (\"Details\".equals(viewArgs[1])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    String tempArg \u003d viewArgs[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    viewArgs[1] \u003d viewArgs[2];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    viewArgs[2] \u003d tempArg;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (!\"Details\".equals(viewArgs[2]) || checkIllegalWeekValue(viewArgs[1])) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_ILLEGAL_WEEK_VALUE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return new ViewCommand(viewArgs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (viewArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return new ViewCommand(viewArgs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                LocalDate date \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                int day \u003d -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                // Parse different formats of given day/date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                date \u003d Utils.parseDate(viewArgs[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    day \u003d Utils.parseDay(viewArgs[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (day \u003d\u003d -1 \u0026\u0026 date \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_DATE_OR_DAY, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                return new ViewCommand(viewArgs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Checks if user inputs an illegal week value."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private Boolean checkIllegalWeekValue(String week) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Boolean illegalWeek \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int weekNo \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (week.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            weekNo \u003d Integer.parseInt(week);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (weekNo \u003e 0 \u0026\u0026 weekNo \u003c 14) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            illegalWeek \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (\"Recess\".equals(week) || \"Reading\".equals(week) || \"Examination\".equals(week)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                || \"Orientation\".equals(week)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            illegalWeek \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return illegalWeek;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 31,
      "dingheng4448": 99
    }
  },
  {
    "path": "src/planmysem/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 13
    }
  },
  {
    "path": "src/planmysem/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Set last shown list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void setLastShownList(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e list);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void setLastShownList(Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void clearLastShownList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Saves the current planner state for undo/redo."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get last shown list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getLastShownList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get item in last shown list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e getLastShownItem(int index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Adds a slot to the Planner."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Day addSlot(LocalDate date, Slot slot) throws Semester.DateNotFoundException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Removes a Slot in the Planner."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void removeSlot(LocalDate date, ReadOnlySlot slot);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Removes a Slot in the Planner."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void removeSlot(Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e slot);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Edit specific slot within the planner."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void editSlot(LocalDate targetDate, ReadOnlySlot targetSlot, LocalDate date,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         LocalTime startTime, int duration, String name, String location,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         String description, Set\u003cString\u003e tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Clears all slots from the Planner."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void clearSlots();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * gets all days in the Planner."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    HashMap\u003cLocalDate, Day\u003e getDays();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Defensively copy the Semester in the Planner at the time of the call."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Planner getPlanner();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * gets specific day in the Planner."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Day getDay(LocalDate date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * check if Slot exists in some day."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    boolean slotExists(LocalDate date, ReadOnlySlot slot);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * gets all slots in the Planner containing all specified tags."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getSlots(Set\u003cString\u003e tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if the model has previous Planner states to restore."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if the model has undone Planner states to restore."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Restores the model\u0027s Planner to its previous state."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Restores the model\u0027s Planner to its previously undone state."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanieyap": 118
    }
  },
  {
    "path": "src/planmysem/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents the entire Planner. Contains the model of the Planner."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    protected List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e lastShownList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final VersionedPlanner versionedPlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Creates an empty planner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Constructs a Planner with the given model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param planner external changes to this will not affect this Planner"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ModelManager(ReadOnlyPlanner planner) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner \u003d new VersionedPlanner(planner);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setLastShownList(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e list) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        lastShownList.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (list !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            lastShownList.addAll(list);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setLastShownList(Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        lastShownList.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (list !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (Map.Entry\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e entry : list.entrySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                lastShownList.add(new Pair\u003c\u003e(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void clearLastShownList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        lastShownList.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.commit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getLastShownList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return lastShownList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e getLastShownItem(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (lastShownList \u003d\u003d null || lastShownList.size() \u003c index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day addSlot(LocalDate date, Slot slot) throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner.addSlot(date, slot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void removeSlot(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.removeSlot(date, slot);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void removeSlot(Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e slot) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.removeSlot(slot.getKey(), slot.getValue().getValue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void editSlot(LocalDate targetDate, ReadOnlySlot targetSlot, LocalDate date,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         LocalTime startTime, int duration, String name, String location,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         String description, Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.editSlot(targetDate, targetSlot, date, startTime, duration, name, location, description, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void clearSlots() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.clearSlots();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Planner getPlanner() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public HashMap\u003cLocalDate, Day\u003e getDays() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner.getDays();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day getDay(LocalDate date) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return getDays().get(date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getSlots(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner.getSlots(tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean slotExists(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return getDay(date).contains(slot);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner.canUndo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner.canRedo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.undo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.redo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return versionedPlanner.equals(other.versionedPlanner)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 lastShownList.equals(other.lastShownList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(versionedPlanner, lastShownList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 181
    }
  },
  {
    "path": "src/planmysem/model/Planner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents the entire Planner. Contains the model of the Planner."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class Planner implements ReadOnlyPlanner {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Creates an empty planner."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Planner() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester \u003d Semester.generateSemester(LocalDate.now(Clock.get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Creates a Planner using the days in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Planner(ReadOnlyPlanner toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Constructs a Planner with the given model."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param semester external changes to this will not affect this Planner"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Planner(Semester semester) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.semester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Resets the existing data of this {@code Planner} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void resetData(ReadOnlyPlanner newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        setDays(newData.getDays());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day addSlot(LocalDate date, Slot slot) throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return semester.addSlot(date, slot);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void removeSlot(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.removeSlot(date, slot);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void editSlot(LocalDate targetDate, ReadOnlySlot targetSlot, LocalDate date,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         LocalTime startTime, int duration, String name, String location,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         String description, Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.editSlot(targetDate, targetSlot, date, startTime, duration, name, location, description, tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void clearSlots() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.clearSlots();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Replaces the days of the planner with {@code days}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setDays(HashMap\u003cLocalDate, Day\u003e days) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.semester.setDays(days);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getSlots(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : getDays().entrySet()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                if (slot.getTags().containsAll(tags)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return selectedSlots;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public HashMap\u003cLocalDate, Day\u003e getDays() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return semester.getDays();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof Planner // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.semester.equals(((Planner) other).semester));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return semester.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 119
    }
  },
  {
    "path": "src/planmysem/model/ReadOnlyPlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Unmodifiable view of a Planner"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface ReadOnlyPlanner {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns an unmodifiable view of all days."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    HashMap\u003cLocalDate, Day\u003e getDays();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 18
    }
  },
  {
    "path": "src/planmysem/model/VersionedPlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * {@code Planner} that keeps track of its own history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class VersionedPlanner extends Planner {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final List\u003cReadOnlyPlanner\u003e plannerListState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public VersionedPlanner(ReadOnlyPlanner initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        plannerListState \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        plannerListState.add(initialState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Saves a copy of the current {@code Planner} state at the end of the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        plannerListState.add(new Planner(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        plannerListState.subList(currentStatePointer + 1, plannerListState.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Restores the planner to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        resetData(plannerListState.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Restores the planner to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        resetData(plannerListState.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if {@code undo()} has planner states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if {@code redo()} has planner states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return currentStatePointer \u003c plannerListState.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!(other instanceof VersionedPlanner)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner otherVersionedPlanner \u003d (VersionedPlanner) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return super.equals(otherVersionedPlanner)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 plannerListState.equals(otherVersionedPlanner.plannerListState)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedPlanner.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(plannerListState, currentStatePointer);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            super(\"Current state pointer at start of plannerState list, unable to undo.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            super(\"Current state pointer at end of plannerState list, unable to redo.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 115
    }
  },
  {
    "path": "src/planmysem/model/recurrence/Recurrence.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.recurrence;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Utils.getNearestDayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents a Recurrence Value of a slot in the Planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class Recurrence {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final boolean normal; // Represents whether to recurse"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final boolean recess; // Represents recess week"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final boolean reading; // Represents reading week"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final boolean exam; // Represents exam weeks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final boolean past; // Represents past academic weeks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generate Recurrence values from a set that recurse over a day."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Recurrence(Set\u003cString\u003e recurrences, int day) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.day \u003d DayOfWeek.of(day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        date \u003d getNearestDayOfWeek(LocalDate.now(Clock.get()), day);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (recurrences \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            normal \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            recess \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            reading \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            exam \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            past \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        normal \u003d recurrences.contains(\"normal\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        recess \u003d recurrences.contains(\"recess\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        reading \u003d recurrences.contains(\"reading\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        exam \u003d recurrences.contains(\"exam\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        past \u003d recurrences.contains(\"past\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generate Recurrence values from a set that recurse over a date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Recurrence(Set\u003cString\u003e recurrences, LocalDate date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        day \u003d date.getDayOfWeek();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (recurrences \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            normal \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            recess \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            reading \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            past \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            exam \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        normal \u003d recurrences.contains(\"normal\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        recess \u003d recurrences.contains(\"recess\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        reading \u003d recurrences.contains(\"reading\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        exam \u003d recurrences.contains(\"exam\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        past \u003d recurrences.contains(\"past\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generate dates to place slots in the semester."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Set\u003cLocalDate\u003e generateDates(Semester semester) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e result \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (!normal \u0026\u0026 !recess \u0026\u0026 !reading \u0026\u0026 !exam) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            result.add(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (past) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over normal days"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (normal) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getNormalDays()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over recess days"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (recess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getRecessDays()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over reading days"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (reading) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getReadingDays()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over exam days"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (exam) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getExamDays()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            LocalDate dateStart \u003d LocalDate.now(Clock.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over normal days"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (normal) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getNormalDays(), dateStart));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over recess days"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (recess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getRecessDays(), dateStart));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over reading days"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (reading) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getReadingDays(), dateStart));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // recurse over examination days"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (exam) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.addAll(getDates(semester.getExamDays(), dateStart));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get set of dates where it is a specific DayOfWeek and is after a start date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Set\u003cLocalDate\u003e getDates(Set\u003cLocalDate\u003e dates) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate d : dates) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (d.getDayOfWeek() \u003d\u003d day) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.add(d);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get set of dates where it is a specific DayOfWeek and is after a start date."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Set\u003cLocalDate\u003e getDates(Set\u003cLocalDate\u003e dates, LocalDate dateStart) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate d : dates) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (d.getDayOfWeek() \u003d\u003d day \u0026\u0026 (d.isAfter(dateStart) || d.isEqual(dateStart))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                result.add(d);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Get date."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof Recurrence // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.recess \u003d\u003d ((Recurrence) other).recess"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.reading \u003d\u003d ((Recurrence) other).reading"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.normal \u003d\u003d ((Recurrence) other).normal"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.exam \u003d\u003d ((Recurrence) other).exam"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.past \u003d\u003d ((Recurrence) other).past); // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(recess, reading, normal, exam, past, date);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 179
    }
  },
  {
    "path": "src/planmysem/model/semester/Day.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents a Day in the planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class Day implements ReadOnlyDay {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day(ReadOnlyDay day) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.dayOfWeek \u003d day.getDayOfWeek();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.type \u003d day.getType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Slot slot : day.getSlots()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.slots.add(new Slot(slot));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day(DayOfWeek dayOfWeek, String weekType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.type \u003d weekType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day(DayOfWeek dayOfWeek, String weekType, List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.type \u003d weekType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Slot slot : slots) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.slots.add(new Slot(slot));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Add a slot to the day."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slots.add(new Slot(slot));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Removes the equivalent slot from the day."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void removeSlot(ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slots.remove(slot);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Removes all slots from the day."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slots.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean contains(ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return slots.contains(slot);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return dayOfWeek;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return dayOfWeek.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ArrayList\u003cSlot\u003e getSlots() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof ReadOnlyDay // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyDay) other));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(dayOfWeek, type, slots);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 100,
      "dingheng4448": 2
    }
  },
  {
    "path": "src/planmysem/model/semester/IcsSemester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Converts objects into .ics format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class IcsSemester {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private String icsCalendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Converts the semester into this class for .ics use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param source Semester object to be converted into .ics format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public IcsSemester(Semester source) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        this.icsCalendar \u003d \"BEGIN:VCALENDAR\\r\\nVERSION:2.0\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        for (LocalDate date : source.getDays().keySet()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            for (Slot slot : source.getDays().get(date).getSlots()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"BEGIN:VEVENT\\r\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                LocalDateTime startDateTime \u003d date.atTime(slot.getStartTime());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"DTSTART:\" + dateFormat.format(startDateTime) + \"\\r\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                LocalDateTime endDateTime \u003d startDateTime.plusMinutes(slot.getDuration());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"DTEND:\" + dateFormat.format(endDateTime) + \"\\r\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"SUMMARY:\" + slot.getName() + \"\\r\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                if (slot.getLocation() !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    this.icsCalendar \u003d this.icsCalendar.concat(\"LOCATION:\" + slot.getLocation() + \"\\r\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"DESCRIPTION:\" + slot.getDescription() + \"\\r\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"X-TAGS:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                for (String tag : tagSet) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                    this.icsCalendar \u003d this.icsCalendar.concat(tag + \",\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"\\r\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                this.icsCalendar \u003d this.icsCalendar.concat(\"END:VEVENT\\r\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        this.icsCalendar \u003d this.icsCalendar.concat(\"END:VCALENDAR\\r\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return icsCalendar;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 5,
      "macchazuki": 48
    }
  },
  {
    "path": "src/planmysem/model/semester/ReadOnlyDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents a Day in the planner."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface ReadOnlyDay {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    DayOfWeek getDayOfWeek();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getDay();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    ArrayList\u003cSlot\u003e getSlots();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyDay other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getDayOfWeek().equals(this.getDayOfWeek()) // state checks here onwards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getDay().equals(this.getDay())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getType().equals(this.getType())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getSlots().equals(this.getSlots()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 33
    }
  },
  {
    "path": "src/planmysem/model/semester/ReadOnlySemester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents a Semester in the planner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface ReadOnlySemester {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getAcademicYear();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    HashMap\u003cLocalDate, Day\u003e getDays();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void setDays(HashMap\u003cLocalDate, Day\u003e days);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    LocalDate getStartDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    LocalDate getEndDate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    int getNoOfWeeks();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    HashMap\u003cInteger, String\u003e getAcadCal();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    // These variables aid in making searches more effective"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Set\u003cLocalDate\u003e getRecessDays();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Set\u003cLocalDate\u003e getReadingDays();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Set\u003cLocalDate\u003e getNormalDays();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Set\u003cLocalDate\u003e getExamDays();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 25,
      "dingheng4448": 1
    }
  },
  {
    "path": "src/planmysem/model/semester/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": " * Wraps all data of an academic semester."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class Semester implements ReadOnlySemester {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private static HashMap\u003cInteger, String\u003e acadCal \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    // These variables hold the necessary details of a semester."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final String academicYear;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final HashMap\u003cLocalDate, Day\u003e days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final int noOfWeeks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    // These variables aid in making searches more effective."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cLocalDate\u003e recessDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cLocalDate\u003e readingDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cLocalDate\u003e normalDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cLocalDate\u003e examDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Constructs a Semester from given details of a semester."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public Semester(String name, String academicYear, HashMap\u003cLocalDate, Day\u003e days, LocalDate startDate,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    LocalDate endDate, int noOfWeeks, Set\u003cLocalDate\u003e recessDays, Set\u003cLocalDate\u003e readingDays,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    Set\u003cLocalDate\u003e normalDays, Set\u003cLocalDate\u003e examDays) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.days.putAll(days);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.noOfWeeks \u003d noOfWeeks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.recessDays.addAll(recessDays);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.readingDays.addAll(readingDays);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.normalDays.addAll(normalDays);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.examDays.addAll(examDays);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Constructs a shallow copy of a given Semester or generate a new Semester."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Semester(Semester source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Generate a new semester if the current date does not exist in the source semseter."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate startDateFromFile \u003d source.startDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate endDateFromFile \u003d source.endDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now(Clock.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Semester semester;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (currentDate.isBefore(startDateFromFile) || currentDate.isAfter(endDateFromFile)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semester \u003d generateSemester(currentDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semester \u003d source;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.name \u003d semester.getName();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.academicYear \u003d semester.getAcademicYear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.days.putAll(semester.days);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.startDate \u003d semester.startDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.endDate \u003d semester.endDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.noOfWeeks \u003d semester.noOfWeeks;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.recessDays.addAll(semester.recessDays);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.readingDays.addAll(semester.readingDays);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.normalDays.addAll(semester.normalDays);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        this.examDays.addAll(semester.examDays);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Generates current Semester based on current date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * As long as the current date falls within a semester, the generated semester is always the same."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @param currentDate the current date when the program is run"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @return the current Semester object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public static Semester generateSemester(LocalDate currentDate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String acadSem;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String acadYear;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cLocalDate, Day\u003e days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int noOfWeeks;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Set\u003cLocalDate\u003e recessDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Set\u003cLocalDate\u003e readingDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Set\u003cLocalDate\u003e normalDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Set\u003cLocalDate\u003e examDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cInteger, String\u003e acadCalMap;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        acadCalMap \u003d generateAcademicCalMap(currentDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCal \u003d acadCalMap;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String[] semesterDetails;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        semesterDetails \u003d getSemesterDetails(currentDate, acadCalMap);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadSem \u003d semesterDetails[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadYear \u003d semesterDetails[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        noOfWeeks \u003d Integer.parseInt(semesterDetails[2]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        startDate \u003d LocalDate.parse(semesterDetails[3]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        endDate \u003d LocalDate.parse(semesterDetails[4]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Initialise HashMap and Sets of all days in current semester"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        List\u003cLocalDate\u003e datesList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        datesList \u003d startDate.datesUntil(endDate.plusDays(1)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (LocalDate date: datesList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            int weekOfYear \u003d date.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            String weekType \u003d acadCalMap.get(weekOfYear).split(\"_\")[0];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            days.put(date, new Day(date.getDayOfWeek(), weekType));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            switch (weekType) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            case \"Recess Week\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                recessDays.add(date);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            case \"Reading Week\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                readingDays.add(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            case \"Examination Week\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                examDays.add(date);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                normalDays.add(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return new Semester(acadSem, acadYear, days, startDate, endDate, noOfWeeks,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                recessDays, readingDays, normalDays, examDays);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Generates academic calendar for a given date."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @param date used to determine academic year"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @return details of academic calendar"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static HashMap\u003cInteger, String\u003e generateAcademicCalMap(LocalDate date) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        HashMap\u003cInteger, String\u003e acadCalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Determine dates of semester 1 and 2 based on the given month."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        final int august \u003d Month.AUGUST.getValue();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int givenMonth \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int givenYear \u003d date.getYear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate semOneStartDate \u003d date;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate semTwoEndDate \u003d date;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int semOneStartWeek;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int semTwoEndWeek;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (givenMonth \u003c august) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semOneStartDate \u003d semOneStartDate.withYear(givenYear - 1).withMonth(august)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semOneStartWeek \u003d semOneStartDate.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semTwoEndDate \u003d semTwoEndDate.withYear(givenYear).withMonth(august)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)).minusDays(1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semTwoEndWeek \u003d semTwoEndDate.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semOneStartDate \u003d semOneStartDate.withYear(givenYear).withMonth(august)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semOneStartWeek \u003d semOneStartDate.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semTwoEndDate \u003d semTwoEndDate.withYear(givenYear + 1).withMonth(august)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)).minusDays(1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            semTwoEndWeek \u003d semTwoEndDate.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // The following code assigns each week of the year to the appropriate academic week for the academic year."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 1 - Orientation Week"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semOneStartWeek, \"Orientation Week_Sem 1\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 1 - Week 1 to 6"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int acadWeekNo \u003d 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d semOneStartWeek + 1; i \u003c semOneStartWeek + 7; i++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadCalMap.put(i, \"Week \" + acadWeekNo + \"_Sem 1\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadWeekNo++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 1 - Recess Week"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semOneStartWeek + 7, \"Recess Week_Sem 1\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 1 - Week 7 to 13"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadWeekNo \u003d 7;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d semOneStartWeek + 8; i \u003c semOneStartWeek + 15; i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadCalMap.put(i, \"Week \" + acadWeekNo + \"_Sem 1\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadWeekNo++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 1 - Reading \u0026 Examination Weeks"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semOneStartWeek + 15, \"Reading Week_Sem 1\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semOneStartWeek + 16, \"Examination Week_Sem 1\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semOneStartWeek + 17, \"Examination Week_Sem 1\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 1 - Vacation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int noOfWeeksInYear \u003d (int) semOneStartDate.range(WeekFields.ISO.weekOfWeekBasedYear()).getMaximum();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int vacationWeekNo \u003d semOneStartWeek + 18;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int semTwoStartWeek;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        semTwoStartWeek \u003d 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if ((vacationWeekNo + i) \u003c\u003d noOfWeeksInYear) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                acadCalMap.put(vacationWeekNo + i, \"Vacation_Sem 1\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                acadCalMap.put(semTwoStartWeek++, \"Vacation_Sem 1\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 2 - Week 1 to 6"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadWeekNo \u003d 1;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d semTwoStartWeek; i \u003c semTwoStartWeek + 6; i++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadCalMap.put(i, \"Week \" + acadWeekNo + \"_Sem 2\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadWeekNo++;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 2 - Recess Week"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semTwoStartWeek + 6, \"Recess Week_Sem 2\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 2 - Week 7 to 13"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadWeekNo \u003d 7;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (int i \u003d semTwoStartWeek + 7; i \u003c semTwoStartWeek + 14; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadCalMap.put(i, \"Week \" + acadWeekNo + \"_Sem 2\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadWeekNo++;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 2 - Reading \u0026 Examination Weeks"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semTwoStartWeek + 14, \"Reading Week_Sem 2\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semTwoStartWeek + 15, \"Examination Week_Sem 2\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadCalMap.put(semTwoStartWeek + 16, \"Examination Week_Sem 2\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Sem 2 - Vacation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        vacationWeekNo \u003d semTwoStartWeek + 17;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        while (vacationWeekNo \u003c\u003d semTwoEndWeek) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadCalMap.put(vacationWeekNo++, \"Vacation_Sem 2\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return acadCalMap;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Initialises and returns details of an academic semester from a given date and academic calendar."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @param date used to determine academic year"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @param acadCalMap used to determine academic week"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * @return an array of Strings of an academic semester\u0027s details"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private static String[] getSemesterDetails(LocalDate date, HashMap\u003cInteger, String\u003e acadCalMap) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String acadSem;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String acadYear \u003d null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate startDate \u003d date;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        LocalDate endDate \u003d date;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String noOfWeeks \u003d null;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Get week numbers for semester 1 and 2 from the academic calendar map."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int firstWeekSemOne \u003d 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int firstWeekSemOneHol \u003d 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int lastWeekSemOneHol \u003d 0;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int firstWeekSemTwo \u003d 0;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int firstWeekSemTwoHol \u003d 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (Map.Entry\u003cInteger, String\u003e entry: acadCalMap.entrySet()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (\"Orientation Week_Sem 1\".equals(entry.getValue())) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                firstWeekSemOne \u003d entry.getKey();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else if (\"Examination Week_Sem 1\".equals(entry.getValue())) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                firstWeekSemOneHol \u003d entry.getKey() + 1;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else if (\"Week 1_Sem 2\".equals(entry.getValue())) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                lastWeekSemOneHol \u003d entry.getKey() - 1;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                firstWeekSemTwo \u003d entry.getKey();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else if (\"Examination Week_Sem 2\".equals(entry.getValue())) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                firstWeekSemTwoHol \u003d entry.getKey() + 1;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Get semester details from given date, academic calendar map and the week numbers retrieved above."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int givenYear \u003d date.getYear();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        int givenWeekOfYear \u003d date.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String[] acadWeekDetails \u003d acadCalMap.get(givenWeekOfYear).split(\"_\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        String acadWeek \u003d acadWeekDetails[0];"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        acadSem \u003d acadWeekDetails[1];"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        if (\"Vacation\".equals(acadWeek) \u0026\u0026 \"Sem 1\".equals(acadSem)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            noOfWeeks \u003d \"5\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            if (givenWeekOfYear \u003c 4) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                acadYear \u003d \"AY\" + (givenYear - 1) + \"/\" + givenYear;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                startDate \u003d startDate.withYear(givenYear - 1);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                acadYear \u003d \"AY\" + givenYear + \"/\" + (givenYear + 1);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                endDate \u003d endDate.withYear(givenYear + 1);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemOneHol);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.weekOfWeekBasedYear(), lastWeekSemOneHol);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.dayOfWeek(), 7);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else if (\"Vacation\".equals(acadWeek) \u0026\u0026 \"Sem 2\".equals(acadSem)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            noOfWeeks \u003d \"12\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadYear \u003d \"AY\" + (givenYear - 1) + \"/\" + givenYear;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemTwoHol);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemTwoHol + 11);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.dayOfWeek(), 7);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else if (\"Sem 1\".equals(acadSem)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            noOfWeeks \u003d \"18\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadYear \u003d \"AY\" + givenYear + \"/\" + (givenYear + 1);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemOne);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemOne + 17);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.dayOfWeek(), 7);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        } else if (\"Sem 2\".equals(acadSem)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            noOfWeeks \u003d \"17\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            acadYear \u003d \"AY\" + (givenYear - 1) + \"/\" + givenYear;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemTwo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            startDate \u003d startDate.with(WeekFields.ISO.dayOfWeek(), 1);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.weekOfWeekBasedYear(), firstWeekSemTwo + 16);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            endDate \u003d endDate.with(WeekFields.ISO.dayOfWeek(), 7);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return new String[] {acadSem, acadYear, noOfWeeks, startDate.toString(), endDate.toString()};"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Adds a Slot to the Semester."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws DateNotFoundException if a date is not found in the semester."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day addSlot(LocalDate date, Slot slot) throws DateNotFoundException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (date \u003d\u003d null || (date.isBefore(startDate) || date.isAfter(endDate))) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new DateNotFoundException();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        days.get(date).addSlot(slot);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return days.get(date);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Edits a Slot in the Semester."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void editSlot(LocalDate targetDate, ReadOnlySlot targetSlot, LocalDate date, LocalTime startTime,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                         int duration, String name, String location, String description, Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot editingSlot \u003d days.get(targetDate).getSlots().stream()"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            .filter(s -\u003e s.equals(targetSlot)).findAny().orElse(null);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Slot savedSlot \u003d new Slot(editingSlot);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            days.get(date).addSlot(savedSlot);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            days.get(targetDate).removeSlot(editingSlot);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            editingSlot \u003d savedSlot;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            editingSlot.setStartTime(startTime);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (duration !\u003d -1) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            editingSlot.setDuration(duration);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        editingSlot.setName(name);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        editingSlot.setLocation(location);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        editingSlot.setDescription(description);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags.size() \u003e 0) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            editingSlot.setTags(tags);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Get set of slots which contain all specified tags."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public Map\u003cLocalDateTime, ReadOnlySlot\u003e getSlots(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Map\u003cLocalDateTime, ReadOnlySlot\u003e selectedSlots \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e day : days.entrySet()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            for (Slot slot : day.getValue().getSlots()) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                if (slot.getTags().containsAll(tags)) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                    selectedSlots.put(LocalDateTime.of(day.getKey(), slot.getStartTime()), slot);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return selectedSlots;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     * Removes a Slot to the Semester."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void removeSlot(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        days.get(date).removeSlot(slot);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Clears all Days from the address book."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void clearSlots() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e day : days.entrySet()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            day.getValue().clear();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Checks if the list contains an equivalent slot as the given argument."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean contains(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return days.get(date).contains(slot);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Checks if the list contains an equivalent Day as the given argument."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean contains(ReadOnlyDay day) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return days.containsValue(day);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Checks if the list contains an equivalent date as the given argument."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean contains(LocalDate date) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return days.containsKey(date);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getAcadCal() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return acadCal;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getAcademicYear() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return academicYear;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setDays(HashMap\u003cLocalDate, Day\u003e days) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.days.clear();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : days.entrySet()) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.days.put(entry.getKey(), new Day(entry.getValue()));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public HashMap\u003cLocalDate, Day\u003e getDays() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int getNoOfWeeks() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return noOfWeeks;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Set\u003cLocalDate\u003e getRecessDays() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return recessDays;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Set\u003cLocalDate\u003e getReadingDays() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return readingDays;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Set\u003cLocalDate\u003e getNormalDays() {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return normalDays;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Set\u003cLocalDate\u003e getExamDays() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return examDays;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof Semester // instanceof handles nulls"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.name.equals(((Semester) other).name)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.academicYear.equals(((Semester) other).academicYear)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.days.equals(((Semester) other).days)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.startDate.equals(((Semester) other).startDate)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.endDate.equals(((Semester) other).endDate)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.noOfWeeks \u003d\u003d (((Semester) other).noOfWeeks)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.recessDays.equals(((Semester) other).recessDays)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.readingDays.equals(((Semester) other).readingDays)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.normalDays.equals(((Semester) other).normalDays)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.examDays.equals(((Semester) other).examDays));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(name, academicYear, days, startDate, endDate, noOfWeeks,"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                recessDays, readingDays, normalDays, examDays);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Signals that an operation targeting a specified Day in the list would fail because"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * there is no such matching Day in the list."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static class DateNotFoundException extends Exception {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 212,
      "dingheng4448": 308
    }
  },
  {
    "path": "src/planmysem/model/semester/WeightedName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.model.semester;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " * WeightedName of integer and string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class WeightedName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private int dist;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Map.Entry\u003cLocalDate, Day\u003e map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Slot slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public WeightedName(Map.Entry\u003cLocalDate, Day\u003e map, Slot slot, LocalDate date, int dist) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.map \u003d map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.dist \u003d dist;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.name \u003d slot.getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public int getDist() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return this.dist;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public Map.Entry\u003cLocalDate, Day\u003e getMap() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public Slot getSlot() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return this.slot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 47
    }
  },
  {
    "path": "src/planmysem/model/slot/ReadOnlySlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * A read-only immutable interface for a Slot in the Planner."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface ReadOnlySlot {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getLocation();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    int getDuration();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    LocalTime getStartTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * changes on the returned list will not affect the slot\u0027s internal tags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Set\u003cString\u003e getTags();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if the values inside this object is same as"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    default boolean isSameStateAs(ReadOnlySlot other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(other.getLocation(), this.getLocation())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 Objects.equals(other.getDescription(), this.getDescription())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getStartTime().equals(this.getStartTime())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getDuration() \u003d\u003d this.getDuration()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 other.getTags().equals(this.getTags()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Formats the slot as text, showing all slot details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"Slot Details:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\nName: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\nLocation: \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(getLocation());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\nDescription: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(getDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\nTime: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(getStartTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\" to \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(Utils.getEndTime(getStartTime(), getDuration()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\nDuration: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(getDuration());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        sb.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String tag : getTags()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\"\\t\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(count);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(\".\\t\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(tag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 78,
      "macchazuki": 2
    }
  },
  {
    "path": "src/planmysem/model/slot/Slot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Represents a slot in the planner."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class Slot implements ReadOnlySlot {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot(String name, String location, String description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime startTime, LocalTime endTime, Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.duration \u003d Utils.getDuration(startTime, endTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot(String name, String location, String description,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime startTime, int duration, Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot(ReadOnlySlot source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this(source.getName(), source.getLocation(), source.getDescription(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                source.getStartTime(), source.getDuration(), source.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Set name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setName(String value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        name \u003d value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Set location."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setLocation(String value) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        location \u003d value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Set description."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setDescription(String value) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        description \u003d value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Set start time."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setStartTime(LocalTime value) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        startTime \u003d value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Replaces this slot\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setTags(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.tags.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Set duration."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setDuration(int value) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        duration \u003d value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (other instanceof ReadOnlySlot // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlySlot) other));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Objects.hash(name, location, description, startTime, duration, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 165,
      "macchazuki": 1
    }
  },
  {
    "path": "src/planmysem/storage/Encryptor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.crypto.Cipher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.crypto.SecretKey;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.crypto.spec.IvParameterSpec;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.crypto.spec.SecretKeySpec;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.xml.bind.DatatypeConverter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Contains methods to encrypt and decrypt strings"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class Encryptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private static int ivSize \u003d 16;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static String encrypt(String toEncrypt, String keyStorage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return executeEncrypt(toEncrypt, keyStorage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static String encrypt(String toEncrypt) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return executeEncrypt(toEncrypt, \"KeyStorage.jceks\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Encrypts string using the AES algorithm"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param toEncrypt string to be encrypted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param keyStorage string .jceks file to load from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @return encrypted string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private static String executeEncrypt(String toEncrypt, String keyStorage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            //Load key from KeyStore."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            SecretKey key \u003d KeyStorage.load(keyStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            SecretKeySpec skeySpec \u003d new SecretKeySpec(key.getEncoded(), \"AES\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            // Generating IV."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] iv \u003d new byte[ivSize];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            SecureRandom random \u003d new SecureRandom();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            random.nextBytes(iv);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            IvParameterSpec ivParameterSpec \u003d new IvParameterSpec(iv);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            Cipher cipher \u003d Cipher.getInstance(\"AES/CBC/PKCS5Padding\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivParameterSpec);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] encrypted \u003d cipher.doFinal(toEncrypt.getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            // Combine IV and encrypted part."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] encryptedIvAndText \u003d new byte[ivSize + encrypted.length];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            System.arraycopy(iv, 0, encryptedIvAndText, 0, ivSize);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            System.arraycopy(encrypted, 0, encryptedIvAndText, ivSize, encrypted.length);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return DatatypeConverter.printBase64Binary(encryptedIvAndText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static String decrypt(String toDecrypt, String keyStorage) throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return executeDecrypt(toDecrypt, keyStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static String decrypt(String toDecrypt) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return executeDecrypt(toDecrypt, \"KeyStorage.jceks\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Decrypts a string using the AES algorithm"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param toDecrypt string to be decrypted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param keyStorage string .jceks file to load from."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @return decrypted string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private static String executeDecrypt(String toDecrypt, String keyStorage) throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            //Load key from KeyStore."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            SecretKey key \u003d KeyStorage.load(keyStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            SecretKeySpec skeySpec \u003d new SecretKeySpec(key.getEncoded(), \"AES\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            //Decode to bytes."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] decodedData \u003d DatatypeConverter.parseBase64Binary(toDecrypt);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            // Extract IV."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] iv \u003d new byte[ivSize];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            System.arraycopy(decodedData, 0, iv, 0, iv.length);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            IvParameterSpec ivParameterSpec \u003d new IvParameterSpec(iv);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            // Extract encrypted part."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            int encryptedSize \u003d decodedData.length - ivSize;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] encryptedBytes \u003d new byte[encryptedSize];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            System.arraycopy(decodedData, ivSize, encryptedBytes, 0, encryptedSize);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            Cipher cipher \u003d Cipher.getInstance(\"AES/CBC/PKCS5Padding\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            cipher.init(Cipher.DECRYPT_MODE, skeySpec, ivParameterSpec);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            byte[] decryptedData \u003d cipher.doFinal(encryptedBytes);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            return new String(decryptedData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            throw new IllegalValueException(\"Error decrypting file. Reinitializing semester.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 106
    }
  },
  {
    "path": "src/planmysem/storage/KeyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.security.KeyStore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.security.UnrecoverableKeyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.security.cert.CertificateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.crypto.KeyGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import javax.crypto.SecretKey;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " * Manages storage and loading of secret key."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class KeyStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    //creates unique key"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private static char[] password \u003d String.valueOf((System.getProperty(\"os.name\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"java.runtime.version\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"user.name\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"os.arch\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"java.jm.version\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"java.vm.name\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"java.home\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    + System.getProperty(\"java.compiler\")).hashCode()).toCharArray();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Loads the secret key from the specified key store."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param fileName String .jceks file to load from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public static SecretKey load (String fileName) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //Initialize keystore."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        KeyStore ks \u003d KeyStore.getInstance(\"JCEKS\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        SecretKey secretKey;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            ks.load(new FileInputStream(fileName), password);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            secretKey \u003d (SecretKey) ks.getKey(\"secret-key\", password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } catch (IOException | CertificateException | UnrecoverableKeyException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            secretKey \u003d generateSecretKey(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return secretKey;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * Generates a SecretKey and saves it in the specified file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     * @param fileName String .jceks file to save to."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private static SecretKey generateSecretKey(String fileName) throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //Initialize keystore."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        KeyStore ks \u003d KeyStore.getInstance(\"JCEKS\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //Generates key."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        KeyGenerator keyGen \u003d KeyGenerator.getInstance(\"AES\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        keyGen.init(256);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        SecretKey secretKey \u003d keyGen.generateKey();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //Save key."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        KeyStore.SecretKeyEntry secret \u003d new KeyStore.SecretKeyEntry(secretKey);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        KeyStore.ProtectionParameter passwordParam \u003d new KeyStore.PasswordProtection(password);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        ks.load(null, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        ks.setEntry(\"secret-key\", secret, passwordParam);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(fileName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        ks.store(fos, password);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        return secretKey;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "macchazuki": 74
    }
  },
  {
    "path": "src/planmysem/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Saves all model to this storage file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws StorageFile.StorageOperationException if there were errors converting and/or storing model to file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void save(Planner planner) throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Loads model from this storage file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws StorageFile.StorageOperationException if there were errors reading and/or converting model from file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    Planner load() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Gets path of file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    String getPath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write model between the application"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 48
    }
  },
  {
    "path": "src/planmysem/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.storage.jaxb.AdaptedPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Represents the file used to store Planner model."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class StorageFile implements Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Default file path used if the user doesn\u0027t provide the file name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"PlanMySem.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private final boolean isEncrypted \u003d true; //set to true to encrypt model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public StorageFile() throws JAXBException, InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public StorageFile(String filePath) throws JAXBException, InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedPlanner.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (JAXBException ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new JAXBException(ex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void save(Planner planner) throws StorageOperationException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Writer fileWriter \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            final AdaptedPlanner toSave \u003d new AdaptedPlanner(planner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            if (isEncrypted) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                marshaller.marshal(toSave, sw);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                fileWriter.write(Encryptor.encrypt(sw.toString()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new StorageOperationException(\"Error converting Planner into storage format\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Planner load() throws StorageOperationException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        try (final BufferedReader fileReader \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            final AdaptedPlanner loaded;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            //decrypts"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            if (isEncrypted) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                StringReader decryptedData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                decryptedData \u003d new StringReader(Encryptor.decrypt(fileReader.readLine()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                loaded \u003d (AdaptedPlanner) unmarshaller.unmarshal(decryptedData);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                loaded \u003d (AdaptedPlanner) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new StorageOperationException(\"File model missing some elements\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing or empty. However, we should"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "             * minimize using exceptions to facilitate normal paths of execution. If we consider the missing file as a"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "             * \u0027normal\u0027 situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "            // create empty planner if not found or is empty."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        } catch (FileNotFoundException | NullPointerException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            final Planner empty \u003d new Planner();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file model format\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 42,
      "-": 79,
      "macchazuki": 23
    }
  },
  {
    "path": "src/planmysem/storage/jaxb/AdaptedDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * JAXB-friendly adapted Day model holder class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AdaptedDay {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String weekType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private ArrayList\u003cAdaptedSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedDay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts a given Day into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedDay"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedDay(ReadOnlyDay source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        dayOfWeek \u003d source.getDayOfWeek();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        weekType \u003d source.getType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Slot slot : source.getSlots()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            slots.add(new AdaptedSlot(slot));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Since we do most of our validation using the model class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (AdaptedSlot slot : slots) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (slot.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // return Utils.isAnyNull(dayOfWeek, slots);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts this jaxb-friendly adapted Day object into the Day object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws IllegalValueException if there were any model constraints violated in the IcsSemester"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (AdaptedSlot slot : this.slots) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            slots.add(slot.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Day(this.dayOfWeek, this.weekType, slots);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 77
    }
  },
  {
    "path": "src/planmysem/storage/jaxb/AdaptedPlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * JAXB-friendly adapted Planner model holder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "@XmlRootElement(name \u003d \"Planner\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AdaptedPlanner {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private AdaptedSemester semester \u003d new AdaptedSemester();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedPlanner() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts a given Planner into this class for JAXB use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPlanner"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedPlanner(Planner source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester \u003d new AdaptedSemester(source.getSemester());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Since we do most of our validation using the model class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return semester.isAnyRequiredFieldMissing();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedPlanner} object into the corresponding(@code Planner} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws IllegalValueException if there were any model constraints violated in the IcsSemester"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Planner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Planner(semester.toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 53
    }
  },
  {
    "path": "src/planmysem/storage/jaxb/AdaptedSemester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlySemester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * JAXB-friendly adapted person model holder class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AdaptedSemester {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String academicYear;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private int noOfWeeks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private HashMap\u003cString, AdaptedDay\u003e days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Set\u003cString\u003e recessDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Set\u003cString\u003e readingDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Set\u003cString\u003e normalDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Set\u003cString\u003e examDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedSemester() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedSemester(ReadOnlySemester source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        academicYear \u003d source.getAcademicYear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        noOfWeeks \u003d source.getNoOfWeeks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e day : source.getDays().entrySet()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            days.put(day.getKey().toString(), new AdaptedDay(day.getValue()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate date : source.getRecessDays()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            recessDays.add(date.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate date : source.getReadingDays()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            readingDays.add(date.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate date : source.getNormalDays()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            normalDays.add(date.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (LocalDate date : source.getExamDays()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            examDays.add(date.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Since we do most of our validation using the model class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cString, AdaptedDay\u003e day : days.entrySet()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (day.getValue().isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // TODO: removed for testing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // return Utils.isAnyNull(name, academicYear, days, startDate, endDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws IllegalValueException if there were any model constraints violated in the IcsSemester"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Semester toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final String name \u003d this.name;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final String academicYear \u003d this.academicYear;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final String startDate \u003d this.startDate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final String endDate \u003d this.endDate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (startDate \u003d\u003d null || endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new IllegalValueException(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final int noOfWeeks \u003d this.noOfWeeks;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final HashMap\u003cLocalDate, Day\u003e days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (Map.Entry\u003cString, AdaptedDay\u003e day : this.days.entrySet()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            days.put(LocalDate.parse(day.getKey()), day.getValue().toModelType());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e recessDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String date : this.recessDays) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            recessDays.add(LocalDate.parse(date));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e readingDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String date : this.readingDays) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            readingDays.add(LocalDate.parse(date));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e normalDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String date : this.normalDays) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            normalDays.add(LocalDate.parse(date));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cLocalDate\u003e examDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String date : this.examDays) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            examDays.add(LocalDate.parse(date));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Semester(name, academicYear, days,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.parse(startDate), LocalDate.parse(endDate), noOfWeeks,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                recessDays, readingDays, normalDays, examDays);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 147
    }
  },
  {
    "path": "src/planmysem/storage/jaxb/AdaptedSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_ILLEGAL_VALUE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * JAXB-friendly adapted person model holder class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AdaptedSlot {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedSlot() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public AdaptedSlot(ReadOnlySlot source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        location \u003d source.getLocation();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        duration \u003d source.getDuration();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        tags.addAll(source.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (tag.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // second call only happens if name, duration, start time are all not null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Utils.isAnyNull(name, duration, startTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @throws IllegalValueException if there were any model constraints violated in the IcsSemester"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if ((name !\u003d null \u0026\u0026 hasIllegalValues(name)) || (location !\u003d null \u0026\u0026 hasIllegalValues(location))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                || (description !\u003d null \u0026\u0026 hasIllegalValues(description)) || duration \u003c 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ILLEGAL_VALUE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final LocalTime startTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            startTime \u003d LocalTime.parse(this.startTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ILLEGAL_VALUE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String tag : this.tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (hasIllegalValues(tag)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                throw new IllegalValueException(MESSAGE_ILLEGAL_VALUE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Slot(name, location, description, startTime, duration, tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true if value has any illegal values."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static boolean hasIllegalValues(String value) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return value.contains(\"/\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 108
    }
  },
  {
    "path": "src/planmysem/ui/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: yellow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: black;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    -fx-font-family: \"Monospace\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "macchazuki": 1
    }
  },
  {
    "path": "src/planmysem/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * A decorative prefix added to the beginning of lines printed by Planner"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * A platform independent line separator."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Formats the given strings for displaying to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Formats the given list of slots for displaying to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public String formatSlots(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e slots) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return Messages.craftListMessage(slots);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 32,
      "-": 12
    }
  },
  {
    "path": "src/planmysem/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setLogicManager(LogicManager logicManager) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.logicManager \u003d logicManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * TODO: Add Javadoc comment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void onCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            CommandResult result \u003d logicManager.execute(userCommandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isExitCommand(result)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // throw new RuntimeException(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Returns true of the result given is the result of an exit command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Clears the command input box"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Clears the output display area"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Displays the result of a command execution to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final Optional\u003cList\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e\u003e resultDays \u003d result.getRelevantSlots();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (resultDays.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            display(resultDays.get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * TODO: Add Javadoc comment."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String storageFileInfo \u003d String.format(Messages.MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display(Messages.MESSAGE_WELCOME, version, Messages.MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Displays the list of slots in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void display(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e list) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        display(new Formatter().formatSlots(list));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 49,
      "-": 69
    }
  },
  {
    "path": "src/planmysem/ui/Stoppable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * An App that can be stopped by calling the stop() method."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Stoppable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void stop() throws Exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 2,
      "-": 6
    }
  },
  {
    "path": "src/planmysem/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    void start(Stage stage, Stoppable mainApp) throws IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 15
    }
  },
  {
    "path": "src/planmysem/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.Main;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static final int INITIAL_WINDOW_WIDTH \u003d 1100;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final LogicManager logicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public UiManager(LogicManager logicManager, String version) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        this.logicManager \u003d logicManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        mainWindow \u003d createMainWindowP(stage, mainApp);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        mainWindow.displayWelcomeMessage(version, logicManager.getStorageFilePath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * TODO: Add Javadoc comment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private MainWindow createMainWindowP(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        mainWindow \u003d loader.getController();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        mainWindow.setLogicManager(logicManager);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setMainApp(mainApp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 19,
      "-": 30
    }
  },
  {
    "path": "src/planmysem/ui/mainwindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" stylesheets\u003d\"@/planmysem/ui/DarkTheme.css\" alignment\u003d\"center\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "      fx:controller\u003d\"planmysem.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandInput\" onAction\u003d\"#onCommand\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextArea fx:id\u003d\"outputConsole\" editable\u003d\"false\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 3,
      "-": 17
    }
  },
  {
    "path": "test/java/planmysem/common/UtilsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Utils.getDuration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Utils.getEndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Utils.getNearestDayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNull() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // Any non-empty list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(new Object(), new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(\"test\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with just one null at the beginning"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull((Object) null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(null, \"\", new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(null, new Object(), new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with nulls in the middle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(new Object(), null, null, \"test\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(\"\", null, new Object()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with one null as the last element"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(\"\", new Object(), null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(new Object(), new Object(), null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside the list are not considered"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        List\u003cObject\u003e nullList \u003d Collections.singletonList(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(nullList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void elementsAreUnique() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // only one object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique((Object) null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"abc\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // all objects unique"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"abc\", \"ab\", \"a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(1, 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // some identical objects"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"abc\", \"abc\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"abc\", \"\", \"abc\", \"ABC\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"\", \"abc\", \"a\", \"abc\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotUnique(1, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotUnique(null, 1, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, \"a\", \"b\", null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_day_successful() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Monday\"), 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"monday \"), 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Mon\"), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"mon\"), 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"1\"), 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Tuesday\"), 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"tuesday \"), 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Tue\"), 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"tue\"), 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"2\"), 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Wednesday\"), 3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Wed\"), 3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"wed\"), 3);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"3\"), 3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Thursday\"), 4);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\" thursday\"), 4);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Thu\"), 4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"thu\"), 4);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"4\"), 4);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Friday\"), 5);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\" friday\"), 5);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Fri\"), 5);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"fri\"), 5);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"5\"), 5);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Saturday\"), 6);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\" saturday\"), 6);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Sat\"), 6);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"sat\"), 6);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"6\"), 6);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Sunday\"), 7);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\" sunday\"), 7);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Sun\"), 7);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"sun\"), 7);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"7\"), 7);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_day_unsuccessful() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Mond\"), -1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Mo\"), -1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"Fr\"), -1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"8\"), -1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"0\"), -1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDay(\"\"), -1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_date_successful() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDate(\"01-03-2019\"), LocalDate.of(2019, 03, 01));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDate(\"01-04-2019\"), LocalDate.of(2019, 04, 01));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDate(\"01-05-2019\"), LocalDate.of(2019, 05, 01));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDate(\"01-06-2019\"), LocalDate.of(2019, 06, 01));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseDate(\"01-06\"), LocalDate.of(2019, 06, 01));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_date_unsuccessful() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseDate(\"00-06-2019\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseDate(\"01-13-2019\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseDate(\"v\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_time_successful() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"08:00\"), LocalTime.of(8, 0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"8:00 PM\"), LocalTime.of(20, 0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"14:00\"), LocalTime.of(14, 0));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"00:00\"), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"8:00\"), LocalTime.of(8, 0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"8:00 AM\"), LocalTime.of(8, 0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseTime(\"8:00 am\"), LocalTime.of(8, 0));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseTime(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_time_unsuccessful() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseTime(\"14:00 am\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseTime(\"16:00 pm\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(Utils.parseTime(\"-00:20\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_integer_successful() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"800\"), 800);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"0\"), 0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"1\"), 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"60\"), 60);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"90\"), 90);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"120\"), 120);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_integer_unsuccessful() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"120000000000000\"), -1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"12 0\"), -1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"0.1\"), -1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"test\"), -1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Utils.parseInteger(\"OO\"), -1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_getDuration_successful() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.now(Clock.get());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime endTime \u003d startTime.plusMinutes(60);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(getDuration(startTime, endTime), 60);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_getEndTime_successful() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.now(Clock.get());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime endTime \u003d startTime.plusMinutes(60);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(getEndTime(startTime, 60), endTime);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_getNearestDayOfWeek_successful() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 1, 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate nearestMonday \u003d LocalDate.of(2019, 1, 7);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(getNearestDayOfWeek(date, 1), nearestMonday);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAreUnique(Object... objects) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.elementsAreUnique(Arrays.asList(objects)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNotUnique(Object... objects) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.elementsAreUnique(Arrays.asList(objects)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 151,
      "-": 67
    }
  },
  {
    "path": "test/java/planmysem/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final String invalidCommand \u003d \"adds lesson\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 76
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.AddCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.AddCommand.craftSuccessMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void constructor_nullSlotRecursion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        new AddCommand(null, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_slotAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelStubAcceptingSlotAdded modelStub \u003d new ModelStubAcceptingSlotAdded();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot validSlot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence validRecurrence \u003d new SlotBuilder().recurrenceOne();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validSlot, validRecurrence).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cLocalDate\u003e dates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        dates.add(LocalDate.of(2019, 2, 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Map\u003cLocalDate, Day\u003e days \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.MONDAY, \"type\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        day.addSlot(validSlot);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        days.put(LocalDate.of(2019, 2, 1), day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, dates.size(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                craftSuccessMessage(days, validSlot)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(days, modelStub.days);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_invalidDate_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelStubNeverSlotAdded modelStub \u003d new ModelStubNeverSlotAdded();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot validSlot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence validRecurrence \u003d new SlotBuilder().recurrenceOne();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validSlot, validRecurrence);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_FAIL_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot1 \u003d new SlotBuilder().generateSlot(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence recurrence \u003d new SlotBuilder().recurrenceOne();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand addCommand1 \u003d new AddCommand(slot1, recurrence);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(addCommand1, addCommand1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand addCommand1Copy \u003d new AddCommand(slot1, recurrence);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(addCommand1, addCommand1Copy);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(addCommand1, 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(addCommand1, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot2 \u003d new SlotBuilder().generateSlot(2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand addCommand2 \u003d new AddCommand(slot2, recurrence);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(addCommand1, addCommand2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getLastShownList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void setLastShownList(List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e list) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void setLastShownList(Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void clearLastShownList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void commit() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e getLastShownItem(int index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public boolean slotExists(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Day addSlot(LocalDate date, Slot slot) throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void removeSlot(LocalDate date, ReadOnlySlot slot) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void removeSlot(Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e slot) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void editSlot(LocalDate targetDate, ReadOnlySlot targetSlot, LocalDate date,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                             LocalTime startTime, int duration, String name, String location,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                             String description, Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void clearSlots() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Planner getPlanner() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public HashMap\u003cLocalDate, Day\u003e getDays() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Day getDay(LocalDate date) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e getSlots(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * A Model stub that always accept the slot being added."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private class ModelStubAcceptingSlotAdded extends ModelStub {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        private Map\u003cLocalDate, Day\u003e days \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Day addSlot(LocalDate date, Slot slot) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Day day \u003d new Day(DayOfWeek.MONDAY, \"type\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            day.addSlot(slot);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            days.put(date, day);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return day;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Planner getPlanner() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new Planner();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * A Model stub that never accepts the slot being added."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private class ModelStubNeverSlotAdded extends ModelStub {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Day addSlot(LocalDate date, Slot slot) throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new Semester.DateNotFoundException();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        public Planner getPlanner() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new Planner();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 268
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_emptyPlanner_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void execute_nonEmptyPlanner_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Model model \u003d new ModelManager(new Planner());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planner());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 1, 21),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Slot("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"COM2 04-01\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 54,
      "marcus-pzj": 2,
      "macchazuki": 1
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult CommandResultClone \u003d new CommandResult(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals same object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(commandResult, commandResult);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(commandResult.hashCode(), commandResult.hashCode());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(commandResult, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals different object same values"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(commandResult, CommandResultClone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(commandResult.hashCode(), CommandResultClone.hashCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 26
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(actualModel, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(actualCommandHistory, expectedCommandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - the planner, last shown list in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner expectedPlanner \u003d new Planner(actualModel.getPlanner());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        actualModel.getDays();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e expectedLastShownList \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new ArrayList\u003c\u003e(actualModel.getLastShownList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedPlanner, actualModel.getPlanner());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedLastShownList, actualModel.getLastShownList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 79
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.DeleteCommand.MESSAGE_SLOT_NOT_IN_PLANNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.DeleteCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.DeleteCommand.MESSAGE_SUCCESS_NO_CHANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair1 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 01),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair2 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 02),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.SATURDAY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair3 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 03),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.SUNDAY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair4 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 04),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(pair1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(pair2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(pair3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(pair4);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.setLastShownList(list);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.setLastShownList(model.getLastShownList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void constructor_nullSlotRecursion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        new DeleteCommand(null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_validTag_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(pair4);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(pair3);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d pair4.getValue().getValue().getTags();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                2, Messages.craftSelectedMessage(tags),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Messages.craftSelectedMessage(\"Deleted Slots:\", selectedSlots));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.removeSlot(pair3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.removeSlot(pair4);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e slot \u003d model.getLastShownItem(1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(slot);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1, Messages.craftSelectedMessage(1),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Messages.craftSelectedMessage(\"Deleted Slot:\", selectedSlots));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.removeSlot(slot);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_invalidTag_throwsCommandException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d pair4.getValue().getValue().getTags();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_NO_CHANGE,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Messages.craftSelectedMessage(tags));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // removed slots with the valid tags, so the exception will occur"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.removeSlot(pair3);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.removeSlot(pair4);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_invalidSlot_throwsCommandException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SLOT_NOT_IN_PLANNER;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // removed slots with of index 1 in lastShownSlot, so the exception will occur"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.removeSlot(pair1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(5);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_SLOT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 212
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.EditCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.EditCommand.MESSAGE_SUCCESS_NO_CHANGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair1 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 01),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair2 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 02),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.SATURDAY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair3 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 03),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.SUNDAY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        pair4 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 02, 04),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(new Pair\u003c\u003e(pair1.getKey(), pair1.getValue()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(new Pair\u003c\u003e(pair2.getKey(), pair2.getValue()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(new Pair\u003c\u003e(pair3.getKey(), pair3.getValue()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        list.add(new Pair\u003c\u003e(pair4.getKey(), pair4.getValue()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model.setLastShownList(list);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.setLastShownList(model.getLastShownList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_validTag_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(new Pair\u003c\u003e(pair4.getKey(), pair4.getValue()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(new Pair\u003c\u003e(pair3.getKey(), pair3.getValue()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e selectTags \u003d pair3.getValue().getValue().getTags();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // values to edit"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d \"new name\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d \"new location\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d \"new description\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d 60;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                selectTags,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSelected \u003d Messages.craftSelectedMessage(selectTags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSlots \u003d editCommand.craftSuccessMessage(selectedSlots);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSelected, messageSlots);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.editSlot("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair3.getKey(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair3.getValue().getValue(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.editSlot("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair4.getKey(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair4.getValue().getValue(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_invalidTag_throwsCommandException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e selectTags \u003d new HashSet\u003c\u003e(Collections.singletonList(\"tag does not exist\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // values to edit"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d \"new name\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d \"new location\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d \"new description\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d 60;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                selectTags,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_NO_CHANGE,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Messages.craftSelectedMessage(selectTags));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // values to edit"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d \"new name\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d \"new location\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d \"new description\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 2, 2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d 60;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                5,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                date,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e slot \u003d model.getLastShownItem(1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(slot);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // values to edit"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d \"new name\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d \"new location\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d \"new description\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 2, 2);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d 60;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                date,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSelected \u003d Messages.craftSelectedMessage(1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSlots \u003d editCommand.craftSuccessMessage(selectedSlots);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSelected, messageSlots);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.editSlot("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair1.getKey(),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair1.getValue().getValue(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                date,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_validIndexEmptyValues_success() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e slot \u003d model.getLastShownItem(1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        selectedSlots.add(new Pair\u003c\u003e(slot.getKey(), slot.getValue()));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // values to edit"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d \"\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 2, 2);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        int duration \u003d 60;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                date,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSelected \u003d Messages.craftSelectedMessage(1);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String messageSlots \u003d editCommand.craftSuccessMessage(selectedSlots);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                messageSelected, messageSlots);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.editSlot("
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair1.getKey(),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                pair1.getValue().getValue(),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                date,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                duration,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                tags"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModel.commit();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editFirstCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"name\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 2, 2),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                60,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"location\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"description\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"))"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(editFirstCommand, editFirstCommand);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand editFirstCommandCopy \u003d new EditCommand("
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"name\","
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 2, 2),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                60,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"location\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"description\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"))"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(editFirstCommand, editFirstCommandCopy);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(editFirstCommand, 1);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(editFirstCommand, null);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand deleteSecondCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                2,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"name\","
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 2, 2),"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                60,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"location\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"description\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e(Collections.singletonList(\"tag1\"))"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(editFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 371
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 23
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public TemporaryFolder tempFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private String tempFolderPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        tempFolderPath \u003d tempFolder.getRoot().getPath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void execute_export_success() throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertCommandSuccess(new ExportCommand(tempFolderPath + \"\\\\ExportTest\"), model,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                commandHistory, ExportCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String expectedIcs \u003d \"BEGIN:VCALENDAR\\r\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"VERSION:2.0\\r\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190204T000000\\r\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190204T000000\\r\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 3\\r\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 3\\r\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 3\\r\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag3,\\r\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190203T000000\\r\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190203T000000\\r\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 3\\r\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 3\\r\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 3\\r\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag3,\\r\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190202T000000\\r\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190202T000000\\r\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 2\\r\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 2\\r\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 2\\r\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag2,tag3,\\r\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190201T000000\\r\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190201T000000\\r\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 1\\r\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 1\\r\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 1\\r\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag1,tag2,\\r\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VCALENDAR\\r\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String actualIcs \u003d new String(Files.readAllBytes(Paths.get(tempFolderPath + \"\\\\ExportTest.ics\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Assert.assertEquals(actualIcs, expectedIcs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void execute_export_fail() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertCommandFailure(new ExportCommand(\"\\\\/:*?\\\"\u003c\u003e|\"), model, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                ExportCommand.MESSAGE_FAILED);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 109
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_MULTIPLE_PARAMS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.commands.ListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.commands.ListCommand.MESSAGE_SUCCESS_NONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Utils;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.WeightedName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair3;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair4;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair6;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private static final String LONG_STRING \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair1 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 01),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(1)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair2 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 02),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SATURDAY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(2)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair3 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 03),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SUNDAY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair4 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 04),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair5 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 05),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.slotOne()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair6 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 05),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.slotTwo()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 05), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 05), slotBuilder.slotTwo());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair6.getKey(), pair6.getValue());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair5.getKey(), pair5.getValue());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair4.getKey(), pair4.getValue());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair3.getKey(), pair3.getValue());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair2.getKey(), pair2.getValue());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair1.getKey(), pair1.getValue());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.setLastShownList(list);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 05), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 05), slotBuilder.slotTwo());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.setLastShownList(model.getLastShownList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     *  Parser Tests"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Valid_FindCommand_ParserManager() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Command actualFindCommand \u003d parserManager.parseCommand(\"find n/CS2113T\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult expectedFindCommandOutput \u003d new FindCommandParser().parse(\"n/CS2113T\").execute(model, EMPTY_COMMAND_HISTORY );"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedFindCommandOutput, actualFindCommand.execute(model, EMPTY_COMMAND_HISTORY));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Invalid_IncorrectPrefix_throwsParserException() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommandParser findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        findCommandParser.parse(\"st/08:00\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Invalid_MultipleParams_throwsParserException() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommandParser findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_MULTIPLE_PARAMS, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        findCommandParser.parse(\"n/CS2101 t/Tutorial\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_ValidPrefixNameOnly_SameKeyword() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommandParser findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(\"CS2113\", null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand actualFindCommand \u003d findCommandParser.parse(\"n/CS2113\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(actualFindCommand.getKeyword(), expectedFindCommand.getKeyword());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_ValidPrefixTagOnly_SameKeyword() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommandParser findCommandParser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(null, \"Tutorial\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand actualFindCommand \u003d findCommandParser.parse(\"t/Tutorial\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(actualFindCommand.getKeyword(), expectedFindCommand.getKeyword());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Constructor Tests"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void constructor_ValidName_NullTag() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand actualFindCommand \u003d new FindCommand(\"CS2101\", null);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String expectedKeyword \u003d \"CS2101\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedKeyword, actualFindCommand.getKeyword());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void constructor_NullName_ValidTag() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand actualFindCommand \u003d new FindCommand(null, \"Tutorial\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String expectedKeyword \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedKeyword, actualFindCommand.getKeyword());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Logic Tests"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void isFindByName_ValidName_NullTag() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand actualFindCommand \u003d new FindCommand(\"Name\", null);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertTrue(actualFindCommand.getIsFindByName());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void isFindByName_NullName_ValidTag() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        FindCommand actualFindCommand \u003d new FindCommand(null, \"Tag\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertFalse(actualFindCommand.getIsFindByName());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_FindExactNameSuccessful() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(slotBuilder.generateSlot(1).getName(), null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (n1 !\u003d n2) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (!Pattern.matches(\".*\" + slotBuilder.generateSlot(1).getName() + \".*\", slot.getName())) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int dist \u003d Utils.getLevenshteinDistance(slotBuilder.generateSlot(1).getName(), slot.getName());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10 ) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_FindExactTagSuccessful() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e tags \u003d slotBuilder.generateSlot(1).getTags();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String tagToTest \u003d tags.iterator().next();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(null, tagToTest).execute(model, commandHistory);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                for (String tag : tagSet) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    if (!Pattern.matches(\".*\" + tagToTest + \".*\", tag)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    int dist \u003d Utils.getLevenshteinDistance(tagToTest, tag);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_FindNameNotExact() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String nameToTest \u003d slotBuilder.generateSlot(1).getName().concat(\"NotTheSame\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(nameToTest, null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (!Pattern.matches(\".*\" + slotBuilder.generateSlot(1).getName() + \".*\", slot.getName())) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int dist \u003d Utils.getLevenshteinDistance(nameToTest, slot.getName());"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_FindTagNotExact() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e tags \u003d slotBuilder.generateSlot(1).getTags();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String tagToTest \u003d tags.iterator().next();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        tagToTest \u003d tagToTest.concat(\"NotTheSame\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(null, tagToTest).execute(model, commandHistory);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                for (String tag : tagSet) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    if (tag.length() + 3 \u003c tagToTest.length()) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    int dist \u003d Utils.getLevenshteinDistance(tagToTest, tag);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_FindTagNotFound() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String tagToTest \u003d LONG_STRING;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(null, tagToTest).execute(model, commandHistory);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                for (String tag : tagSet) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    if (tag.length() + 3 \u003c tagToTest.length()) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    int dist \u003d Utils.getLevenshteinDistance(tagToTest, tag);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(MESSAGE_SUCCESS_NONE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_find_Multiple_Slots() throws Exception{"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 03, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 03, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String nameToTest \u003d slotBuilder.generateSlot(3).getName();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(nameToTest, null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (!Pattern.matches(\".*\" + slotBuilder.generateSlot(1).getName() + \".*\", slot.getName())) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int dist \u003d Utils.getLevenshteinDistance(nameToTest, slot.getName());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Comparator Tests"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_compare_OrderName() {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String nameToTest \u003d \"slot\";"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(nameToTest, null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (!Pattern.matches(\".*\" + nameToTest + \".*\", slot.getName())) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int dist \u003d Utils.getLevenshteinDistance(nameToTest, slot.getName());"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_compare_OrderDistance() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String nameToTest \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new FindCommand(nameToTest, null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        List\u003cWeightedName\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Queue\u003cWeightedName\u003e weightedNames \u003d new PriorityQueue\u003c\u003e(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            public int compare(WeightedName p1, WeightedName p2) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n1 \u003d p1.getName();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String n2 \u003d p2.getName();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d1 \u003d p1.getDist();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int d2 \u003d p2.getDist();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date1 \u003d p1.getDate();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate date2 \u003d p2.getDate();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (d1 !\u003d d2) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return d1 - d2; //order by distance"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else if (!n1.equalsIgnoreCase(n2)) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return n1.compareTo(n2); //order by name"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return date1.compareTo(date2); //order by date"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (!Pattern.matches(\".*\" + nameToTest + \".*\", slot.getName())) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                int dist \u003d Utils.getLevenshteinDistance(nameToTest, slot.getName());"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                WeightedName distNameTrie \u003d new WeightedName(entry, slot, entry.getKey(), dist);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                weightedNames.add(distNameTrie);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        while (!weightedNames.isEmpty() \u0026\u0026 weightedNames.peek().getDist() \u003c 10) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            selectedSlots.add(weightedNames.poll());"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessageWeighted(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 624
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.commands.HelpCommand.MESSAGE_ALL_USAGES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 24
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 36
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public TemporaryFolder tempFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private String tempFolderPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        tempFolderPath \u003d tempFolder.getRoot().getPath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        expectedModel.setLastShownList(model.getLastShownList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //create test file with all valid events"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        File importTest \u003d tempFolder.newFile(\"ImportTest.ics\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(importTest);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        fileWriter.write(\"BEGIN:VCALENDAR\\r\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"VERSION:2.0\\r\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190204T000000\\r\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190204T000000\\r\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 3\\r\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 3\\r\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 3\\r\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag3,\\r\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190203T000000\\r\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190203T000000\\r\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 3\\r\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 3\\r\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 3\\r\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag3,\\r\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190202T000000\\r\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190202T000000\\r\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 2\\r\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 2\\r\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 2\\r\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag2,tag3,\\r\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190201T000000\\r\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190201T000000\\r\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 1\\r\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 1\\r\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 1\\r\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag1,tag2,\\r\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VCALENDAR\\r\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //create test file with 1 invalid event"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        File importTest2 \u003d tempFolder.newFile(\"ImportTest2.ics\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        fileWriter \u003d new FileWriter(importTest2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        fileWriter.write(\"BEGIN:VCALENDAR\\r\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"VERSION:2.0\\r\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190204T000000\\r\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190204T000000\\r\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 3\\r\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 3\\r\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 3\\r\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag3,\\r\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190203T000000\\r\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190203T000000\\r\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 3\\r\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 3\\r\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 3\\r\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag3,\\r\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190202T000000\\r\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190202T000000\\r\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 2\\r\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 2\\r\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 2\\r\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag2,tag3,\\r\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20190201T000000\\r\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20190201T000000\\r\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 1\\r\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 1\\r\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 1\\r\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag1,tag2,\\r\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"BEGIN:VEVENT\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTSTART:20100204T000000\\r\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DTEND:20100204T000000\\r\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"SUMMARY:slot 4\\r\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"LOCATION:location 4\\r\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"DESCRIPTION:description 4\\r\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"X-TAGS:tag4,tag5,\\r\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VEVENT\\r\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                + \"END:VCALENDAR\\r\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    //test for all valid events"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void execute_import_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertCommandSuccess(new ImportCommand(tempFolderPath + \"/ImportTest.ics\"), model, commandHistory,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    //test for 1 invalid event"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void execute_import_invalidEvent() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS + \"1 event(s) failed to import.\\n\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertCommandSuccess(new ImportCommand(tempFolderPath + \"/ImportTest2.ics\"), model, commandHistory,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    //test for invalid file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void execute_import_fail() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String expectedMessage \u003d ImportCommand.MESSAGE_ERROR_IN_READING_FILE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertCommandFailure(new ImportCommand(tempFolderPath + \"/FileDoesNotExist.ics\"), model,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 165
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_MULTIPLE_PARAMS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.commands.ListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.commands.ListCommand.MESSAGE_SUCCESS_NONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.ListCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair4;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair1 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 01),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair2 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 02),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SATURDAY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(2)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair3 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 03),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SUNDAY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair4 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 04),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair4.getKey(), pair4.getValue());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair3.getKey(), pair3.getValue());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair2.getKey(), pair2.getValue());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair1.getKey(), pair1.getValue());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.setLastShownList(list);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.setLastShownList(model.getLastShownList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     *  Parser Tests"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Invalid_IncorrectPrefix_throwsParserException() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        listCommandParser.parse(\"st/08:00\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Invalid_MultipleParams_throwsParserException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_MULTIPLE_PARAMS, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        listCommandParser.parse(\"n/CS2101 t/Tutorial\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_ValidPrefixNameOnly_SameKeyword() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(\"CS2113\", null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d listCommandParser.parse(\"n/CS2113\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(actualListCommand.getKeyword(), expectedListCommand.getKeyword());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_ValidPrefixTagOnly_SameKeyword() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(null, \"Tutorial\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d listCommandParser.parse(\"t/Tutorial\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(actualListCommand.getKeyword(), expectedListCommand.getKeyword());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_parseAll() throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommandParser listCommandParser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d listCommandParser.parse(\"all\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(actualListCommand.getKeyword(), expectedListCommand.getKeyword());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Constructor Tests"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void constructor_ValidName_NullTag() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d new ListCommand(\"CS2101\", null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String expectedKeyword \u003d \"CS2101\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedKeyword, actualListCommand.getKeyword());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void constructor_NullName_ValidTag() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d new ListCommand(null, \"Tutorial\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String expectedKeyword \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedKeyword, actualListCommand.getKeyword());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Logic Tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void isFindByName_ValidName_NullTag() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d new ListCommand(\"Name\", null);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertTrue(actualListCommand.getIsListByName());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void isFindByName_NullName_ValidTag() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ListCommand actualListCommand \u003d new ListCommand(null, \"Tag\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertFalse(actualListCommand.getIsListByName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_ListNameSuccessful() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new ListCommand(slotBuilder.generateSlot(1).getName(), null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (slot.getName().equalsIgnoreCase(slotBuilder.generateSlot(1).getName())) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessage(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_ListTagSuccessful() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e tags \u003d slotBuilder.generateSlot(1).getTags();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String tagToTest \u003d tags.iterator().next();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new ListCommand(null, tagToTest).execute(model, commandHistory);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                for (String tag : tagSet) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    if (tag.equalsIgnoreCase(tagToTest)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessage(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_ListNameNotFound() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String nameToTest \u003d slotBuilder.generateSlot(1).getName().concat(\"NotTheSame\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new ListCommand(nameToTest, null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                if (slot.getName().equalsIgnoreCase(nameToTest)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(MESSAGE_SUCCESS_NONE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_slotAcceptedByModel_ListTagNotFound() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e tags \u003d slotBuilder.generateSlot(1).getTags();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String tagToTest \u003d tags.iterator().next();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        tagToTest \u003d tagToTest.concat(\"NotTheSame\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new ListCommand(null, tagToTest).execute(model, commandHistory);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Set\u003cString\u003e tagSet \u003d slot.getTags();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                for (String tag : tagSet) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    if (tag.equalsIgnoreCase(tagToTest)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(MESSAGE_SUCCESS_NONE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_listAll() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult commandResult \u003d new ListCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        final List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e selectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Day\u003e entry : model.getDays().entrySet()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            for (Slot slot : entry.getValue().getSlots()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                selectedSlots.add(new Pair\u003c\u003e(entry.getKey(), new Pair\u003c\u003e(entry.getValue(), slot)));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        selectedSlots.sort((p1, p2) -\u003e p1.getKey().compareTo(p2.getKey()));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUCCESS, selectedSlots.size(),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                Messages.craftListMessage(selectedSlots)), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 308
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair3;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair1 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 01),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair2 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 02),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SATURDAY,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(2)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair3 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 03),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SUNDAY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair4 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 04),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair4.getKey(), pair4.getValue());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair3.getKey(), pair3.getValue());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair2.getKey(), pair2.getValue());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair1.getKey(), pair1.getValue());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.setLastShownList(list);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel \u003d model;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e recurrenceStrings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        recurrenceStrings.add(\"normal\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        recurrenceStrings.add(\"reading\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Recurrence recurrence \u003d new Recurrence(recurrenceStrings, 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Command addSlotModel \u003d new AddCommand(slotBuilder.generateSlot(1), recurrence);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        addSlotModel.execute(model,commandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        addSlotModel.execute(expectedModel,commandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.redo();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     * Parser Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Valid_RedoCommand_ParserManager() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Command actualRedoCommand \u003d parserManager.parseCommand(\"redo\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult expectedRedoCommandOutput \u003d new RedoCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedRedoCommandOutput, actualRedoCommand.execute(model, commandHistory));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 144
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "//@@author marcus-pzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import static planmysem.logic.Commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private Pair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e pair4;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair1 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 01),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.FRIDAY,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(1)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair2 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 02),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SATURDAY,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair3 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 03),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.SUNDAY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 3\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        pair4 \u003d new Pair\u003c\u003e("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                LocalDate.of(2019, 02, 04),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                new Pair\u003c\u003e("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        new Day("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                                \"Week 4\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        ),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                        slotBuilder.generateSlot(3)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "                )"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 02), slotBuilder.generateSlot(2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 03), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.addSlot(LocalDate.of(2019, 02, 04), slotBuilder.generateSlot(3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Map\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e list \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair4.getKey(), pair4.getValue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair3.getKey(), pair3.getValue());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair2.getKey(), pair2.getValue());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        list.put(pair1.getKey(), pair1.getValue());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        model.setLastShownList(list);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel \u003d model;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e recurrenceStrings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        recurrenceStrings.add(\"normal\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        recurrenceStrings.add(\"reading\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Recurrence recurrence \u003d new Recurrence(recurrenceStrings, 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Command addSlotModel \u003d new AddCommand(slotBuilder.generateSlot(1), recurrence);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        addSlotModel.execute(model,commandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        addSlotModel.execute(expectedModel,commandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     *  Parser Tests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public void execute_Valid_RedoCommand_ParserManager() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Command actualUndoCommand \u003d parserManager.parseCommand(\"undo\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        CommandResult expectedUndoCommandOutput \u003d new UndoCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        assertEquals(expectedUndoCommandOutput, actualUndoCommand.execute(model, commandHistory));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus-pzj": 137
    }
  },
  {
    "path": "test/java/planmysem/logic/Commands/ViewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "package planmysem.logic.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private SlotBuilder slotBuilder \u003d new SlotBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Clock.set(\"2020-02-01T10:00:00Z\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // Create typical planner"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model.addSlot(LocalDate.of(2020, 02, 01), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model.addSlot(LocalDate.of(2020, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model.addSlot(LocalDate.of(2020, 02, 02), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model.addSlot(LocalDate.of(2020, 02, 02), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model.addSlot(LocalDate.of(2020, 02, 03), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        model.addSlot(LocalDate.of(2020, 02, 04), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2020, 02, 01), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2020, 02, 01), slotBuilder.generateSlot(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2020, 02, 02), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2020, 02, 02), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2020, 02, 03), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedModel.addSlot(LocalDate.of(2020, 02, 04), slotBuilder.slotOne());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void execute_displayMonthView_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(new String[]{\"month\"});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand actualCommand \u003d new ViewCommand(new String[]{\"month\"});"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void execute_displayWeekView_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(new String[]{\"week\"});"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand actualCommand \u003d new ViewCommand(new String[]{\"week\"});"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"week\", \"Examination\"});"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"week\", \"Examination\"});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"week\", \"3\"});"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"week\", \"3\"});"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void execute_displayDetailedWeekView_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(new String[]{\"week\", \"Details\"});"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand actualCommand \u003d new ViewCommand(new String[]{\"week\", \"Details\"});"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"week\", \"Examination\", \"Details\"});"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"week\", \"Examination\", \"Details\"});"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"week\", \"3\", \"Details\"});"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"week\", \"3\", \"Details\"});"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void execute_displayDayView_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(new String[]{\"day\"});"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand actualCommand \u003d new ViewCommand(new String[]{\"day\"});"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"day\", \"1\"});"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"day\", \"1\"});"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"day\", \"02-02\"});"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"day\", \"02-02\"});"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void execute_displayDayView_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(new String[]{\"day\", \"29-02\"});"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand actualCommand \u003d new ViewCommand(new String[]{\"day\", \"29-02\"});"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        CommandResult actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"day\", \"01-01\"});"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"day\", \"01-01\"});"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommand \u003d new ViewCommand(new String[]{\"day\", \"0\"});"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedCommandResult \u003d expectedCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommand \u003d new ViewCommand(new String[]{\"day\", \"0\"});"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        actualCommandResult \u003d actualCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(expectedCommandResult.getFeedbackToUser(), actualCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dingheng4448": 177
    }
  },
  {
    "path": "test/java/planmysem/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.storage.StorageFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static final String testFileName \u003d \"testSaveFile.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private StorageFile storageFile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        storageFile \u003d new StorageFile(temporaryFolder.getRoot().getPath() + \"\\\\\" + testFileName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic \u003d new LogicManager(storageFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_throwsStorageOperationException() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // delete save file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        File file \u003d new File(temporaryFolder.getRoot().getPath() + \"\\\\\" + testFileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        file.setReadOnly();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String cmd \u003d SlotBuilder.generateAddCommand(slot, 2, \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(cmd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getStorageFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(logic.getStorageFilePath(), storageFile.getPath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getLastShownSlots() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String cmd \u003d SlotBuilder.generateAddCommand(slot, 2, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(cmd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(\"list n/CS2113T Tutorial\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e lastShownSlots"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.TUESDAY, \"Week 1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        day.addSlot(slot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        lastShownSlots.add(new Pair\u003c\u003e(LocalDate.of(2019, 1, 15),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e(day, new SlotBuilder().slotOne())));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(logic.getLastShownSlots(), lastShownSlots);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getHistory() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ObservableList\u003cString\u003e expectedHistory \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String cmd \u003d SlotBuilder.generateAddCommand(slot, 2, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(cmd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedHistory.add(cmd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(\"list n/CS2113T Tutorial\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedHistory.add(\"list n/CS2113T Tutorial\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(\"view week\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedHistory.add(\"view week\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        logic.execute(\"d 1\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedHistory.add(\"d 1\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(logic.getHistory(), expectedHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(logic.getHistory().hashCode(), expectedHistory.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equal same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(logic.getHistory(), logic.getHistory());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(logic.getHistory().hashCode(), logic.getHistory().hashCode());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equal null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(logic.getHistory(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String deleteCommand \u003d \"delete 3\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" n/CS2113T\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_NONE, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *      - {@code expectedModel}\u0027s planner was saved to the storage file."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertNull(expectedException);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 209
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_DATE_OR_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_minimalFields_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Date represented in day format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial d/mon st/08:00 et/09:00\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Date represented in date format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial d/14-01-2019 st/08:00 et/09:00\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalDate.of(2019, 1, 14)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/CS2113T t/Tutorial\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial l/COM2 04-01 d/mon st/08:00 et/09:00 \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial l/COM2 04-01 d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial l/COM2 04-01 d/mon st/08:00 et/09:00 t/CS2113T t/Tutorial\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial l/COM2 04-01 d/mon st/08:00 et/09:00\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_allFieldsMissing_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new Recurrence("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                new HashSet\u003c\u003e(Arrays.asList(\"normal\")),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                                1"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        )));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram r/exam\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"exam\")),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial r/reading r/exam l/COM2 04-01 \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/CS2113T t/Tutorial\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"reading\", \"exam\")),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial l/COM2 04-01 d/mon st/08:00 et/09:00 r/normal r/exam des/Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"normal\", \"exam\")),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"n/CS2113T Tutorial l/COM2 04-01 d/mon r/reading r/recess st/08:00 et/09:00 t/CS2113T t/Tutorial\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"reading\", \"recess\")),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"r/normal r/reading r/recess r/exam n/CS2113T Tutorial l/COM2 04-01 d/mon st/08:00 et/09:00\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new AddCommand(new Slot("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                ), new Recurrence("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"reading\", \"recess\", \"normal\", \"exam\")),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add d/mon st/08:00 et/09:00\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial st/08:00 et/09:00\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // missing start time prefix"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon et/09:00 \","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // missing end time prefix"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/08:00\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidDate_failure() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/0 st/08:00 et/09:00 \""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_DATE_OR_DAY));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/19999 st/08:00 et/09:00 \""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_DATE_OR_DAY));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidTime_failure() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/25:00 et/09:00 \""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/08:00 et/25:00 \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/08:00 et/13:00AM \""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidEndTime_failure() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/23:00 et/09:00 \""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_ENDTIME));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/08:00am et/7:59 am \""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"des/Topic: Sequence Diagram t/CS2113T t/Tutorial r/normal\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_ENDTIME));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidTag_failure() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"add n/CS2113T Tutorial d/mon st/08:00 et/09:00 des/Topic: Sequence Diagram t/ t/Tutorial r/normal\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        AddCommand.MESSAGE_USAGE, MESSAGE_INVALID_TAG));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 334,
      "dingheng4448": 1
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 38
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_validTags_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // single tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"t/CS2113T\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new DeleteCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Collections.singletonList(\"CS2113T\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"t/CS2113T t/Tutorial t/Hard\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new DeleteCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\", \"Hard\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_validIndex_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new DeleteCommand(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"100\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new DeleteCommand(100)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_noIndexNoTag_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"nt/CS2113T nt/Tutorial nt/Hard\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"0\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"-1\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 91
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_NOTHING_TO_EDIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-13T10:00:00Z\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_validTags_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // single tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"t/CS2113T nl/COM2 04-01\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        -1,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Collections.singletonList(\"CS2113T\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"t/CS2113T t/Tutorial nst/08:00 net/09:00 t/Hard\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        60,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\", \"Hard\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // multiple tags all input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"nn/CS2113T nst/08:00 net/75 ndes/So tough nt/new tag t/CS2113T t/Tutorial nl/COM2 04-01 t/Hard\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"CS2113T\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        75,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"So tough\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\", \"Hard\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Collections.singletonList(\"new tag\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_validIndex_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"1 nl/COM2 04-01\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        -1,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"100 nl/COM2 04-01\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        100,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        -1,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"COM2 04-01\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"0\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"-1\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_noIndexNoTag_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"nl/COM2 04-01\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidStartTime_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                EditCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"1 nst/25:00\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_invalidEndTime_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                EditCommand.MESSAGE_USAGE, MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"1 net/25:00\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_nothingToEdit_failure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT_ADDITIONAL,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                EditCommand.MESSAGE_USAGE, MESSAGE_NOTHING_TO_EDIT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"1 nnt/\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"1 nl/\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"t/test ndes/\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 178
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        public void parse_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \"fn/test\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                new ExportCommand(\"test\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        //default is PlanMySem"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseSuccess(parser, \"\", new ExportCommand(\"PlanMySem\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void parse_wrongParameter_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \"n/WrongPara\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 40
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \"fn/test\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                new ImportCommand(\"test\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void parse_wrongParameter_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \"n/WrongPara\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "                expectedMessage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 45
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/ParserManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ParserManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private final ParserManager parser \u003d new ParserManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_commandAddViaDay() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                AddCommand.COMMAND_WORD + \" \" + \"n/CS2113T Tutorial d/mon st/08:00 et/09:00\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new AddCommand(new Slot("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ), new Recurrence("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        )), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand commandShort \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                AddCommand.COMMAND_WORD_SHORT + \" \" + \"n/CS2113T Tutorial d/mon st/08:00 et/09:00\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new AddCommand(new Slot("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ), new Recurrence("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        )), commandShort);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_commandAddViaDate() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        + \"n/CS2113T Tutorial d/21-01-2019 st/08:00 et/09:00\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new AddCommand(new Slot("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"CS2113T Tutorial\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.of(9, 0),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ), new Recurrence("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 1, 21)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        )), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_commandDeleteViaIndex() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new DeleteCommand(1), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand commandAlt \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                DeleteCommand.COMMAND_WORD_ALT + \" 1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new DeleteCommand(1), commandAlt);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand commandShort \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                DeleteCommand.COMMAND_WORD_SHORT + \" 1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new DeleteCommand(1), commandShort);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_commandDeleteViaTags() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" t/CS2113T t/Tutorial\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new DeleteCommand(new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_commandEditViaIndex() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + \"1 nl/COM2 04-01\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new EditCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                -1,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"COM2 04-01\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand commandShort \u003d (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                EditCommand.COMMAND_WORD_SHORT + \" \" + \"1 nl/COM2 04-01\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new EditCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                -1,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"COM2 04-01\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ), commandShort);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parse_commandEditViaTags() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + \"t/CS2113T nl/COM2 04-01\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new EditCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                -1,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"COM2 04-01\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e(Collections.singletonList(\"CS2113T\")),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ), command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        //assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD) instanceof ViewCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand(ViewCommand.COMMAND_WORD + \" month\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(new ViewCommand(new String[]{\"month\"}), command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        ViewCommand commandShort \u003d (ViewCommand) parser.parseCommand(ViewCommand.COMMAND_WORD_SHORT + \" month\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(new ViewCommand(new String[]{\"month\"}), commandShort);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 226,
      "dingheng4448": 11,
      "macchazuki": 1
    }
  },
  {
    "path": "test/java/planmysem/logic/parser/ViewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "package planmysem.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_ILLEGAL_WEEK_VALUE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static planmysem.common.Messages.MESSAGE_INVALID_DATE_OR_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import static planmysem.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import planmysem.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parse_validMonthArgs_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"month\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"month\"}));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parse_validWeekArgs_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\"}));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"1\"}));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week 13\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"13\"}));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week exam\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Examination\"}));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week recess\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Recess\"}));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week reading\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Reading\"}));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week orientation\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Orientation\"}));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week details\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Details\"}));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week exam details\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Examination\", \"Details\"}));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week details exam\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Examination\", \"Details\"}));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week recess details\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Recess\", \"Details\"}));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week reading details\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Reading\", \"Details\"}));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week orientation details\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"week\", \"Orientation\", \"Details\"}));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parse_validDayArgs_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\"}));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day 1\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\", \"1\"}));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day 7\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\", \"7\"}));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day mon\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\", \"mon\"}));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day sun\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\", \"sun\"}));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day Monday\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\", \"Monday\"}));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day Sunday\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                new ViewCommand(new String[]{\"day\", \"Sunday\"}));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"month 1\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"test test test test\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parse_invalidWeekArgs_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week -1\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_ILLEGAL_WEEK_VALUE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week 14\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_ILLEGAL_WEEK_VALUE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week something\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_ILLEGAL_WEEK_VALUE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"week detail detail\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                String.format(MESSAGE_ILLEGAL_WEEK_VALUE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    public void parse_invalidDayArgs_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day 0\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_DATE_OR_DAY, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day 32\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_DATE_OR_DAY, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "                \"day test\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String.format(MESSAGE_INVALID_DATE_OR_DAY, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 4,
      "dingheng4448": 155
    }
  },
  {
    "path": "test/java/planmysem/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.ReadOnlyDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.ReadOnlySlot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void clearLastShownList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        List\u003cPair\u003cLocalDate, Pair\u003cReadOnlyDay, ReadOnlySlot\u003e\u003e\u003e lastShownSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.TUESDAY, \"Week 1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        lastShownSlots.add(new Pair\u003c\u003e(LocalDate.of(2019, 1, 15),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Pair\u003c\u003e(day, new SlotBuilder().slotOne())));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.setLastShownList(lastShownSlots);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager.lastShownList, lastShownSlots);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.clearLastShownList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager.lastShownList, Collections.EMPTY_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void undo() throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 1, 15);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.addSlot(date, slot);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // test canUndo()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(modelManager.canUndo());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager.getPlanner().getSemester(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedModelManager.getPlanner().getSemester());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void redo() throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 1, 15);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.addSlot(date, slot);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // test canRedo()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(modelManager.canRedo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        modelManager.redo();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedModelManager.addSlot(date, slot);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager.getPlanner().getSemester(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                expectedModelManager.getPlanner().getSemester());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager.hashCode(), modelManager.hashCode());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(modelManager, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different objects same values"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager, expectedModelManager);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(modelManager.hashCode(), expectedModelManager.hashCode());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 106
    }
  },
  {
    "path": "test/java/planmysem/model/PlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "public class PlannerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void initTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner expectedPlanner \u003d new Planner(planner.getSemester());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(expectedPlanner, planner);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner expectedPlanner \u003d new Planner(planner);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(expectedPlanner, planner);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(expectedPlanner.hashCode(), planner.hashCode());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 18,
      "dingheng4448": 12
    }
  },
  {
    "path": "test/java/planmysem/model/Recurrence/RecurrenceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.Recurrence;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class RecurrenceTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester \u003d Semester.generateSemester(LocalDate.now(Clock.get()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void generateDatesTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence all \u003d new Recurrence(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"normal\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"recess\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"reading\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"exam\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"past\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )), 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(all.generateDates(semester).size(), 17);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-05-12T10:00:00Z\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence noPast \u003d new Recurrence(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"normal\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"recess\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"reading\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"exam\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )), 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(noPast.generateDates(semester).size(), 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence futureOnly \u003d new Recurrence(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"normal\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"recess\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"reading\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"exam\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )), 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(futureOnly.generateDates(semester).size(), 17);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getDateTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence all \u003d new Recurrence(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"normal\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"recess\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"reading\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"exam\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"past\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(all.getDate(), LocalDate.of(2019, 1, 21));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence all \u003d new Recurrence(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"normal\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"recess\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"reading\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"exam\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"past\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )), 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Recurrence allCopy \u003d new Recurrence(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"normal\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"recess\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"reading\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"exam\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"past\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )), 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(all, allCopy);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(all.hashCode(), allCopy.hashCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 95
    }
  },
  {
    "path": "test/java/planmysem/model/Semester/DayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.Semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class DayTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void initTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.of(1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"Week 1\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "               Collections.singletonList(slot));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day.getSlots(), Collections.singletonList(slot));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void containsTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.of(1), \"Week 1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertFalse(day.contains(slot));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        day.addSlot(slot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(day.contains(slot));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getDayOfWeekTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.of(1), \"Week 1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day.getDayOfWeek(), DayOfWeek.of(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(day.getDayOfWeek(), DayOfWeek.of(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getDayTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.of(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(dayOfWeek, \"Week 1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day.getDay(), dayOfWeek.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        DayOfWeek dayOfWeek2 \u003d DayOfWeek.of(2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(day.getDay(), dayOfWeek2.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getTypeTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.of(1), \"Week 1\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day.getType(), \"Week 1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(day.getType(), \"Week 2\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getSlotsTest() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.of(1), \"Week 1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day.getSlots(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        day.addSlot(slot);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day.getSlots(), Collections.singletonList(slot));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new Day(DayOfWeek.of(1), \"Week 1\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Day(DayOfWeek.of(1), \"Week 1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new Day(DayOfWeek.of(1), \"Week 2\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Day(DayOfWeek.of(1), \"Week 2\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new Day(DayOfWeek.of(2), \"Week 2\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Day(DayOfWeek.of(2), \"Week 2\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(new Day(DayOfWeek.of(2), \"Week 2\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Day(DayOfWeek.of(3), \"Week 2\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(new Day(DayOfWeek.of(2), \"Week 2\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Day(DayOfWeek.of(2), \"Week 3\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // test hashcode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(new Day(DayOfWeek.of(1), \"Week 1\").hashCode(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Day(DayOfWeek.of(1), \"Week 1\").hashCode());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 99
    }
  },
  {
    "path": "test/java/planmysem/model/Semester/SemesterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.Semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void initTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // sem 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester generatedSemester \u003d Semester.generateSemester(LocalDate.of(2018, 8, 14));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Clock.set(\"2018-08-14T10:00:00Z\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester expectedSemester \u003d new Semester(generatedSemester);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // vacation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        generatedSemester \u003d Semester.generateSemester(LocalDate.of(2019, 01, 01));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Clock.set(\"2019-01-01T10:00:00Z\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedSemester \u003d new Semester(generatedSemester);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // sem 2"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        generatedSemester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedSemester \u003d new Semester(generatedSemester);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // vacation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        generatedSemester \u003d Semester.generateSemester(LocalDate.of(2019, 6, 13));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Clock.set(\"2019-06-13T10:00:00Z\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedSemester \u003d new Semester(generatedSemester);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        // new semester reinitialization"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Semester oldSemester \u003d Semester.generateSemester(LocalDate.of(2019, 2, 14));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        generatedSemester \u003d Semester.generateSemester(LocalDate.of(2019, 8, 20));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        Clock.set(\"2019-08-20T10:00:00Z\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        expectedSemester \u003d new Semester(oldSemester);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dingheng4448"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getSlotsTest() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester semester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(semester.getSlots(new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))).size(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.addSlot(LocalDate.of(2019, 1, 14),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new SlotBuilder().slotOne());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(semester.getSlots(new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))).size(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.addSlot(LocalDate.of(2019, 1, 15),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new SlotBuilder().slotOne());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(semester.getSlots(new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))).size(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void addSlotTest() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester semester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d semester.addSlot(LocalDate.of(2019, 1, 14), slot);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day expectedDay \u003d new Day(DayOfWeek.MONDAY, \"Week 1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedDay.addSlot(slot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(day, expectedDay);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void addSlotTest_throwsDateNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester semester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(Semester.DateNotFoundException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.addSlot(null, slot);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // add before start date"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(Semester.DateNotFoundException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.addSlot(LocalDate.of(2019, 1, 12), slot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // add after end date"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(Semester.DateNotFoundException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.addSlot(LocalDate.of(2020, 1, 12), slot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void execute_generateSemester() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Assert Semester One generation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester generatedSemester \u003d Semester.generateSemester(LocalDate.of(2018, 8, 6));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester expectedSemester \u003d helper.generateSemesterFromDate(LocalDate.of(2018, 8, 6), \"Sem 1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedSemester \u003d Semester.generateSemester(LocalDate.of(2018, 10, 6));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // Assert Semester Two generation"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        generatedSemester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate semTwoDate \u003d LocalDate.of(2019, 1, 14);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedSemester \u003d helper.generateSemesterFromDate(semTwoDate, \"Sem 2\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedSemester \u003d Semester.generateSemester(LocalDate.of(2019, 3, 17));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(generatedSemester, expectedSemester);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void containsSlotTest() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester semester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        semester.addSlot(LocalDate.of(2019, 1, 14),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                slot);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(semester.contains(LocalDate.of(2019, 1, 14), slot));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void containsDayTest() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester semester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Day day \u003d new Day(DayOfWeek.MONDAY, \"Week 1\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(semester.contains(day));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(semester.contains(LocalDate.of(2019, 1, 14)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertFalse(semester.contains(LocalDate.of(2019, 1, 13)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getAcadCal() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester semester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester anotherSemester \u003d Semester.generateSemester(LocalDate.of(2019, 1, 14));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(semester.getAcadCal(), anotherSemester.getAcadCal());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Semester.generateSemester(LocalDate.now(Clock.get())),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Semester.generateSemester(LocalDate.now(Clock.get())));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(Semester.generateSemester(LocalDate.now(Clock.get())),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Semester.generateSemester(LocalDate.of(1999, 1, 1)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // test hashcode"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(Semester.generateSemester(LocalDate.now(Clock.get())).hashCode(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Semester.generateSemester(LocalDate.now(Clock.get())).hashCode());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(Semester.generateSemester(LocalDate.now(Clock.get())).hashCode(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                Semester.generateSemester(LocalDate.of(1999, 1, 1)).hashCode());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * A utility class to generate test model."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public class TestDataHelper {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "         * Generates a Semester from the given date"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "         *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "         * @param startDate given date which the semester should start from"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "         * @param acadSem the semester of the academic year"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "         * @return a Semester object from a specified date"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Semester generateSemesterFromDate(LocalDate startDate, String acadSem) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            String acadYear \u003d null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            LocalDate endDate \u003d LocalDate.now(Clock.get());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            int givenYear \u003d startDate.getYear();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            int weekOfStartDate \u003d startDate.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            int noOfWeeks \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            HashMap\u003cInteger, String\u003e weekNames \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            HashMap\u003cLocalDate, Day\u003e days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Set\u003cLocalDate\u003e recessDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Set\u003cLocalDate\u003e readingDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Set\u003cLocalDate\u003e normalDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            Set\u003cLocalDate\u003e examDays \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            if (\"Sem 1\".equals(acadSem)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                noOfWeeks \u003d 18;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                acadYear \u003d \"AY\" + givenYear + \"/\" + (givenYear + 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                endDate \u003d startDate.with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfStartDate + 18 - 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                endDate \u003d endDate.with(WeekFields.ISO.dayOfWeek(), 7);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate, \"Orientation Week\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                int week \u003d 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                for (int i \u003d weekOfStartDate + 1; i \u003c weekOfStartDate + 7; i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    weekNames.put(i, \"Week \" + week);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    week++;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 7, \"Recess Week\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                week \u003d 7;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                for (int i \u003d weekOfStartDate + 8; i \u003c weekOfStartDate + 15; i++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    weekNames.put(i, \"Week \" + week);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    week++;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 15, \"Reading Week\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 16, \"Examination Week\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 17, \"Examination Week\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            } else if (\"Sem 2\".equals(acadSem)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                noOfWeeks \u003d 17;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                acadYear \u003d \"AY\" + (givenYear - 1) + \"/\" + givenYear;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                endDate \u003d startDate.with(WeekFields.ISO.weekOfWeekBasedYear(), weekOfStartDate + 17 - 1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                endDate \u003d endDate.with(WeekFields.ISO.dayOfWeek(), 7);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                int week \u003d 1;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                for (int i \u003d weekOfStartDate; i \u003c weekOfStartDate + 6; i++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    weekNames.put(i, \"Week \" + week);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    week++;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 6, \"Recess Week\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                week \u003d 7;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                for (int i \u003d weekOfStartDate + 7; i \u003c weekOfStartDate + 14; i++) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    weekNames.put(i, \"Week \" + week);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    week++;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 14, \"Reading Week\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 15, \"Examination Week\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                weekNames.put(weekOfStartDate + 16, \"Examination Week\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            // Initialises HashMap and Sets of all days in current semester"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            List\u003cLocalDate\u003e datesList \u003d startDate.datesUntil(endDate.plusDays(1)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for (LocalDate date: datesList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                int weekOfYear \u003d date.get(WeekFields.ISO.weekOfWeekBasedYear());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                String weekType \u003d weekNames.get(weekOfYear);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                days.put(date, new Day(date.getDayOfWeek(), weekType));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                switch (weekType) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    case \"Recess Week\":"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        recessDays.add(date);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    case \"Reading Week\":"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        readingDays.add(date);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    case \"Examination Week\":"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        examDays.add(date);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        normalDays.add(date);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            return new Semester(acadSem, acadYear, days, startDate, endDate, noOfWeeks,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                    recessDays, readingDays, normalDays, examDays);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 254,
      "dingheng4448": 12
    }
  },
  {
    "path": "test/java/planmysem/model/Slot/SlotTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model.Slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class SlotTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Slot slot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Slot slotNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slotNull \u003d new SlotBuilder().slotNull();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getName(), slot.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getName(), slotNull.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getLocation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getLocation(), slot.getLocation());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(slotNull.getLocation());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getLocation(), slotNull.getLocation());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getDescription(), slot.getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNull(slotNull.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getDescription(), slotNull.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getDuration() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getDuration(), slot.getDuration());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slotNull.getDuration(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getDuration(), 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getStartTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getStartTime(), slot.getStartTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getStartTime(), slotNull.getStartTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void getTags() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getTags(), slot.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertTrue(slotNull.getTags().isEmpty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getTags(), slotNull.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getName(), \"test\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setName(\"test\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getName(), \"test\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setName(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getName(), \"test\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setLocation() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getLocation(), \"test\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setLocation(\"test\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getLocation(), \"test\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setLocation(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getLocation(), \"test\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setDescription() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getDescription(), \"test\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setDescription(\"test\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getDescription(), \"test\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setDescription(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getDescription(), \"test\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setStartTime() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getStartTime(), slotNull.getStartTime());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setStartTime(LocalTime.MIN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getStartTime(), LocalTime.MIN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setStartTime(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getStartTime(), LocalTime.MIN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setTags() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getTags(), slot.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setTags(new HashSet\u003c\u003e(Arrays.asList(\"test\", \"test2\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getTags(), new HashSet\u003c\u003e(Arrays.asList(\"test\", \"test2\")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setTags(null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getTags(), new HashSet\u003c\u003e(Arrays.asList(\"test\", \"test2\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setDuration() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getDuration(), slot.getDuration());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot.getDuration(), 0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        slot.setDuration(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.getDuration(), slotNull.getDuration());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot, slot);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slotNull, slotNull);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slot.hashCode(), slot.hashCode());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(slotNull.hashCode(), slotNull.hashCode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(slot, slotNull);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 134
    }
  },
  {
    "path": "test/java/planmysem/model/VersionedPlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.semester.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class VersionedPlannerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void initTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner versionedPlanner \u003d new VersionedPlanner(planner);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner.getSemester(), planner.getSemester());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void undo() throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner versionedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 1, 15);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.addSlot(date, slot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.commit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.undo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner expectedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner.getSemester(), expectedPlanner.getSemester());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void undo_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner versionedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(VersionedPlanner.NoUndoableStateException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.undo();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void redo() throws Semester.DateNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner versionedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Slot slot \u003d new SlotBuilder().slotOne();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 1, 15);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.addSlot(date, slot);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.undo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.redo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner expectedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        expectedPlanner.addSlot(date, slot);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner.getSemester(), expectedPlanner.getSemester());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void redo_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner versionedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(VersionedPlanner.NoRedoableStateException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        versionedPlanner.redo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner versionedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        VersionedPlanner expectedPlanner \u003d new VersionedPlanner(new Planner());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner, versionedPlanner);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner.hashCode(), versionedPlanner.hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // equals null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertNotEquals(versionedPlanner, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        // different objects same values"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner, expectedPlanner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        assertEquals(versionedPlanner.hashCode(), expectedPlanner.hashCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 95
    }
  },
  {
    "path": "test/java/planmysem/storage/EncryptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class EncryptorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public TemporaryFolder tempFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private String tempFolderPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        tempFolderPath \u003d tempFolder.getRoot().getPath() + \"Test.jceks\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void encrypt_valid() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String testString \u003d Encryptor.encrypt(\"Hello World!\", tempFolderPath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertNotEquals(testString, \"HellO World!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void decrypt_valid() throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        String testString \u003d Encryptor.encrypt(\"Hello World!\", tempFolderPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertEquals(Encryptor.decrypt(testString, tempFolderPath), \"Hello World!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 34
    }
  },
  {
    "path": "test/java/planmysem/storage/KeyStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "public class KeyStorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public TemporaryFolder tempFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    private String tempFolderPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        tempFolderPath \u003d tempFolder.getRoot().getPath() + \"Test.jceks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    public void load_keyStore_fileInvalid() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        KeyStorage.load(tempFolderPath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "macchazuki"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "        assertTrue(new File(tempFolderPath).exists());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "macchazuki"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "macchazuki": 29
    }
  },
  {
    "path": "test/java/planmysem/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.Clock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.common.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.Planner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/model/StorageFileTest\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Clock.set(\"2019-01-14T10:00:00Z\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        new StorageFile(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void load_invalidData_ThrowIllegalBlockSizeException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        StorageFile storage \u003d getStorage(\"InvalidData.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        thrown.expect(Storage.StorageOperationException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        storage.load();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        Planner actualPlanner \u003d getStorage(TEST_DATA_FOLDER + \"/\" +\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        Planner expectedPlanner \u003d getTestPlanner();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertEquals(actualPlanner.getSemester(), expectedPlanner.getSemester());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public void save_nullPlanner_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    public void save_validPlanner() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        Planner actualPlanner \u003d getTestPlanner();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        storage.save(actualPlanner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //        assertEquals(storage.load().getSemester(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //                getStorage(TEST_DATA_FOLDER + \"/\" +\"ValidData.txt\").load().getSemester());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new StorageFile(temporaryFolder.getRoot().getPath() + \"/\" + \"temp.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    private Planner getTestPlanner() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        planner.addSlot(LocalDate.of(2019, 4, 5),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Slot(\"CS2113T Tutorial\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        60,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        planner.addSlot(LocalDate.of(2019, 4, 8),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new Slot(\"CS2113T Tutorial\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        \"Topic: Sequence Diagram\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        LocalTime.of(8, 0),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        60,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                )"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 96,
      "-": 13
    }
  },
  {
    "path": "test/java/planmysem/testutil/SlotBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.recurrence.Recurrence;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "import planmysem.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * A utility class to generate test data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "public class SlotBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generates a generic slot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot slotOne() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String name \u003d \"CS2113T Tutorial\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String location \u003d \"COM2 04-11\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        String description \u003d \"Topic: Sequence Diagram\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        LocalTime startTime \u003d LocalTime.parse(\"06:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        LocalTime endTime \u003d LocalTime.parse(\"07:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Slot(name, location, description, startTime, endTime, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    public Slot slotTwo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String name \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String location \u003d \"COM2 04-11\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        String description \u003d \"Topic: Sequence Diagram\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        LocalTime startTime \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        LocalTime endTime \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "        return new Slot(name, location, description, startTime, endTime, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus-pzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generates a slot full of null values."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot slotNull() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Slot("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"slotNull\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.parse(\"00:00\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                0,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generates a generic recurrence object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Recurrence recurrenceOne() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Recurrence("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(\"CS2113T\", \"Tutorial\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalDate.of(2019, 2, 1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Generates a valid slot using the given seed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned slot will have the same state."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * Each unique seed will generate a unique slot object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public Slot generateSlot(int seed) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return new Slot("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"slot \" + seed,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"location \" + Math.abs(seed),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                \"description \" + Math.abs(seed),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.parse(\"00:00\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                LocalTime.parse(\"00:00\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(\"tag\" + Math.abs(seed), \"tag\" + Math.abs(seed + 1)))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    public static String generateAddCommand(Slot s, int day, String recurrence) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        cmd.add(\"add\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        cmd.add(\"n/\" + s.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        cmd.add(\"d/\" + day);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        cmd.add(\"st/\" + s.getStartTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        cmd.add(\"et/\" + s.getDuration());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (s.getLocation() !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            cmd.add(\"l/\" + s.getLocation());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (s.getDescription() !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            cmd.add(\"des/\" + s.getDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        Set\u003cString\u003e tags \u003d s.getTags();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            for(String tag : tags){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "                cmd.add(\"t/\" + tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        cmd.add(recurrence);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 100,
      "marcus-pzj": 11
    }
  },
  {
    "path": "test/java/planmysem/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "package planmysem.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanieyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " * Contains static methods to be shared."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanieyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 5,
      "-": 19
    }
  },
  {
    "path": "test/model/StorageFileTest/InvalidData.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 1
    }
  },
  {
    "path": "test/model/StorageFileTest/ValidData.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanieyap"
        },
        "content": "\u003d"
      }
    ],
    "authorContributionMap": {
      "seanieyap": 1
    }
  }
]
